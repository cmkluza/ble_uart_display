
ble_uart_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdf4  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800cfe8  0800cfe8  0001cfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d624  0800d624  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800d624  0800d624  0001d624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d62c  0800d62c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d62c  0800d62c  0001d62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d634  0800d634  0001d634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800d63c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000da8  20000070  0800d6ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e18  0800d6ac  00020e18  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e292  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f6e  00000000  00000000  0006e338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d88  00000000  00000000  000752a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b30  00000000  00000000  00078030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cc7d  00000000  00000000  0007ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036f77  00000000  00000000  000b77dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165077  00000000  00000000  000ee754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002537cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cf74  00000000  00000000  00253820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000070 	.word	0x20000070
 8000210:	00000000 	.word	0x00000000
 8000214:	0800cfd0 	.word	0x0800cfd0

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000074 	.word	0x20000074
 8000230:	0800cfd0 	.word	0x0800cfd0

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b980 	b.w	800055c <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800027a:	4604      	mov	r4, r0
 800027c:	4688      	mov	r8, r1
 800027e:	2b00      	cmp	r3, #0
 8000280:	f040 8084 	bne.w	800038c <__udivmoddi4+0x118>
 8000284:	428a      	cmp	r2, r1
 8000286:	4617      	mov	r7, r2
 8000288:	d943      	bls.n	8000312 <__udivmoddi4+0x9e>
 800028a:	fab2 f282 	clz	r2, r2
 800028e:	b142      	cbz	r2, 80002a2 <__udivmoddi4+0x2e>
 8000290:	f1c2 0020 	rsb	r0, r2, #32
 8000294:	4091      	lsls	r1, r2
 8000296:	4097      	lsls	r7, r2
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4094      	lsls	r4, r2
 800029e:	ea40 0801 	orr.w	r8, r0, r1
 80002a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80002a6:	0c23      	lsrs	r3, r4, #16
 80002a8:	fa1f fe87 	uxth.w	lr, r7
 80002ac:	fbb8 f6fc 	udiv	r6, r8, ip
 80002b0:	fb0c 8116 	mls	r1, ip, r6, r8
 80002b4:	fb06 f00e 	mul.w	r0, r6, lr
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	4298      	cmp	r0, r3
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0x5c>
 80002c0:	18fb      	adds	r3, r7, r3
 80002c2:	f106 31ff 	add.w	r1, r6, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x5a>
 80002c8:	4298      	cmp	r0, r3
 80002ca:	f200 8131 	bhi.w	8000530 <__udivmoddi4+0x2bc>
 80002ce:	460e      	mov	r6, r1
 80002d0:	1a19      	subs	r1, r3, r0
 80002d2:	b2a3      	uxth	r3, r4
 80002d4:	fbb1 f0fc 	udiv	r0, r1, ip
 80002d8:	fb0c 1110 	mls	r1, ip, r0, r1
 80002dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0x84>
 80002e8:	193c      	adds	r4, r7, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0x82>
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	f200 811a 	bhi.w	800052a <__udivmoddi4+0x2b6>
 80002f6:	4618      	mov	r0, r3
 80002f8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0x98>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xa2>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	2a00      	cmp	r2, #0
 800031c:	d152      	bne.n	80003c4 <__udivmoddi4+0x150>
 800031e:	1bcb      	subs	r3, r1, r7
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f f887 	uxth.w	r8, r7
 8000328:	2601      	movs	r6, #1
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000330:	fb0e 301c 	mls	r0, lr, ip, r3
 8000334:	fb08 f90c 	mul.w	r9, r8, ip
 8000338:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800033c:	4589      	cmp	r9, r1
 800033e:	d90b      	bls.n	8000358 <__udivmoddi4+0xe4>
 8000340:	1879      	adds	r1, r7, r1
 8000342:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000346:	bf2c      	ite	cs
 8000348:	2001      	movcs	r0, #1
 800034a:	2000      	movcc	r0, #0
 800034c:	4589      	cmp	r9, r1
 800034e:	d902      	bls.n	8000356 <__udivmoddi4+0xe2>
 8000350:	2800      	cmp	r0, #0
 8000352:	f000 80f0 	beq.w	8000536 <__udivmoddi4+0x2c2>
 8000356:	469c      	mov	ip, r3
 8000358:	eba1 0109 	sub.w	r1, r1, r9
 800035c:	b2a3      	uxth	r3, r4
 800035e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000362:	fb0e 1110 	mls	r1, lr, r0, r1
 8000366:	fb08 f800 	mul.w	r8, r8, r0
 800036a:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036e:	45a0      	cmp	r8, r4
 8000370:	d907      	bls.n	8000382 <__udivmoddi4+0x10e>
 8000372:	193c      	adds	r4, r7, r4
 8000374:	f100 33ff 	add.w	r3, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x10c>
 800037a:	45a0      	cmp	r8, r4
 800037c:	f200 80d2 	bhi.w	8000524 <__udivmoddi4+0x2b0>
 8000380:	4618      	mov	r0, r3
 8000382:	eba4 0408 	sub.w	r4, r4, r8
 8000386:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038a:	e7ba      	b.n	8000302 <__udivmoddi4+0x8e>
 800038c:	428b      	cmp	r3, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x130>
 8000390:	2d00      	cmp	r5, #0
 8000392:	f000 80be 	beq.w	8000512 <__udivmoddi4+0x29e>
 8000396:	2600      	movs	r6, #0
 8000398:	e9c5 0100 	strd	r0, r1, [r5]
 800039c:	4630      	mov	r0, r6
 800039e:	4631      	mov	r1, r6
 80003a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003a4:	fab3 f683 	clz	r6, r3
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d14d      	bne.n	8000448 <__udivmoddi4+0x1d4>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f0c0 80b3 	bcc.w	8000518 <__udivmoddi4+0x2a4>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f240 80b0 	bls.w	8000518 <__udivmoddi4+0x2a4>
 80003b8:	4630      	mov	r0, r6
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	d0a6      	beq.n	800030c <__udivmoddi4+0x98>
 80003be:	e9c5 4800 	strd	r4, r8, [r5]
 80003c2:	e7a3      	b.n	800030c <__udivmoddi4+0x98>
 80003c4:	4097      	lsls	r7, r2
 80003c6:	f1c2 0320 	rsb	r3, r2, #32
 80003ca:	fa01 f002 	lsl.w	r0, r1, r2
 80003ce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d2:	40d9      	lsrs	r1, r3
 80003d4:	fa24 f303 	lsr.w	r3, r4, r3
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	4094      	lsls	r4, r2
 80003de:	4303      	orrs	r3, r0
 80003e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e4:	0c1e      	lsrs	r6, r3, #16
 80003e6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ea:	fb00 fc08 	mul.w	ip, r0, r8
 80003ee:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80003f2:	458c      	cmp	ip, r1
 80003f4:	d90e      	bls.n	8000414 <__udivmoddi4+0x1a0>
 80003f6:	1879      	adds	r1, r7, r1
 80003f8:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fc:	bf2c      	ite	cs
 80003fe:	f04f 0901 	movcs.w	r9, #1
 8000402:	f04f 0900 	movcc.w	r9, #0
 8000406:	458c      	cmp	ip, r1
 8000408:	d903      	bls.n	8000412 <__udivmoddi4+0x19e>
 800040a:	f1b9 0f00 	cmp.w	r9, #0
 800040e:	f000 8096 	beq.w	800053e <__udivmoddi4+0x2ca>
 8000412:	4630      	mov	r0, r6
 8000414:	eba1 010c 	sub.w	r1, r1, ip
 8000418:	b29b      	uxth	r3, r3
 800041a:	fbb1 f6fe 	udiv	r6, r1, lr
 800041e:	fb0e 1116 	mls	r1, lr, r6, r1
 8000422:	fb06 fc08 	mul.w	ip, r6, r8
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	458c      	cmp	ip, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x1ca>
 800042e:	1879      	adds	r1, r7, r1
 8000430:	f106 33ff 	add.w	r3, r6, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x1c8>
 8000436:	458c      	cmp	ip, r1
 8000438:	f200 8088 	bhi.w	800054c <__udivmoddi4+0x2d8>
 800043c:	461e      	mov	r6, r3
 800043e:	eba1 030c 	sub.w	r3, r1, ip
 8000442:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000446:	e770      	b.n	800032a <__udivmoddi4+0xb6>
 8000448:	f1c6 0720 	rsb	r7, r6, #32
 800044c:	fa03 f406 	lsl.w	r4, r3, r6
 8000450:	fa02 fc06 	lsl.w	ip, r2, r6
 8000454:	fa01 fe06 	lsl.w	lr, r1, r6
 8000458:	40fa      	lsrs	r2, r7
 800045a:	fa20 f807 	lsr.w	r8, r0, r7
 800045e:	40f9      	lsrs	r1, r7
 8000460:	fa00 f306 	lsl.w	r3, r0, r6
 8000464:	4322      	orrs	r2, r4
 8000466:	ea48 040e 	orr.w	r4, r8, lr
 800046a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800046e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000472:	fa1f f982 	uxth.w	r9, r2
 8000476:	fbb1 faf8 	udiv	sl, r1, r8
 800047a:	fb08 111a 	mls	r1, r8, sl, r1
 800047e:	fb0a f009 	mul.w	r0, sl, r9
 8000482:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000486:	4570      	cmp	r0, lr
 8000488:	d90e      	bls.n	80004a8 <__udivmoddi4+0x234>
 800048a:	eb12 0e0e 	adds.w	lr, r2, lr
 800048e:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000492:	bf2c      	ite	cs
 8000494:	f04f 0b01 	movcs.w	fp, #1
 8000498:	f04f 0b00 	movcc.w	fp, #0
 800049c:	4570      	cmp	r0, lr
 800049e:	d902      	bls.n	80004a6 <__udivmoddi4+0x232>
 80004a0:	f1bb 0f00 	cmp.w	fp, #0
 80004a4:	d04e      	beq.n	8000544 <__udivmoddi4+0x2d0>
 80004a6:	468a      	mov	sl, r1
 80004a8:	ebae 0e00 	sub.w	lr, lr, r0
 80004ac:	b2a4      	uxth	r4, r4
 80004ae:	fbbe f0f8 	udiv	r0, lr, r8
 80004b2:	fb08 ee10 	mls	lr, r8, r0, lr
 80004b6:	fb00 f909 	mul.w	r9, r0, r9
 80004ba:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80004be:	45f1      	cmp	r9, lr
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x25e>
 80004c2:	eb12 0e0e 	adds.w	lr, r2, lr
 80004c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ca:	d201      	bcs.n	80004d0 <__udivmoddi4+0x25c>
 80004cc:	45f1      	cmp	r9, lr
 80004ce:	d840      	bhi.n	8000552 <__udivmoddi4+0x2de>
 80004d0:	4608      	mov	r0, r1
 80004d2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80004d6:	ebae 0e09 	sub.w	lr, lr, r9
 80004da:	fba0 890c 	umull	r8, r9, r0, ip
 80004de:	45ce      	cmp	lr, r9
 80004e0:	4641      	mov	r1, r8
 80004e2:	464c      	mov	r4, r9
 80004e4:	d302      	bcc.n	80004ec <__udivmoddi4+0x278>
 80004e6:	d106      	bne.n	80004f6 <__udivmoddi4+0x282>
 80004e8:	4543      	cmp	r3, r8
 80004ea:	d204      	bcs.n	80004f6 <__udivmoddi4+0x282>
 80004ec:	3801      	subs	r0, #1
 80004ee:	ebb8 010c 	subs.w	r1, r8, ip
 80004f2:	eb69 0402 	sbc.w	r4, r9, r2
 80004f6:	b37d      	cbz	r5, 8000558 <__udivmoddi4+0x2e4>
 80004f8:	1a5a      	subs	r2, r3, r1
 80004fa:	eb6e 0e04 	sbc.w	lr, lr, r4
 80004fe:	40f2      	lsrs	r2, r6
 8000500:	fa0e f707 	lsl.w	r7, lr, r7
 8000504:	fa2e f306 	lsr.w	r3, lr, r6
 8000508:	2600      	movs	r6, #0
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c5 7300 	strd	r7, r3, [r5]
 8000510:	e6fc      	b.n	800030c <__udivmoddi4+0x98>
 8000512:	462e      	mov	r6, r5
 8000514:	4628      	mov	r0, r5
 8000516:	e6f9      	b.n	800030c <__udivmoddi4+0x98>
 8000518:	1a84      	subs	r4, r0, r2
 800051a:	eb61 0103 	sbc.w	r1, r1, r3
 800051e:	2001      	movs	r0, #1
 8000520:	4688      	mov	r8, r1
 8000522:	e74a      	b.n	80003ba <__udivmoddi4+0x146>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e72b      	b.n	8000382 <__udivmoddi4+0x10e>
 800052a:	3802      	subs	r0, #2
 800052c:	443c      	add	r4, r7
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x84>
 8000530:	3e02      	subs	r6, #2
 8000532:	443b      	add	r3, r7
 8000534:	e6cc      	b.n	80002d0 <__udivmoddi4+0x5c>
 8000536:	f1ac 0c02 	sub.w	ip, ip, #2
 800053a:	4439      	add	r1, r7
 800053c:	e70c      	b.n	8000358 <__udivmoddi4+0xe4>
 800053e:	3802      	subs	r0, #2
 8000540:	4439      	add	r1, r7
 8000542:	e767      	b.n	8000414 <__udivmoddi4+0x1a0>
 8000544:	f1aa 0a02 	sub.w	sl, sl, #2
 8000548:	4496      	add	lr, r2
 800054a:	e7ad      	b.n	80004a8 <__udivmoddi4+0x234>
 800054c:	3e02      	subs	r6, #2
 800054e:	4439      	add	r1, r7
 8000550:	e775      	b.n	800043e <__udivmoddi4+0x1ca>
 8000552:	3802      	subs	r0, #2
 8000554:	4496      	add	lr, r2
 8000556:	e7bc      	b.n	80004d2 <__udivmoddi4+0x25e>
 8000558:	462e      	mov	r6, r5
 800055a:	e6d7      	b.n	800030c <__udivmoddi4+0x98>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <HCI_TL_SPI_Init+0x80>)
 800056a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056c:	4a1c      	ldr	r2, [pc, #112]	; (80005e0 <HCI_TL_SPI_Init+0x80>)
 800056e:	f043 0301 	orr.w	r3, r3, #1
 8000572:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000574:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <HCI_TL_SPI_Init+0x80>)
 8000576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000580:	2340      	movs	r3, #64	; 0x40
 8000582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <HCI_TL_SPI_Init+0x84>)
 8000586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	4815      	ldr	r0, [pc, #84]	; (80005e8 <HCI_TL_SPI_Init+0x88>)
 8000594:	f004 f9da 	bl	800494c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800059c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059e:	2301      	movs	r3, #1
 80005a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	4619      	mov	r1, r3
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <HCI_TL_SPI_Init+0x88>)
 80005b2:	f004 f9cb 	bl	800494c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005b6:	2320      	movs	r3, #32
 80005b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	4619      	mov	r1, r3
 80005cc:	4806      	ldr	r0, [pc, #24]	; (80005e8 <HCI_TL_SPI_Init+0x88>)
 80005ce:	f004 f9bd 	bl	800494c <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 80005d2:	f002 fe13 	bl	80031fc <BSP_SPI1_Init>
 80005d6:	4603      	mov	r3, r0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3720      	adds	r7, #32
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	10110000 	.word	0x10110000
 80005e8:	42021800 	.word	0x42021800

080005ec <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80005f0:	2140      	movs	r1, #64	; 0x40
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <HCI_TL_SPI_DeInit+0x24>)
 80005f4:	f004 fb2a 	bl	8004c4c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80005f8:	2120      	movs	r1, #32
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <HCI_TL_SPI_DeInit+0x24>)
 80005fc:	f004 fb26 	bl	8004c4c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000600:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000604:	4802      	ldr	r0, [pc, #8]	; (8000610 <HCI_TL_SPI_DeInit+0x24>)
 8000606:	f004 fb21 	bl	8004c4c <HAL_GPIO_DeInit>
  return 0;
 800060a:	2300      	movs	r3, #0
}
 800060c:	4618      	mov	r0, r3
 800060e:	bd80      	pop	{r7, pc}
 8000610:	42021800 	.word	0x42021800

08000614 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2120      	movs	r1, #32
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <HCI_TL_SPI_Reset+0x38>)
 800061e:	f004 fc1b 	bl	8004e58 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000628:	4808      	ldr	r0, [pc, #32]	; (800064c <HCI_TL_SPI_Reset+0x38>)
 800062a:	f004 fc15 	bl	8004e58 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800062e:	2005      	movs	r0, #5
 8000630:	f002 ff4a 	bl	80034c8 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <HCI_TL_SPI_Reset+0x38>)
 800063c:	f004 fc0c 	bl	8004e58 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000640:	2005      	movs	r0, #5
 8000642:	f002 ff41 	bl	80034c8 <HAL_Delay>
  return 0;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	bd80      	pop	{r7, pc}
 800064c:	42021800 	.word	0x42021800

08000650 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8000660:	23ff      	movs	r3, #255	; 0xff
 8000662:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000664:	4a25      	ldr	r2, [pc, #148]	; (80006fc <HCI_TL_SPI_Receive+0xac>)
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800066e:	6018      	str	r0, [r3, #0]
 8000670:	3304      	adds	r3, #4
 8000672:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2120      	movs	r1, #32
 8000678:	4821      	ldr	r0, [pc, #132]	; (8000700 <HCI_TL_SPI_Receive+0xb0>)
 800067a:	f004 fbed 	bl	8004e58 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800067e:	f107 010c 	add.w	r1, r7, #12
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2205      	movs	r2, #5
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fde7 	bl	800325c <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 800068e:	7b3b      	ldrb	r3, [r7, #12]
 8000690:	2b02      	cmp	r3, #2
 8000692:	d129      	bne.n	80006e8 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8000694:	7c3b      	ldrb	r3, [r7, #16]
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	b21a      	sxth	r2, r3
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	b21b      	sxth	r3, r3
 800069e:	4313      	orrs	r3, r2
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 80006a4:	8bfb      	ldrh	r3, [r7, #30]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d01e      	beq.n	80006e8 <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80006aa:	8bfa      	ldrh	r2, [r7, #30]
 80006ac:	887b      	ldrh	r3, [r7, #2]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d901      	bls.n	80006b6 <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 80006b2:	887b      	ldrh	r3, [r7, #2]
 80006b4:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	777b      	strb	r3, [r7, #29]
 80006ba:	e010      	b.n	80006de <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80006bc:	f107 011b 	add.w	r1, r7, #27
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	2201      	movs	r2, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fdc8 	bl	800325c <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 80006cc:	7f7b      	ldrb	r3, [r7, #29]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	7efa      	ldrb	r2, [r7, #27]
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80006d8:	7f7b      	ldrb	r3, [r7, #29]
 80006da:	3301      	adds	r3, #1
 80006dc:	777b      	strb	r3, [r7, #29]
 80006de:	7f7b      	ldrb	r3, [r7, #29]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	8bfa      	ldrh	r2, [r7, #30]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d8e9      	bhi.n	80006bc <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2120      	movs	r1, #32
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <HCI_TL_SPI_Receive+0xb0>)
 80006ee:	f004 fbb3 	bl	8004e58 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80006f2:	7f7b      	ldrb	r3, [r7, #29]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	0800cfe8 	.word	0x0800cfe8
 8000700:	42021800 	.word	0x42021800

08000704 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000710:	4a23      	ldr	r2, [pc, #140]	; (80007a0 <HCI_TL_SPI_Send+0x9c>)
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	e892 0003 	ldmia.w	r2, {r0, r1}
 800071a:	6018      	str	r0, [r3, #0]
 800071c:	3304      	adds	r3, #4
 800071e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000720:	f002 fec6 	bl	80034b0 <HAL_GetTick>
 8000724:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2120      	movs	r1, #32
 800072e:	481d      	ldr	r0, [pc, #116]	; (80007a4 <HCI_TL_SPI_Send+0xa0>)
 8000730:	f004 fb92 	bl	8004e58 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000734:	f107 0108 	add.w	r1, r7, #8
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	2205      	movs	r2, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fd8c 	bl	800325c <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8000744:	7a3b      	ldrb	r3, [r7, #8]
 8000746:	2b02      	cmp	r3, #2
 8000748:	d10f      	bne.n	800076a <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 800074a:	7a7b      	ldrb	r3, [r7, #9]
 800074c:	b29b      	uxth	r3, r3
 800074e:	887a      	ldrh	r2, [r7, #2]
 8000750:	429a      	cmp	r2, r3
 8000752:	d806      	bhi.n	8000762 <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000754:	887b      	ldrh	r3, [r7, #2]
 8000756:	461a      	mov	r2, r3
 8000758:	4913      	ldr	r1, [pc, #76]	; (80007a8 <HCI_TL_SPI_Send+0xa4>)
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f002 fd7e 	bl	800325c <BSP_SPI1_SendRecv>
 8000760:	e006      	b.n	8000770 <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8000762:	f06f 0301 	mvn.w	r3, #1
 8000766:	61fb      	str	r3, [r7, #28]
 8000768:	e002      	b.n	8000770 <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2120      	movs	r1, #32
 8000774:	480b      	ldr	r0, [pc, #44]	; (80007a4 <HCI_TL_SPI_Send+0xa0>)
 8000776:	f004 fb6f 	bl	8004e58 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800077a:	f002 fe99 	bl	80034b0 <HAL_GetTick>
 800077e:	4602      	mov	r2, r0
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	2b0f      	cmp	r3, #15
 8000786:	d903      	bls.n	8000790 <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8000788:	f06f 0302 	mvn.w	r3, #2
 800078c:	61fb      	str	r3, [r7, #28]
      break;
 800078e:	e002      	b.n	8000796 <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	2b00      	cmp	r3, #0
 8000794:	dbc7      	blt.n	8000726 <HCI_TL_SPI_Send+0x22>

  return result;
 8000796:	69fb      	ldr	r3, [r7, #28]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	0800cff0 	.word	0x0800cff0
 80007a4:	42021800 	.word	0x42021800
 80007a8:	2000008c 	.word	0x2000008c

080007ac <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <IsDataAvailable+0x1c>)
 80007b4:	f004 fb38 	bl	8004e28 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	bf0c      	ite	eq
 80007be:	2301      	moveq	r3, #1
 80007c0:	2300      	movne	r3, #0
 80007c2:	b2db      	uxtb	r3, r3
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	42021800 	.word	0x42021800

080007cc <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <hci_tl_lowlevel_init+0x50>)
 80007d4:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <hci_tl_lowlevel_init+0x54>)
 80007d8:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <hci_tl_lowlevel_init+0x58>)
 80007dc:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <hci_tl_lowlevel_init+0x5c>)
 80007e0:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <hci_tl_lowlevel_init+0x60>)
 80007e4:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <hci_tl_lowlevel_init+0x64>)
 80007e8:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4618      	mov	r0, r3
 80007ee:	f00b f875 	bl	800b8dc <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 80007f2:	4910      	ldr	r1, [pc, #64]	; (8000834 <hci_tl_lowlevel_init+0x68>)
 80007f4:	4810      	ldr	r0, [pc, #64]	; (8000838 <hci_tl_lowlevel_init+0x6c>)
 80007f6:	f004 f84d 	bl	8004894 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <hci_tl_lowlevel_init+0x70>)
 80007fc:	2100      	movs	r1, #0
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <hci_tl_lowlevel_init+0x6c>)
 8000800:	f004 f81c 	bl	800483c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI6_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2011      	movs	r0, #17
 800080a:	f003 fefa 	bl	8004602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 800080e:	2011      	movs	r0, #17
 8000810:	f003 ff11 	bl	8004636 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	08000561 	.word	0x08000561
 8000820:	080005ed 	.word	0x080005ed
 8000824:	08000705 	.word	0x08000705
 8000828:	08000651 	.word	0x08000651
 800082c:	08000615 	.word	0x08000615
 8000830:	0800329d 	.word	0x0800329d
 8000834:	06000006 	.word	0x06000006
 8000838:	20000550 	.word	0x20000550
 800083c:	08000841 	.word	0x08000841

08000840 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000844:	e005      	b.n	8000852 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8000846:	2000      	movs	r0, #0
 8000848:	f00b f9ae 	bl	800bba8 <hci_notify_asynch_evt>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d105      	bne.n	800085e <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8000852:	f7ff ffab 	bl	80007ac <IsDataAvailable>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1f4      	bne.n	8000846 <hci_tl_lowlevel_isr+0x6>
 800085c:	e000      	b.n	8000860 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800085e:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8000860:	bd80      	pop	{r7, pc}

08000862 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	6039      	str	r1, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	601a      	str	r2, [r3, #0]
    {
    }
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <_ZN3etl11vector_baseD1Ev>:

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector_base()
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
    {
    }
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4618      	mov	r0, r3
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <_ZN3ble4initENS_4RoleE>:

////////////////////////////////////////////////////////////////////////////////
// Public Implementations
////////////////////////////////////////////////////////////////////////////////

bool init(Role role) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af04      	add	r7, sp, #16
 80008b6:	6078      	str	r0, [r7, #4]
    g_ble_role = role;
 80008b8:	4a65      	ldr	r2, [pc, #404]	; (8000a50 <_ZN3ble4initENS_4RoleE+0x1a0>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]

	/** Initialize the host controller interface. */
	hci_init(process_aci_packet, NULL);
 80008be:	2100      	movs	r1, #0
 80008c0:	4864      	ldr	r0, [pc, #400]	; (8000a54 <_ZN3ble4initENS_4RoleE+0x1a4>)
 80008c2:	f00a ffc9 	bl	800b858 <hci_init>

	/* Get the BlueNRG HW and FW versions. */
	uint8_t  hwVersion;
	uint16_t fwVersion;
	getBlueNRGVersion(&hwVersion, &fwVersion);
 80008c6:	f107 021a 	add.w	r2, r7, #26
 80008ca:	f107 031d 	add.w	r3, r7, #29
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f00a fe36 	bl	800b542 <getBlueNRGVersion>
	printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 80008d6:	7f7b      	ldrb	r3, [r7, #29]
 80008d8:	4619      	mov	r1, r3
 80008da:	8b7b      	ldrh	r3, [r7, #26]
 80008dc:	461a      	mov	r2, r3
 80008de:	485e      	ldr	r0, [pc, #376]	; (8000a58 <_ZN3ble4initENS_4RoleE+0x1a8>)
 80008e0:	f00b feea 	bl	800c6b8 <iprintf>
    if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80008e4:	7f7b      	ldrb	r3, [r7, #29]
 80008e6:	2b30      	cmp	r3, #48	; 0x30
 80008e8:	d902      	bls.n	80008f0 <_ZN3ble4initENS_4RoleE+0x40>
      g_expansion_board = ExpansionBoard::IDB05A1;
 80008ea:	4b5c      	ldr	r3, [pc, #368]	; (8000a5c <_ZN3ble4initENS_4RoleE+0x1ac>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	601a      	str	r2, [r3, #0]
	 * Reset BlueNRG again otherwise we won't
	 * be able to change its MAC address.
	 * aci_hal_write_config_data() must be the first
     * command after reset otherwise it will fail.
	 */
	hci_reset();
 80008f0:	f00a fe6b 	bl	800b5ca <hci_reset>
	HAL_Delay(100);
 80008f4:	2064      	movs	r0, #100	; 0x64
 80008f6:	f002 fde7 	bl	80034c8 <HAL_Delay>

	std::uint8_t bdaddr[BDADDR_SIZE] = { 0x00, 0x00, 0x00, 0xE1, 0x80, 0x02 };
 80008fa:	4a59      	ldr	r2, [pc, #356]	; (8000a60 <_ZN3ble4initENS_4RoleE+0x1b0>)
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000904:	6018      	str	r0, [r3, #0]
 8000906:	3304      	adds	r3, #4
 8000908:	8019      	strh	r1, [r3, #0]
	if (g_ble_role == Role::CLIENT) {
 800090a:	4b51      	ldr	r3, [pc, #324]	; (8000a50 <_ZN3ble4initENS_4RoleE+0x1a0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d102      	bne.n	8000918 <_ZN3ble4initENS_4RoleE+0x68>
	    bdaddr[0] = 0xbb;
 8000912:	23bb      	movs	r3, #187	; 0xbb
 8000914:	753b      	strb	r3, [r7, #20]
 8000916:	e001      	b.n	800091c <_ZN3ble4initENS_4RoleE+0x6c>
	} else { /* Server */
	    bdaddr[0] = 0xaa;
 8000918:	23aa      	movs	r3, #170	; 0xaa
 800091a:	753b      	strb	r3, [r7, #20]
	}

	auto ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	461a      	mov	r2, r3
 8000922:	2106      	movs	r1, #6
 8000924:	2000      	movs	r0, #0
 8000926:	f00a fd74 	bl	800b412 <aci_hal_write_config_data>
 800092a:	4603      	mov	r3, r0
 800092c:	77fb      	strb	r3, [r7, #31]
	                                     CONFIG_DATA_PUBADDR_LEN,
                                         bdaddr);

	if (ret) {
 800092e:	7ffb      	ldrb	r3, [r7, #31]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d007      	beq.n	8000944 <_ZN3ble4initENS_4RoleE+0x94>
	    printf("%s: Set public address failed: %02X\n", __func__, ret);
 8000934:	7ffb      	ldrb	r3, [r7, #31]
 8000936:	461a      	mov	r2, r3
 8000938:	494a      	ldr	r1, [pc, #296]	; (8000a64 <_ZN3ble4initENS_4RoleE+0x1b4>)
 800093a:	484b      	ldr	r0, [pc, #300]	; (8000a68 <_ZN3ble4initENS_4RoleE+0x1b8>)
 800093c:	f00b febc 	bl	800c6b8 <iprintf>
	    return false;
 8000940:	2300      	movs	r3, #0
 8000942:	e081      	b.n	8000a48 <_ZN3ble4initENS_4RoleE+0x198>
	}

	ret = aci_gatt_init();
 8000944:	f00a fd42 	bl	800b3cc <aci_gatt_init>
 8000948:	4603      	mov	r3, r0
 800094a:	77fb      	strb	r3, [r7, #31]
	if (ret) {
 800094c:	7ffb      	ldrb	r3, [r7, #31]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d007      	beq.n	8000962 <_ZN3ble4initENS_4RoleE+0xb2>
	    printf("%s: GATT init failed: %02X\n", __func__, ret);
 8000952:	7ffb      	ldrb	r3, [r7, #31]
 8000954:	461a      	mov	r2, r3
 8000956:	4943      	ldr	r1, [pc, #268]	; (8000a64 <_ZN3ble4initENS_4RoleE+0x1b4>)
 8000958:	4844      	ldr	r0, [pc, #272]	; (8000a6c <_ZN3ble4initENS_4RoleE+0x1bc>)
 800095a:	f00b fead 	bl	800c6b8 <iprintf>
	    return false;
 800095e:	2300      	movs	r3, #0
 8000960:	e072      	b.n	8000a48 <_ZN3ble4initENS_4RoleE+0x198>



	/* Determine the GAP role based on BLE role and expansion board. */
	std::uint8_t gap_role;
	if (g_ble_role == Role::SERVER) {
 8000962:	4b3b      	ldr	r3, [pc, #236]	; (8000a50 <_ZN3ble4initENS_4RoleE+0x1a0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d109      	bne.n	800097e <_ZN3ble4initENS_4RoleE+0xce>
        if (g_expansion_board == ExpansionBoard::IDB04A1) {
 800096a:	4b3c      	ldr	r3, [pc, #240]	; (8000a5c <_ZN3ble4initENS_4RoleE+0x1ac>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d102      	bne.n	8000978 <_ZN3ble4initENS_4RoleE+0xc8>
            gap_role = GAP_PERIPHERAL_ROLE_IDB04A1;
 8000972:	2301      	movs	r3, #1
 8000974:	77bb      	strb	r3, [r7, #30]
 8000976:	e00b      	b.n	8000990 <_ZN3ble4initENS_4RoleE+0xe0>

        } else {
            gap_role = GAP_PERIPHERAL_ROLE_IDB05A1;
 8000978:	2301      	movs	r3, #1
 800097a:	77bb      	strb	r3, [r7, #30]
 800097c:	e008      	b.n	8000990 <_ZN3ble4initENS_4RoleE+0xe0>
        }
	} else { /* Client */
        if (g_expansion_board == ExpansionBoard::IDB04A1) {
 800097e:	4b37      	ldr	r3, [pc, #220]	; (8000a5c <_ZN3ble4initENS_4RoleE+0x1ac>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d102      	bne.n	800098c <_ZN3ble4initENS_4RoleE+0xdc>
            gap_role = GAP_CENTRAL_ROLE_IDB04A1;
 8000986:	2303      	movs	r3, #3
 8000988:	77bb      	strb	r3, [r7, #30]
 800098a:	e001      	b.n	8000990 <_ZN3ble4initENS_4RoleE+0xe0>
        } else {
            gap_role = GAP_CENTRAL_ROLE_IDB05A1;
 800098c:	2304      	movs	r3, #4
 800098e:	77bb      	strb	r3, [r7, #30]

	/* Perform GAP initialization for the proper expansion board. */
	std::uint16_t service_handle;
    std::uint16_t dev_name_char_handle;
    std::uint16_t appearance_char_handle;
    if (g_expansion_board == ExpansionBoard::IDB04A1) {
 8000990:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <_ZN3ble4initENS_4RoleE+0x1ac>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d10b      	bne.n	80009b0 <_ZN3ble4initENS_4RoleE+0x100>
        ret = aci_gap_init_IDB04A1(gap_role, &service_handle,
 8000998:	f107 030e 	add.w	r3, r7, #14
 800099c:	f107 0210 	add.w	r2, r7, #16
 80009a0:	f107 0112 	add.w	r1, r7, #18
 80009a4:	7fb8      	ldrb	r0, [r7, #30]
 80009a6:	f00a fb81 	bl	800b0ac <aci_gap_init_IDB04A1>
 80009aa:	4603      	mov	r3, r0
 80009ac:	77fb      	strb	r3, [r7, #31]
 80009ae:	e00f      	b.n	80009d0 <_ZN3ble4initENS_4RoleE+0x120>
                                   &dev_name_char_handle,
                                   &appearance_char_handle);
    } else {
        ret = aci_gap_init_IDB05A1(gap_role, 0, 0x07, &service_handle,
 80009b0:	f107 0212 	add.w	r2, r7, #18
 80009b4:	7fb8      	ldrb	r0, [r7, #30]
 80009b6:	f107 030e 	add.w	r3, r7, #14
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	4613      	mov	r3, r2
 80009c4:	2207      	movs	r2, #7
 80009c6:	2100      	movs	r1, #0
 80009c8:	f00a fb20 	bl	800b00c <aci_gap_init_IDB05A1>
 80009cc:	4603      	mov	r3, r0
 80009ce:	77fb      	strb	r3, [r7, #31]
                                   &dev_name_char_handle,
                                   &appearance_char_handle);
    }

    if (ret != BLE_STATUS_SUCCESS) {
 80009d0:	7ffb      	ldrb	r3, [r7, #31]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d007      	beq.n	80009e6 <_ZN3ble4initENS_4RoleE+0x136>
        printf("%s: GAP init failed: %02X\n", __func__, ret);
 80009d6:	7ffb      	ldrb	r3, [r7, #31]
 80009d8:	461a      	mov	r2, r3
 80009da:	4922      	ldr	r1, [pc, #136]	; (8000a64 <_ZN3ble4initENS_4RoleE+0x1b4>)
 80009dc:	4824      	ldr	r0, [pc, #144]	; (8000a70 <_ZN3ble4initENS_4RoleE+0x1c0>)
 80009de:	f00b fe6b 	bl	800c6b8 <iprintf>
        return false;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e030      	b.n	8000a48 <_ZN3ble4initENS_4RoleE+0x198>
    }

    ret = aci_gap_set_auth_requirement(
 80009e6:	2301      	movs	r3, #1
 80009e8:	9303      	str	r3, [sp, #12]
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <_ZN3ble4initENS_4RoleE+0x1c4>)
 80009ec:	9302      	str	r3, [sp, #8]
 80009ee:	2300      	movs	r3, #0
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	2310      	movs	r3, #16
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2307      	movs	r3, #7
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	2001      	movs	r0, #1
 80009fe:	f00a fc8e 	bl	800b31e <aci_gap_set_auth_requirement>
 8000a02:	4603      	mov	r3, r0
 8000a04:	77fb      	strb	r3, [r7, #31]
            16,                        /* Maximum encryption key size */
            USE_FIXED_PIN_FOR_PAIRING, /* Use fixed pin for pairing: yes */
            123456,                    /* Fixed pairing pin: TODO change */
            BONDING);                  /* Bonding: enabled */

    if (ret != BLE_STATUS_SUCCESS) {
 8000a06:	7ffb      	ldrb	r3, [r7, #31]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d007      	beq.n	8000a1c <_ZN3ble4initENS_4RoleE+0x16c>
        printf("%s: GAP set auth failed: %02X\n", __func__, ret);
 8000a0c:	7ffb      	ldrb	r3, [r7, #31]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4914      	ldr	r1, [pc, #80]	; (8000a64 <_ZN3ble4initENS_4RoleE+0x1b4>)
 8000a12:	4819      	ldr	r0, [pc, #100]	; (8000a78 <_ZN3ble4initENS_4RoleE+0x1c8>)
 8000a14:	f00b fe50 	bl	800c6b8 <iprintf>
        return false;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e015      	b.n	8000a48 <_ZN3ble4initENS_4RoleE+0x198>
    }

    /* Set output power level. */
    ret = aci_hal_set_tx_power_level(1, 4);
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f00a fd5e 	bl	800b4e0 <aci_hal_set_tx_power_level>
 8000a24:	4603      	mov	r3, r0
 8000a26:	77fb      	strb	r3, [r7, #31]
    if (ret != BLE_STATUS_SUCCESS) {
 8000a28:	7ffb      	ldrb	r3, [r7, #31]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d007      	beq.n	8000a3e <_ZN3ble4initENS_4RoleE+0x18e>
        printf("%s: Set TX power failed: %02X\n", __func__, ret);
 8000a2e:	7ffb      	ldrb	r3, [r7, #31]
 8000a30:	461a      	mov	r2, r3
 8000a32:	490c      	ldr	r1, [pc, #48]	; (8000a64 <_ZN3ble4initENS_4RoleE+0x1b4>)
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <_ZN3ble4initENS_4RoleE+0x1cc>)
 8000a36:	f00b fe3f 	bl	800c6b8 <iprintf>
        return false;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e004      	b.n	8000a48 <_ZN3ble4initENS_4RoleE+0x198>
    }

    printf("%s: Successfully setup BLE\n", __func__);
 8000a3e:	4909      	ldr	r1, [pc, #36]	; (8000a64 <_ZN3ble4initENS_4RoleE+0x1b4>)
 8000a40:	480f      	ldr	r0, [pc, #60]	; (8000a80 <_ZN3ble4initENS_4RoleE+0x1d0>)
 8000a42:	f00b fe39 	bl	800c6b8 <iprintf>
    return true;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200001b8 	.word	0x200001b8
 8000a54:	08000c4d 	.word	0x08000c4d
 8000a58:	0800cff8 	.word	0x0800cff8
 8000a5c:	200001bc 	.word	0x200001bc
 8000a60:	0800d0d0 	.word	0x0800d0d0
 8000a64:	0800d00c 	.word	0x0800d00c
 8000a68:	0800d014 	.word	0x0800d014
 8000a6c:	0800d03c 	.word	0x0800d03c
 8000a70:	0800d058 	.word	0x0800d058
 8000a74:	0001e240 	.word	0x0001e240
 8000a78:	0800d074 	.word	0x0800d074
 8000a7c:	0800d094 	.word	0x0800d094
 8000a80:	0800d0b4 	.word	0x0800d0b4

08000a84 <_ZN3ble11advertising5startEv>:

namespace advertising {

    bool start() {
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b097      	sub	sp, #92	; 0x5c
 8000a88:	af08      	add	r7, sp, #32
        hci_le_set_scan_resp_data(0, nullptr);
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f00a fe08 	bl	800b6a2 <hci_le_set_scan_resp_data>

        const auto name_adv_len = g_adv_name.size();
 8000a92:	484c      	ldr	r0, [pc, #304]	; (8000bc4 <_ZN3ble11advertising5startEv+0x140>)
 8000a94:	f000 f920 	bl	8000cd8 <_ZNK3etl7ivectorIcE4sizeEv>
 8000a98:	62f8      	str	r0, [r7, #44]	; 0x2c
        const auto uuid16_adv_len = g_adv_uuid16s.size();
 8000a9a:	484b      	ldr	r0, [pc, #300]	; (8000bc8 <_ZN3ble11advertising5startEv+0x144>)
 8000a9c:	f000 f92b 	bl	8000cf6 <_ZNK3etl7ivectorIhE4sizeEv>
 8000aa0:	62b8      	str	r0, [r7, #40]	; 0x28
        const auto uuid128_adv_len = g_adv_uuid128s.size();
 8000aa2:	484a      	ldr	r0, [pc, #296]	; (8000bcc <_ZN3ble11advertising5startEv+0x148>)
 8000aa4:	f000 f927 	bl	8000cf6 <_ZNK3etl7ivectorIhE4sizeEv>
 8000aa8:	6278      	str	r0, [r7, #36]	; 0x24

        if (name_adv_len + uuid16_adv_len + uuid128_adv_len > 31) {
 8000aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	441a      	add	r2, r3
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	4413      	add	r3, r2
 8000ab4:	2b1f      	cmp	r3, #31
 8000ab6:	d90b      	bls.n	8000ad0 <_ZN3ble11advertising5startEv+0x4c>
            printf("%s: too many bytes in advertising packet: %d",
                    __func__, name_adv_len + uuid16_adv_len + uuid128_adv_len);
 8000ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000abc:	441a      	add	r2, r3
            printf("%s: too many bytes in advertising packet: %d",
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	4413      	add	r3, r2
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4942      	ldr	r1, [pc, #264]	; (8000bd0 <_ZN3ble11advertising5startEv+0x14c>)
 8000ac6:	4843      	ldr	r0, [pc, #268]	; (8000bd4 <_ZN3ble11advertising5startEv+0x150>)
 8000ac8:	f00b fdf6 	bl	800c6b8 <iprintf>
            return false;
 8000acc:	2300      	movs	r3, #0
 8000ace:	e075      	b.n	8000bbc <_ZN3ble11advertising5startEv+0x138>
        }

        const char *name { nullptr };
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
        std::uint8_t name_len {};
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        std::uint8_t uuids[31] {};
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
 8000aee:	615a      	str	r2, [r3, #20]
 8000af0:	f8c3 2017 	str.w	r2, [r3, #23]
        std::uint8_t uuid_len {};
 8000af4:	2300      	movs	r3, #0
 8000af6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

        if (name_adv_len != 0) {
 8000afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d006      	beq.n	8000b0e <_ZN3ble11advertising5startEv+0x8a>
            name = g_adv_name.data();
 8000b00:	4830      	ldr	r0, [pc, #192]	; (8000bc4 <_ZN3ble11advertising5startEv+0x140>)
 8000b02:	f000 f907 	bl	8000d14 <_ZN3etl7ivectorIcE4dataEv>
 8000b06:	6378      	str	r0, [r7, #52]	; 0x34
            name_len = static_cast<std::uint8_t>(name_adv_len);
 8000b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (uuid16_adv_len != 0) {
 8000b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d013      	beq.n	8000b3c <_ZN3ble11advertising5startEv+0xb8>
            std::memcpy(&uuids[uuid_len], g_adv_uuid16s.data(), uuid16_adv_len);
 8000b14:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000b18:	1d3a      	adds	r2, r7, #4
 8000b1a:	18d4      	adds	r4, r2, r3
 8000b1c:	482a      	ldr	r0, [pc, #168]	; (8000bc8 <_ZN3ble11advertising5startEv+0x144>)
 8000b1e:	f000 f905 	bl	8000d2c <_ZN3etl7ivectorIhE4dataEv>
 8000b22:	4603      	mov	r3, r0
 8000b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4620      	mov	r0, r4
 8000b2a:	f00b f9fb 	bl	800bf24 <memcpy>
            uuid_len += static_cast<std::uint8_t>(uuid16_adv_len);
 8000b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000b36:	4413      	add	r3, r2
 8000b38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        }

        if (uuid128_adv_len != 0) {
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d013      	beq.n	8000b6a <_ZN3ble11advertising5startEv+0xe6>
            std::memcpy(&uuids[uuid_len], g_adv_uuid128s.data(), uuid128_adv_len);
 8000b42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000b46:	1d3a      	adds	r2, r7, #4
 8000b48:	18d4      	adds	r4, r2, r3
 8000b4a:	4820      	ldr	r0, [pc, #128]	; (8000bcc <_ZN3ble11advertising5startEv+0x148>)
 8000b4c:	f000 f8ee 	bl	8000d2c <_ZN3etl7ivectorIhE4dataEv>
 8000b50:	4603      	mov	r3, r0
 8000b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4620      	mov	r0, r4
 8000b58:	f00b f9e4 	bl	800bf24 <memcpy>
            uuid_len += static_cast<std::uint8_t>(uuid128_adv_len);
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000b64:	4413      	add	r3, r2
 8000b66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        }

        auto ret = aci_gap_set_discoverable(
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	9306      	str	r3, [sp, #24]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9305      	str	r3, [sp, #20]
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	9304      	str	r3, [sp, #16]
 8000b76:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000b7a:	9303      	str	r3, [sp, #12]
 8000b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	2300      	movs	r3, #0
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b94:	2000      	movs	r0, #0
 8000b96:	f00a fad3 	bl	800b140 <aci_gap_set_discoverable>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                 uuid_len,          /* Length of UUID array */
                 uuids,             /* UUID array */
                 0,                 /* Min slave connection interval */
                 0);                /* Max slave connection interval */

        if (ret != BLE_STATUS_SUCCESS) {
 8000ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d008      	beq.n	8000bba <_ZN3ble11advertising5startEv+0x136>
            printf("%s: Set discoverable failed: %02X\n", __func__, ret);
 8000ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bac:	461a      	mov	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <_ZN3ble11advertising5startEv+0x14c>)
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <_ZN3ble11advertising5startEv+0x154>)
 8000bb2:	f00b fd81 	bl	800c6b8 <iprintf>
            return false;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e000      	b.n	8000bbc <_ZN3ble11advertising5startEv+0x138>
        }

        return true;
 8000bba:	2301      	movs	r3, #1
    }
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	373c      	adds	r7, #60	; 0x3c
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	200001c0 	.word	0x200001c0
 8000bc8:	200001ec 	.word	0x200001ec
 8000bcc:	20000218 	.word	0x20000218
 8000bd0:	0800d0d8 	.word	0x0800d0d8
 8000bd4:	0800d0e0 	.word	0x0800d0e0
 8000bd8:	0800d110 	.word	0x0800d110

08000bdc <_ZN3ble11advertising8add_nameEPKc>:
        g_adv_name.clear();
        g_adv_uuid16s.clear();
        g_adv_uuid128s.clear();
    }

    bool add_name(const char *name) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
        auto len = std::strlen(name);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fb25 	bl	8000234 <strlen>
 8000bea:	60f8      	str	r0, [r7, #12]
        if (len > 30) {
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b1e      	cmp	r3, #30
 8000bf0:	d906      	bls.n	8000c00 <_ZN3ble11advertising8add_nameEPKc+0x24>
            printf("%s: Name too long (%d > 30)\n", __func__, len);
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	490f      	ldr	r1, [pc, #60]	; (8000c34 <_ZN3ble11advertising8add_nameEPKc+0x58>)
 8000bf6:	4810      	ldr	r0, [pc, #64]	; (8000c38 <_ZN3ble11advertising8add_nameEPKc+0x5c>)
 8000bf8:	f00b fd5e 	bl	800c6b8 <iprintf>
            return false;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e014      	b.n	8000c2a <_ZN3ble11advertising8add_nameEPKc+0x4e>
        }

        g_adv_name.push_back(AD_TYPE_COMPLETE_LOCAL_NAME);
 8000c00:	2309      	movs	r3, #9
 8000c02:	72fb      	strb	r3, [r7, #11]
 8000c04:	f107 030b 	add.w	r3, r7, #11
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <_ZN3ble11advertising8add_nameEPKc+0x60>)
 8000c0c:	f000 f8b0 	bl	8000d70 <_ZN3etl7ivectorIcE9push_backEOc>
        g_adv_name.insert(g_adv_name.begin() + 1, name, name + len);
 8000c10:	480a      	ldr	r0, [pc, #40]	; (8000c3c <_ZN3ble11advertising8add_nameEPKc+0x60>)
 8000c12:	f000 f8d3 	bl	8000dbc <_ZN3etl7ivectorIcE5beginEv>
 8000c16:	4603      	mov	r3, r0
 8000c18:	1c59      	adds	r1, r3, #1
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4413      	add	r3, r2
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <_ZN3ble11advertising8add_nameEPKc+0x60>)
 8000c24:	f000 f8e4 	bl	8000df0 <_ZN3etl7ivectorIcE6insertIPKcEEvPcT_S6_>

        return true;
 8000c28:	2301      	movs	r3, #1
    }
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	0800d164 	.word	0x0800d164
 8000c38:	0800d170 	.word	0x0800d170
 8000c3c:	200001c0 	.word	0x200001c0

08000c40 <_ZN3ble14process_eventsEv>:
		g_callbacks[g_callback_cnt] = callback;
		++g_callback_cnt;
	}
}

void process_events() {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
    hci_user_evt_proc();
 8000c44:	f00a ff84 	bl	800bb50 <hci_user_evt_proc>

      /* Reset the User Button flag */
      user_button_pressed = 0;
    }
#endif
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <_ZN3bleL18process_aci_packetEPv>:

////////////////////////////////////////////////////////////////////////////////
// Private Implementations
////////////////////////////////////////////////////////////////////////////////

static void process_aci_packet(void *data) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	for (std::uint32_t i = 0; i < g_callback_cnt; ++i) {
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <_ZN3bleL18process_aci_packetEPv+0x34>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d209      	bcs.n	8000c76 <_ZN3bleL18process_aci_packetEPv+0x2a>
		g_callbacks[i](data);
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <_ZN3bleL18process_aci_packetEPv+0x38>)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	4798      	blx	r3
	for (std::uint32_t i = 0; i < g_callback_cnt; ++i) {
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	3301      	adds	r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	e7f0      	b.n	8000c58 <_ZN3bleL18process_aci_packetEPv+0xc>
	}
}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200001b4 	.word	0x200001b4
 8000c84:	2000018c 	.word	0x2000018c

08000c88 <_ZN3etl6vectorIcLj31EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	330c      	adds	r3, #12
 8000c96:	221f      	movs	r2, #31
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f000 f94d 	bl	8000f38 <_ZN3etl7ivectorIcEC1EPcj>
    {
      this->initialise();
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f96c 	bl	8000f7e <_ZN3etl7ivectorIcE10initialiseEv>
    }
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_ZN3etl6vectorIhLj31EEC1Ev>:
    vector()
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	330c      	adds	r3, #12
 8000cbe:	221f      	movs	r2, #31
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f000 f970 	bl	8000fa6 <_ZN3etl7ivectorIhEC1EPhj>
      this->initialise();
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f98f 	bl	8000fec <_ZN3etl7ivectorIhE10initialiseEv>
    }
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZNK3etl7ivectorIcE4sizeEv>:
    size_type size() const
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
      return size_t(p_end - p_buffer);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	1ad3      	subs	r3, r2, r3
    }
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_ZNK3etl7ivectorIhE4sizeEv>:
    size_type size() const
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
      return size_t(p_end - p_buffer);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	1ad3      	subs	r3, r2, r3
    }
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_ZN3etl7ivectorIcE4dataEv>:
    pointer data()
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
      return p_buffer;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
    }
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_ZN3etl7ivectorIhE4dataEv>:
    pointer data()
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
      return p_buffer;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
    }
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_ZN3etl7ivectorIcE5clearEv>:
    void clear()
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
      initialise();
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 f916 	bl	8000f7e <_ZN3etl7ivectorIcE10initialiseEv>
    }
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_ZN3etl7ivectorIhE5clearEv>:
    void clear()
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
      initialise();
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 f942 	bl	8000fec <_ZN3etl7ivectorIhE10initialiseEv>
    }
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <_ZN3etl7ivectorIcE9push_backEOc>:
    void push_back(rvalue_reference value)
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
      ETL_ASSERT(size() != CAPACITY, ETL_ERROR(vector_full));
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffac 	bl	8000cd8 <_ZNK3etl7ivectorIcE4sizeEv>
 8000d80:	4602      	mov	r2, r0
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d106      	bne.n	8000d98 <_ZN3etl7ivectorIcE9push_backEOc+0x28>
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <_ZN3etl7ivectorIcE9push_backEOc+0x40>)
 8000d8c:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <_ZN3etl7ivectorIcE9push_backEOc+0x44>)
 8000d8e:	f240 11a9 	movw	r1, #425	; 0x1a9
 8000d92:	4809      	ldr	r0, [pc, #36]	; (8000db8 <_ZN3etl7ivectorIcE9push_backEOc+0x48>)
 8000d94:	f00b f86c 	bl	800be70 <__assert_func>
      create_back(etl::move(value));
 8000d98:	6838      	ldr	r0, [r7, #0]
 8000d9a:	f000 f93b 	bl	8001014 <_ZN3etl4moveIRcEEONS_16remove_referenceIT_E4typeEOS3_>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4619      	mov	r1, r3
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 f941 	bl	800102a <_ZN3etl7ivectorIcE11create_backEOc>
    }
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	0800d1c8 	.word	0x0800d1c8
 8000db4:	0800d1e0 	.word	0x0800d1e0
 8000db8:	0800d260 	.word	0x0800d260

08000dbc <_ZN3etl7ivectorIcE5beginEv>:
    iterator begin()
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
      return p_buffer;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
    }
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <_ZN3etl8distanceIPKcEENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
  }

#else

  template<typename TIterator>
  ETL_CONSTEXPR17 typename std::iterator_traits<TIterator>::difference_type distance(TIterator first, TIterator last)
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  {
    return std::distance(first, last);
 8000dde:	6839      	ldr	r1, [r7, #0]
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f93a 	bl	800105a <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8000de6:	4603      	mov	r3, r0
  }
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <_ZN3etl7ivectorIcE6insertIPKcEEvPcT_S6_>:
    void insert(iterator position, TIterator first, TIterator last)
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b08f      	sub	sp, #60	; 0x3c
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	603b      	str	r3, [r7, #0]
      size_t count = etl::distance(first, last);
 8000dfe:	6839      	ldr	r1, [r7, #0]
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ffe7 	bl	8000dd4 <_ZN3etl8distanceIPKcEENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8000e06:	4603      	mov	r3, r0
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
      ETL_ASSERT((size() + count) <= CAPACITY, ETL_ERROR(vector_full));
 8000e0a:	68f8      	ldr	r0, [r7, #12]
 8000e0c:	f7ff ff64 	bl	8000cd8 <_ZNK3etl7ivectorIcE4sizeEv>
 8000e10:	4602      	mov	r2, r0
 8000e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e14:	441a      	add	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d906      	bls.n	8000e2c <_ZN3etl7ivectorIcE6insertIPKcEEvPcT_S6_+0x3c>
 8000e1e:	4b43      	ldr	r3, [pc, #268]	; (8000f2c <_ZN3etl7ivectorIcE6insertIPKcEEvPcT_S6_+0x13c>)
 8000e20:	4a43      	ldr	r2, [pc, #268]	; (8000f30 <_ZN3etl7ivectorIcE6insertIPKcEEvPcT_S6_+0x140>)
 8000e22:	f240 3103 	movw	r1, #771	; 0x303
 8000e26:	4843      	ldr	r0, [pc, #268]	; (8000f34 <_ZN3etl7ivectorIcE6insertIPKcEEvPcT_S6_+0x144>)
 8000e28:	f00b f822 	bl	800be70 <__assert_func>
      size_t insert_n = count;
 8000e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
      size_t insert_begin = etl::distance(begin(), position);
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f7ff ffc3 	bl	8000dbc <_ZN3etl7ivectorIcE5beginEv>
 8000e36:	4603      	mov	r3, r0
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f921 	bl	8001082 <_ZN3etl8distanceIPcEENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8000e40:	4603      	mov	r3, r0
 8000e42:	623b      	str	r3, [r7, #32]
      size_t insert_end = insert_begin + insert_n;
 8000e44:	6a3a      	ldr	r2, [r7, #32]
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	4413      	add	r3, r2
 8000e4a:	61fb      	str	r3, [r7, #28]
      if (insert_end > size())
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f7ff ff43 	bl	8000cd8 <_ZNK3etl7ivectorIcE4sizeEv>
 8000e52:	4602      	mov	r2, r0
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	4293      	cmp	r3, r2
 8000e58:	bf8c      	ite	hi
 8000e5a:	2301      	movhi	r3, #1
 8000e5c:	2300      	movls	r3, #0
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00e      	beq.n	8000e82 <_ZN3etl7ivectorIcE6insertIPKcEEvPcT_S6_+0x92>
        copy_old_n = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
        construct_old_n = size() - insert_begin;
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f7ff ff35 	bl	8000cd8 <_ZNK3etl7ivectorIcE4sizeEv>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
        p_construct_old = p_buffer + insert_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e80:	e00d      	b.n	8000e9e <_ZN3etl7ivectorIcE6insertIPKcEEvPcT_S6_+0xae>
        copy_old_n = size() - insert_begin - insert_n;
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f7ff ff28 	bl	8000cd8 <_ZNK3etl7ivectorIcE4sizeEv>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
 8000e8c:	1ad2      	subs	r2, r2, r3
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
        construct_old_n = insert_n;
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
        p_construct_old = p_end;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      size_t copy_new_n = construct_old_n;
 8000e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea0:	61bb      	str	r3, [r7, #24]
      size_t construct_new_n = insert_n - copy_new_n;
 8000ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	617b      	str	r3, [r7, #20]
      etl::uninitialized_move(p_end - construct_old_n, p_end, p_construct_old);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	18d0      	adds	r0, r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f000 f8ef 	bl	800109e <_ZN3etl18uninitialized_moveIPcS1_EET0_T_S3_S2_>
      etl::move_backward(p_buffer + insert_begin, p_buffer + insert_begin + copy_old_n, p_buffer + insert_end + copy_old_n);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	6a3b      	ldr	r3, [r7, #32]
 8000ec6:	18d0      	adds	r0, r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	6a39      	ldr	r1, [r7, #32]
 8000ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed0:	440b      	add	r3, r1
 8000ed2:	18d4      	adds	r4, r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	69f9      	ldr	r1, [r7, #28]
 8000eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000edc:	440b      	add	r3, r1
 8000ede:	4413      	add	r3, r2
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4621      	mov	r1, r4
 8000ee4:	f000 f8eb 	bl	80010be <_ZN3etl13move_backwardIPcS1_EET0_T_S3_S2_>
      etl::uninitialized_copy(first + copy_new_n, first + copy_new_n + construct_new_n, p_end);
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	18d0      	adds	r0, r2, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	18d1      	adds	r1, r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	461a      	mov	r2, r3
 8000efe:	f000 f8ee 	bl	80010de <_ZN3etl18uninitialized_copyIPKcPcEET0_T_S5_S4_>
      etl::copy(first, first + copy_new_n, p_buffer + insert_begin);
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	18d1      	adds	r1, r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	4413      	add	r3, r2
 8000f10:	461a      	mov	r2, r3
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f8f3 	bl	80010fe <_ZN3etl4copyIPKcPcEET0_T_S5_S4_>
      p_end += count;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	441a      	add	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	609a      	str	r2, [r3, #8]
    }
 8000f24:	bf00      	nop
 8000f26:	373c      	adds	r7, #60	; 0x3c
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	0800d27c 	.word	0x0800d27c
 8000f30:	0800d29c 	.word	0x0800d29c
 8000f34:	0800d260 	.word	0x0800d260

08000f38 <_ZN3etl7ivectorIcEC1EPcj>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fc96 	bl	800087a <_ZN3etl11vector_baseC1Ej>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	609a      	str	r2, [r3, #8]
    }
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_ZN3etl7ivectorIcED1Ev>:
    ~ivector()
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    }
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fc92 	bl	8000898 <_ZN3etl11vector_baseD1Ev>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_ZN3etl7ivectorIcE10initialiseEv>:
    void initialise()
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4610      	mov	r0, r2
 8000f92:	f000 f8c4 	bl	800111e <_ZN3etl7destroyIPcEEvT_S2_>
      p_end = p_buffer;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
    }
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_ZN3etl7ivectorIhEC1EPhj>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fc5f 	bl	800087a <_ZN3etl11vector_baseC1Ej>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	609a      	str	r2, [r3, #8]
    }
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_ZN3etl7ivectorIhED1Ev>:
    ~ivector()
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
    }
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fc5b 	bl	8000898 <_ZN3etl11vector_baseD1Ev>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_ZN3etl7ivectorIhE10initialiseEv>:
    void initialise()
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4610      	mov	r0, r2
 8001000:	f000 f89a 	bl	8001138 <_ZN3etl7destroyIPhEEvT_S2_>
      p_end = p_buffer;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	609a      	str	r2, [r3, #8]
    }
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_ZN3etl4moveIRcEEONS_16remove_referenceIT_E4typeEOS3_>:
namespace etl
{
#if ETL_CPP11_SUPPORTED
  //******************************************************************************
  template <typename T>
  constexpr typename etl::remove_reference<T>::type&& move(T&& t) ETL_NOEXCEPT
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  {
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
 800101c:	687b      	ldr	r3, [r7, #4]
  }
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_ZN3etl7ivectorIcE11create_backEOc>:
    inline void create_back(rvalue_reference value)
 800102a:	b590      	push	{r4, r7, lr}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
      etl::create_copy_at(p_end, etl::move(value));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689c      	ldr	r4, [r3, #8]
 8001038:	6838      	ldr	r0, [r7, #0]
 800103a:	f7ff ffeb 	bl	8001014 <_ZN3etl4moveIRcEEONS_16remove_referenceIT_E4typeEOS3_>
 800103e:	4603      	mov	r3, r0
 8001040:	4619      	mov	r1, r3
 8001042:	4620      	mov	r0, r4
 8001044:	f000 f885 	bl	8001152 <_ZN3etl14create_copy_atIcEEvPT_OS1_>
      ++p_end;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	609a      	str	r2, [r3, #8]
    }
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}

0800105a <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800105a:	b5b0      	push	{r4, r5, r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001064:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f888 	bl	800117e <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800106e:	462a      	mov	r2, r5
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	4620      	mov	r0, r4
 8001074:	f000 f88d 	bl	8001192 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8001078:	4603      	mov	r3, r0
    }
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bdb0      	pop	{r4, r5, r7, pc}

08001082 <_ZN3etl8distanceIPcEENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  ETL_CONSTEXPR17 typename std::iterator_traits<TIterator>::difference_type distance(TIterator first, TIterator last)
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
    return std::distance(first, last);
 800108c:	6839      	ldr	r1, [r7, #0]
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 f88e 	bl	80011b0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8001094:	4603      	mov	r3, r0
  }
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <_ZN3etl18uninitialized_moveIPcS1_EET0_T_S3_S2_>:
  /// Moves a range of objects to uninitialised memory.
  /// https://en.cppreference.com/w/cpp/memory/uninitialized_move
  ///\ingroup memory
  //*****************************************************************************
  template <typename TInputIterator, typename TOutputIterator>
  TOutputIterator  uninitialized_move(TInputIterator i_begin, TInputIterator i_end, TOutputIterator o_begin)
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
  {
    return std::uninitialized_move(i_begin, i_end, o_begin);
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f000 f892 	bl	80011d8 <_ZSt18uninitialized_moveIPcS0_ET0_T_S2_S1_>
 80010b4:	4603      	mov	r3, r0
  }
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_ZN3etl13move_backwardIPcS1_EET0_T_S3_S2_>:
  }
#else
  //***************************************************************************
  // move_backward
  template <typename TIterator1, typename TIterator2>
  TIterator2 move_backward(TIterator1 sb, TIterator1 se, TIterator2 de)
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
  {
    return std::move_backward(sb, se, de);
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f000 f89a 	bl	8001208 <_ZSt13move_backwardIPcS0_ET0_T_S2_S1_>
 80010d4:	4603      	mov	r3, r0
  }
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_ZN3etl18uninitialized_copyIPKcPcEET0_T_S5_S4_>:
  TOutputIterator  uninitialized_copy(TInputIterator i_begin, TInputIterator i_end, TOutputIterator o_begin)
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
    return std::uninitialized_copy(i_begin, i_end, o_begin);
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 f8a2 	bl	8001238 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>
 80010f4:	4603      	mov	r3, r0
  }
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_ZN3etl4copyIPKcPcEET0_T_S5_S4_>:
  TIterator2 copy(TIterator1 sb, TIterator1 se, TIterator2 db)
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
    return std::copy(sb, se, db);
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f000 f8a4 	bl	800125c <_ZSt4copyIPKcPcET0_T_S4_S3_>
 8001114:	4603      	mov	r3, r0
  }
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_ZN3etl7destroyIPcEEvT_S2_>:
  /// Destroys a range of items.
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  void destroy(TIterator i_begin, TIterator i_end)
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
  {
    std::destroy(i_begin, i_end);
 8001128:	6839      	ldr	r1, [r7, #0]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f8ae 	bl	800128c <_ZSt7destroyIPcEvT_S1_>
  }
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_ZN3etl7destroyIPhEEvT_S2_>:
  void destroy(TIterator i_begin, TIterator i_end)
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
    std::destroy(i_begin, i_end);
 8001142:	6839      	ldr	r1, [r7, #0]
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f8ae 	bl	80012a6 <_ZSt7destroyIPhEvT_S1_>
  }
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_ZN3etl14create_copy_atIcEEvPT_OS1_>:
  //*****************************************************************************
  /// Copy construct an item at address p.
  ///\ingroup memory
  //*****************************************************************************
  template <typename T>
  void create_copy_at(T* p, T&& value)
 8001152:	b590      	push	{r4, r7, lr}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
  {
    ::new (p) T(etl::move(value));
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f7ff ff59 	bl	8001014 <_ZN3etl4moveIRcEEONS_16remove_referenceIT_E4typeEOS3_>
 8001162:	4603      	mov	r3, r0
 8001164:	781c      	ldrb	r4, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4619      	mov	r1, r3
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff fb79 	bl	8000862 <_ZnwjPv>
 8001170:	4603      	mov	r3, r0
 8001172:	4622      	mov	r2, r4
 8001174:	701a      	strb	r2, [r3, #0]
  }
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bd90      	pop	{r4, r7, pc}

0800117e <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001192:	b480      	push	{r7}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1ad3      	subs	r3, r2, r3
    }
 80011a4:	4618      	mov	r0, r3
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80011ba:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f87e 	bl	80012c0 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 80011c4:	462a      	mov	r2, r5
 80011c6:	6839      	ldr	r1, [r7, #0]
 80011c8:	4620      	mov	r0, r4
 80011ca:	f000 f883 	bl	80012d4 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80011ce:	4603      	mov	r3, r0
    }
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bdb0      	pop	{r4, r5, r7, pc}

080011d8 <_ZSt18uninitialized_moveIPcS0_ET0_T_S2_S1_>:
      return __uninitialized_default_n(__first, __count);
    }

  template <typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_move(_InputIterator __first, _InputIterator __last,
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
		       _ForwardIterator __result)
    {
      return std::uninitialized_copy
	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 f884 	bl	80012f2 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>
 80011ea:	4604      	mov	r4, r0
 80011ec:	68b8      	ldr	r0, [r7, #8]
 80011ee:	f000 f880 	bl	80012f2 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>
 80011f2:	4603      	mov	r3, r0
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4620      	mov	r0, r4
 80011fa:	f000 f889 	bl	8001310 <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 80011fe:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_ITERATOR(__last), __result);
    }
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	bd90      	pop	{r4, r7, pc}

08001208 <_ZSt13move_backwardIPcS0_ET0_T_S2_S1_>:
   *  Result may not be in the range (first,last].  Use move instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_ConvertibleConcept<
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 f88d 	bl	8001334 <_ZSt12__miter_baseIPcET_S1_>
 800121a:	4604      	mov	r4, r0
 800121c:	68b8      	ldr	r0, [r7, #8]
 800121e:	f000 f889 	bl	8001334 <_ZSt12__miter_baseIPcET_S1_>
 8001222:	4603      	mov	r3, r0
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	4619      	mov	r1, r3
 8001228:	4620      	mov	r0, r4
 800122a:	f000 f88e 	bl	800134a <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_>
 800122e:	4603      	mov	r3, r0
						std::__miter_base(__last),
						__result);
    }
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bd90      	pop	{r4, r7, pc}

08001238 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8001244:	2301      	movs	r3, #1
 8001246:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f000 f89f 	bl	8001390 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>
 8001252:	4603      	mov	r3, r0
    }
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_ZSt4copyIPKcPcET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f000 f8a1 	bl	80013b0 <_ZSt12__miter_baseIPKcET_S2_>
 800126e:	4604      	mov	r4, r0
 8001270:	68b8      	ldr	r0, [r7, #8]
 8001272:	f000 f89d 	bl	80013b0 <_ZSt12__miter_baseIPKcET_S2_>
 8001276:	4603      	mov	r3, r0
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	4619      	mov	r1, r3
 800127c:	4620      	mov	r0, r4
 800127e:	f000 f8a2 	bl	80013c6 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 8001282:	4603      	mov	r3, r0
    }
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bd90      	pop	{r4, r7, pc}

0800128c <_ZSt7destroyIPcEvT_S1_>:
      std::_Destroy(__location);
    }

  template <typename _ForwardIterator>
    inline void
    destroy(_ForwardIterator __first, _ForwardIterator __last)
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
    {
      std::_Destroy(__first, __last);
 8001296:	6839      	ldr	r1, [r7, #0]
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f8b7 	bl	800140c <_ZSt8_DestroyIPcEvT_S1_>
    }
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_ZSt7destroyIPhEvT_S1_>:
    destroy(_ForwardIterator __first, _ForwardIterator __last)
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	6039      	str	r1, [r7, #0]
      std::_Destroy(__first, __last);
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 f8b7 	bl	8001426 <_ZSt8_DestroyIPhEvT_S1_>
    }
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
    }
 80012e6:	4618      	mov	r0, r3
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>:
	      const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
    { return move_iterator<_Iterator>(__i); }
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4618      	mov	r0, r3
 8001302:	f000 f89d 	bl	8001440 <_ZNSt13move_iteratorIPcEC1ES0_>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800131c:	2301      	movs	r3, #1
 800131e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f000 f89a 	bl	800145e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>
 800132a:	4603      	mov	r3, r0
    }
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_ZSt12__miter_baseIPcET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800134a:	b5b0      	push	{r4, r5, r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 f891 	bl	800147e <_ZSt12__niter_baseIPcET_S1_>
 800135c:	4604      	mov	r4, r0
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f000 f88d 	bl	800147e <_ZSt12__niter_baseIPcET_S1_>
 8001364:	4605      	mov	r5, r0
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f888 	bl	800147e <_ZSt12__niter_baseIPcET_S1_>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	4629      	mov	r1, r5
 8001374:	4620      	mov	r0, r4
 8001376:	f000 f88d 	bl	8001494 <_ZSt22__copy_move_backward_aILb1EPcS0_ET1_T0_S2_S1_>
 800137a:	4602      	mov	r2, r0
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f899 	bl	80014b8 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8001386:	4603      	mov	r3, r0
    }
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bdb0      	pop	{r4, r5, r7, pc}

08001390 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	68b9      	ldr	r1, [r7, #8]
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f7ff ff5b 	bl	800125c <_ZSt4copyIPKcPcET0_T_S4_S3_>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_ZSt12__miter_baseIPKcET_S2_>:
    __miter_base(_Iterator __it)
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80013c6:	b5b0      	push	{r4, r5, r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 f87c 	bl	80014d0 <_ZSt12__niter_baseIPKcET_S2_>
 80013d8:	4604      	mov	r4, r0
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	f000 f878 	bl	80014d0 <_ZSt12__niter_baseIPKcET_S2_>
 80013e0:	4605      	mov	r5, r0
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 f84a 	bl	800147e <_ZSt12__niter_baseIPcET_S1_>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4629      	mov	r1, r5
 80013f0:	4620      	mov	r0, r4
 80013f2:	f000 f878 	bl	80014e6 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 80013f6:	4602      	mov	r2, r0
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 f85b 	bl	80014b8 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8001402:	4603      	mov	r3, r0
    }
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bdb0      	pop	{r4, r5, r7, pc}

0800140c <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001416:	6839      	ldr	r1, [r7, #0]
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f876 	bl	800150a <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001430:	6839      	ldr	r1, [r7, #0]
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f874 	bl	8001520 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <_ZNSt13move_iteratorIPcEC1ES0_>:
      move_iterator(iterator_type __i)
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 f861 	bl	8001536 <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 8001474:	4603      	mov	r3, r0
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_ZSt22__copy_move_backward_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 80014a0:	2301      	movs	r3, #1
 80014a2:	75fb      	strb	r3, [r7, #23]
				       _Category>::__copy_move_b(__first,
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 f85c 	bl	8001566 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>
 80014ae:	4603      	mov	r3, r0
    }
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
    { return __res; }
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80014f2:	2301      	movs	r3, #1
 80014f4:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 f851 	bl	80015a2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 8001500:	4603      	mov	r3, r0
    }
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8001536:	b590      	push	{r4, r7, lr}
 8001538:	b085      	sub	sp, #20
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 f847 	bl	80015d6 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8001548:	4604      	mov	r4, r0
 800154a:	68b8      	ldr	r0, [r7, #8]
 800154c:	f000 f843 	bl	80015d6 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8001550:	4603      	mov	r3, r0
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4619      	mov	r1, r3
 8001556:	4620      	mov	r0, r4
 8001558:	f000 f84e 	bl	80015f8 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>
 800155c:	4603      	mov	r3, r0
    }
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bd90      	pop	{r4, r7, pc}

08001566 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	425b      	negs	r3, r3
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	68f9      	ldr	r1, [r7, #12]
 800158c:	4618      	mov	r0, r3
 800158e:	f00a fcd6 	bl	800bf3e <memmove>
	  return __result - _Num;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	425b      	negs	r3, r3
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	4413      	add	r3, r2
	}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	461a      	mov	r2, r3
 80015c0:	68f9      	ldr	r1, [r7, #12]
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f00a fcbb 	bl	800bf3e <memmove>
	  return __result + _Num;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4413      	add	r3, r2
	}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f82c 	bl	800163e <_ZNKSt13move_iteratorIPcE4baseEv>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fea3 	bl	8001334 <_ZSt12__miter_baseIPcET_S1_>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff ff3a 	bl	800147e <_ZSt12__niter_baseIPcET_S1_>
 800160a:	4604      	mov	r4, r0
 800160c:	68b8      	ldr	r0, [r7, #8]
 800160e:	f7ff ff36 	bl	800147e <_ZSt12__niter_baseIPcET_S1_>
 8001612:	4605      	mov	r5, r0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff31 	bl	800147e <_ZSt12__niter_baseIPcET_S1_>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	4629      	mov	r1, r5
 8001622:	4620      	mov	r0, r4
 8001624:	f000 f817 	bl	8001656 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>
 8001628:	4602      	mov	r2, r0
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff42 	bl	80014b8 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8001634:	4603      	mov	r3, r0
    }
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bdb0      	pop	{r4, r5, r7, pc}

0800163e <_ZNKSt13move_iteratorIPcE4baseEv>:
      base() const
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8001662:	2301      	movs	r3, #1
 8001664:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f000 f805 	bl	800167a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 8001670:	4603      	mov	r3, r0
    }
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	461a      	mov	r2, r3
 8001698:	68f9      	ldr	r1, [r7, #12]
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f00a fc4f 	bl	800bf3e <memmove>
	  return __result + _Num;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4413      	add	r3, r2
	}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <_Z41__static_initialization_and_destruction_0ii>:

} /* namespace ble */
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d10d      	bne.n	80016dc <_Z41__static_initialization_and_destruction_0ii+0x2c>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d108      	bne.n	80016dc <_Z41__static_initialization_and_destruction_0ii+0x2c>
static etl::vector<char, 31> g_adv_name {};
 80016ca:	480f      	ldr	r0, [pc, #60]	; (8001708 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80016cc:	f7ff fadc 	bl	8000c88 <_ZN3etl6vectorIcLj31EEC1Ev>
static etl::vector<std::uint8_t, 31> g_adv_uuid16s {};
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80016d2:	f7ff faed 	bl	8000cb0 <_ZN3etl6vectorIhLj31EEC1Ev>
static etl::vector<std::uint8_t, 31> g_adv_uuid128s {};
 80016d6:	480e      	ldr	r0, [pc, #56]	; (8001710 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80016d8:	f7ff faea 	bl	8000cb0 <_ZN3etl6vectorIhLj31EEC1Ev>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10d      	bne.n	80016fe <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d108      	bne.n	80016fe <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80016ec:	4808      	ldr	r0, [pc, #32]	; (8001710 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80016ee:	f000 f811 	bl	8001714 <_ZN3etl6vectorIhLj31EED1Ev>
static etl::vector<std::uint8_t, 31> g_adv_uuid16s {};
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80016f4:	f000 f80e 	bl	8001714 <_ZN3etl6vectorIhLj31EED1Ev>
static etl::vector<char, 31> g_adv_name {};
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80016fa:	f000 f81c 	bl	8001736 <_ZN3etl6vectorIcLj31EED1Ev>
} /* namespace ble */
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200001c0 	.word	0x200001c0
 800170c:	200001ec 	.word	0x200001ec
 8001710:	20000218 	.word	0x20000218

08001714 <_ZN3etl6vectorIhLj31EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fb1b 	bl	8000d5a <_ZN3etl7ivectorIhE5clearEv>
    }
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fc53 	bl	8000fd2 <_ZN3etl7ivectorIhED1Ev>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_ZN3etl6vectorIcLj31EED1Ev>:
    ~vector()
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
      this->clear();
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff faff 	bl	8000d44 <_ZN3etl7ivectorIcE5clearEv>
    }
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fc0b 	bl	8000f64 <_ZN3etl7ivectorIcED1Ev>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_GLOBAL__sub_I__ZN3ble4initENS_4RoleE>:
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
 800175c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff ffa5 	bl	80016b0 <_Z41__static_initialization_and_destruction_0ii>
 8001766:	bd80      	pop	{r7, pc}

08001768 <_GLOBAL__sub_D__ZN3ble4initENS_4RoleE>:
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
 800176c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff ff9d 	bl	80016b0 <_Z41__static_initialization_and_destruction_0ii>
 8001776:	bd80      	pop	{r7, pc}

08001778 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001782:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001784:	4907      	ldr	r1, [pc, #28]	; (80017a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4313      	orrs	r3, r2
 800178a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800178e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4013      	ands	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001796:	68fb      	ldr	r3, [r7, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40021000 	.word	0x40021000

080017a8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <LL_APB1_GRP2_EnableClock+0x2c>)
 80017b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017b4:	4907      	ldr	r1, [pc, #28]	; (80017d4 <LL_APB1_GRP2_EnableClock+0x2c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <LL_APB1_GRP2_EnableClock+0x2c>)
 80017be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4013      	ands	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017c6:	68fb      	ldr	r3, [r7, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40021000 	.word	0x40021000

080017d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017dc:	f001 fdfe 	bl	80033dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e0:	f000 f824 	bl	800182c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80017e4:	f000 f888 	bl	80018f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e8:	f000 fd38 	bl	800225c <MX_GPIO_Init>
  MX_ADC1_Init();
 80017ec:	f000 f8b4 	bl	8001958 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80017f0:	f000 f928 	bl	8001a44 <MX_DFSDM1_Init>
  MX_FMC_Init();
 80017f4:	f000 fcc8 	bl	8002188 <MX_FMC_Init>
  MX_I2C1_Init();
 80017f8:	f000 f9c4 	bl	8001b84 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80017fc:	f000 fa02 	bl	8001c04 <MX_LPUART1_UART_Init>
  MX_OCTOSPI1_Init();
 8001800:	f000 fa9a 	bl	8001d38 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
 8001804:	f000 fad6 	bl	8001db4 <MX_SAI1_Init>
  MX_TIM4_Init();
 8001808:	f000 fb70 	bl	8001eec <MX_TIM4_Init>
  MX_TIM16_Init();
 800180c:	f000 fbbe 	bl	8001f8c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001810:	f000 fbe2 	bl	8001fd8 <MX_TIM17_Init>
  MX_UCPD1_Init();
 8001814:	f000 fc5a 	bl	80020cc <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8001818:	f000 fc8e 	bl	8002138 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 800181c:	f000 fa40 	bl	8001ca0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Jump into my main instead of that loop. */
  return main_cpp();
 8001820:	f000 fe78 	bl	8002514 <main_cpp>
 8001824:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001826:	4618      	mov	r0, r3
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b098      	sub	sp, #96	; 0x60
 8001830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001832:	f107 0318 	add.w	r3, r7, #24
 8001836:	2248      	movs	r2, #72	; 0x48
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f00a fb99 	bl	800bf72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800184e:	2000      	movs	r0, #0
 8001850:	f003 fe6e 	bl	8005530 <HAL_PWREx_ControlVoltageScaling>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800185a:	f000 fe55 	bl	8002508 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800185e:	f003 fe49 	bl	80054f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <SystemClock_Config+0xc8>)
 8001864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001868:	4a22      	ldr	r2, [pc, #136]	; (80018f4 <SystemClock_Config+0xc8>)
 800186a:	f023 0318 	bic.w	r3, r3, #24
 800186e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001872:	2316      	movs	r3, #22
 8001874:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001876:	2381      	movs	r3, #129	; 0x81
 8001878:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001880:	2340      	movs	r3, #64	; 0x40
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001884:	2301      	movs	r3, #1
 8001886:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001888:	2300      	movs	r3, #0
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800188c:	23b0      	movs	r3, #176	; 0xb0
 800188e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001890:	2302      	movs	r3, #2
 8001892:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001894:	2301      	movs	r3, #1
 8001896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001898:	230c      	movs	r3, #12
 800189a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800189c:	2337      	movs	r3, #55	; 0x37
 800189e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018a0:	2307      	movs	r3, #7
 80018a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018a4:	2302      	movs	r3, #2
 80018a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018a8:	2302      	movs	r3, #2
 80018aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ac:	f107 0318 	add.w	r3, r7, #24
 80018b0:	4618      	mov	r0, r3
 80018b2:	f003 fecd 	bl	8005650 <HAL_RCC_OscConfig>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018bc:	f000 fe24 	bl	8002508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c0:	230f      	movs	r3, #15
 80018c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c4:	2303      	movs	r3, #3
 80018c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2105      	movs	r1, #5
 80018d8:	4618      	mov	r0, r3
 80018da:	f004 fb1b 	bl	8005f14 <HAL_RCC_ClockConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80018e4:	f000 fe10 	bl	8002508 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80018e8:	f006 f900 	bl	8007aec <HAL_RCCEx_EnableMSIPLLMode>
}
 80018ec:	bf00      	nop
 80018ee:	3760      	adds	r7, #96	; 0x60
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000

080018f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b0a6      	sub	sp, #152	; 0x98
 80018fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2294      	movs	r2, #148	; 0x94
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f00a fb34 	bl	800bf72 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SAI1;
 800190a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800190e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001910:	2300      	movs	r3, #0
 8001912:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSI;
 800191c:	2302      	movs	r3, #2
 800191e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 8001920:	2304      	movs	r3, #4
 8001922:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 8001924:	2330      	movs	r3, #48	; 0x30
 8001926:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8001928:	2311      	movs	r3, #17
 800192a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800192c:	2302      	movs	r3, #2
 800192e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001930:	2302      	movs	r3, #2
 8001932:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <PeriphCommonClock_Config+0x5c>)
 8001936:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	4618      	mov	r0, r3
 800193c:	f004 fdc2 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8001946:	f000 fddf 	bl	8002508 <Error_Handler>
  }
}
 800194a:	bf00      	nop
 800194c:	3798      	adds	r7, #152	; 0x98
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	01010000 	.word	0x01010000

08001958 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800197a:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <MX_ADC1_Init+0xe0>)
 800197c:	4a2f      	ldr	r2, [pc, #188]	; (8001a3c <MX_ADC1_Init+0xe4>)
 800197e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <MX_ADC1_Init+0xe0>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <MX_ADC1_Init+0xe0>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <MX_ADC1_Init+0xe0>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001992:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <MX_ADC1_Init+0xe0>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <MX_ADC1_Init+0xe0>)
 800199a:	2204      	movs	r2, #4
 800199c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019aa:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019da:	4817      	ldr	r0, [pc, #92]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019dc:	f001 ff38 	bl	8003850 <HAL_ADC_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80019e6:	f000 fd8f 	bl	8002508 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4810      	ldr	r0, [pc, #64]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019f6:	f002 fc89 	bl	800430c <HAL_ADCEx_MultiModeConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001a00:	f000 fd82 	bl	8002508 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_ADC1_Init+0xe8>)
 8001a06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a08:	2306      	movs	r3, #6
 8001a0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a10:	237f      	movs	r3, #127	; 0x7f
 8001a12:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a14:	2304      	movs	r3, #4
 8001a16:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_ADC1_Init+0xe0>)
 8001a22:	f002 f865 	bl	8003af0 <HAL_ADC_ConfigChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001a2c:	f000 fd6c 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000850 	.word	0x20000850
 8001a3c:	42028000 	.word	0x42028000
 8001a40:	25b00200 	.word	0x25b00200

08001a44 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8001a48:	4b48      	ldr	r3, [pc, #288]	; (8001b6c <MX_DFSDM1_Init+0x128>)
 8001a4a:	4a49      	ldr	r2, [pc, #292]	; (8001b70 <MX_DFSDM1_Init+0x12c>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8001a4e:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <MX_DFSDM1_Init+0x128>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001a54:	4b45      	ldr	r3, [pc, #276]	; (8001b6c <MX_DFSDM1_Init+0x128>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8001a5a:	4b44      	ldr	r3, [pc, #272]	; (8001b6c <MX_DFSDM1_Init+0x128>)
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8001a60:	4b42      	ldr	r3, [pc, #264]	; (8001b6c <MX_DFSDM1_Init+0x128>)
 8001a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a66:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001a68:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <MX_DFSDM1_Init+0x128>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <MX_DFSDM1_Init+0x128>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001a74:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <MX_DFSDM1_Init+0x128>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001a7a:	4b3c      	ldr	r3, [pc, #240]	; (8001b6c <MX_DFSDM1_Init+0x128>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001a80:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <MX_DFSDM1_Init+0x128>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8001a86:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <MX_DFSDM1_Init+0x128>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8001a8c:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <MX_DFSDM1_Init+0x128>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8001a92:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <MX_DFSDM1_Init+0x128>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8001a98:	4834      	ldr	r0, [pc, #208]	; (8001b6c <MX_DFSDM1_Init+0x128>)
 8001a9a:	f002 fde7 	bl	800466c <HAL_DFSDM_ChannelInit>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001aa4:	f000 fd30 	bl	8002508 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001aa8:	4b32      	ldr	r3, [pc, #200]	; (8001b74 <MX_DFSDM1_Init+0x130>)
 8001aaa:	4a33      	ldr	r2, [pc, #204]	; (8001b78 <MX_DFSDM1_Init+0x134>)
 8001aac:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001aae:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <MX_DFSDM1_Init+0x130>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <MX_DFSDM1_Init+0x130>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <MX_DFSDM1_Init+0x130>)
 8001abc:	2202      	movs	r2, #2
 8001abe:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001ac0:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <MX_DFSDM1_Init+0x130>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <MX_DFSDM1_Init+0x130>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <MX_DFSDM1_Init+0x130>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <MX_DFSDM1_Init+0x130>)
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001ad8:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <MX_DFSDM1_Init+0x130>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <MX_DFSDM1_Init+0x130>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001ae4:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <MX_DFSDM1_Init+0x130>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <MX_DFSDM1_Init+0x130>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001af0:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <MX_DFSDM1_Init+0x130>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001af6:	481f      	ldr	r0, [pc, #124]	; (8001b74 <MX_DFSDM1_Init+0x130>)
 8001af8:	f002 fdb8 	bl	800466c <HAL_DFSDM_ChannelInit>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8001b02:	f000 fd01 	bl	8002508 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <MX_DFSDM1_Init+0x138>)
 8001b08:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <MX_DFSDM1_Init+0x13c>)
 8001b0a:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <MX_DFSDM1_Init+0x138>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <MX_DFSDM1_Init+0x138>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MX_DFSDM1_Init+0x138>)
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <MX_DFSDM1_Init+0x138>)
 8001b20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b24:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_DFSDM1_Init+0x138>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <MX_DFSDM1_Init+0x138>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_DFSDM1_Init+0x138>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <MX_DFSDM1_Init+0x138>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_DFSDM1_Init+0x138>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <MX_DFSDM1_Init+0x138>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0x00;
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_DFSDM1_Init+0x138>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <MX_DFSDM1_Init+0x138>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001b56:	4809      	ldr	r0, [pc, #36]	; (8001b7c <MX_DFSDM1_Init+0x138>)
 8001b58:	f002 fd88 	bl	800466c <HAL_DFSDM_ChannelInit>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_DFSDM1_Init+0x122>
  {
    Error_Handler();
 8001b62:	f000 fcd1 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000948 	.word	0x20000948
 8001b70:	40016000 	.word	0x40016000
 8001b74:	2000055c 	.word	0x2000055c
 8001b78:	40016020 	.word	0x40016020
 8001b7c:	20000d58 	.word	0x20000d58
 8001b80:	40016040 	.word	0x40016040

08001b84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <MX_I2C1_Init+0x74>)
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	; (8001bfc <MX_I2C1_Init+0x78>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40505681;
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <MX_I2C1_Init+0x74>)
 8001b90:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <MX_I2C1_Init+0x7c>)
 8001b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <MX_I2C1_Init+0x74>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <MX_I2C1_Init+0x74>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_I2C1_Init+0x74>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <MX_I2C1_Init+0x74>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <MX_I2C1_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_I2C1_Init+0x74>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <MX_I2C1_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bbe:	480e      	ldr	r0, [pc, #56]	; (8001bf8 <MX_I2C1_Init+0x74>)
 8001bc0:	f003 f962 	bl	8004e88 <HAL_I2C_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bca:	f000 fc9d 	bl	8002508 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4809      	ldr	r0, [pc, #36]	; (8001bf8 <MX_I2C1_Init+0x74>)
 8001bd2:	f003 f9e8 	bl	8004fa6 <HAL_I2CEx_ConfigAnalogFilter>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001bdc:	f000 fc94 	bl	8002508 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001be0:	2100      	movs	r1, #0
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_I2C1_Init+0x74>)
 8001be4:	f003 fa2a 	bl	800503c <HAL_I2CEx_ConfigDigitalFilter>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bee:	f000 fc8b 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200005e0 	.word	0x200005e0
 8001bfc:	40005400 	.word	0x40005400
 8001c00:	40505681 	.word	0x40505681

08001c04 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c0a:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <MX_LPUART1_UART_Init+0x94>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c10:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <MX_LPUART1_UART_Init+0x98>)
 8001c12:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c28:	220c      	movs	r2, #12
 8001c2a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001c4a:	4812      	ldr	r0, [pc, #72]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c4c:	f008 f8d4 	bl	8009df8 <HAL_UART_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8001c56:	f000 fc57 	bl	8002508 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	480d      	ldr	r0, [pc, #52]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c5e:	f008 fd95 	bl	800a78c <HAL_UARTEx_SetTxFifoThreshold>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8001c68:	f000 fc4e 	bl	8002508 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4809      	ldr	r0, [pc, #36]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c70:	f008 fdca 	bl	800a808 <HAL_UARTEx_SetRxFifoThreshold>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001c7a:	f000 fc45 	bl	8002508 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_LPUART1_UART_Init+0x90>)
 8001c80:	f008 fd4b 	bl	800a71a <HAL_UARTEx_DisableFifoMode>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001c8a:	f000 fc3d 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000728 	.word	0x20000728
 8001c98:	40008000 	.word	0x40008000
 8001c9c:	00033324 	.word	0x00033324

08001ca0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001ca6:	4a23      	ldr	r2, [pc, #140]	; (8001d34 <MX_USART1_UART_Init+0x94>)
 8001ca8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ce8:	4811      	ldr	r0, [pc, #68]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001cea:	f008 f885 	bl	8009df8 <HAL_UART_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cf4:	f000 fc08 	bl	8002508 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	480d      	ldr	r0, [pc, #52]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001cfc:	f008 fd46 	bl	800a78c <HAL_UARTEx_SetTxFifoThreshold>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d06:	f000 fbff 	bl	8002508 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4808      	ldr	r0, [pc, #32]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001d0e:	f008 fd7b 	bl	800a808 <HAL_UARTEx_SetRxFifoThreshold>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d18:	f000 fbf6 	bl	8002508 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d1c:	4804      	ldr	r0, [pc, #16]	; (8001d30 <MX_USART1_UART_Init+0x90>)
 8001d1e:	f008 fcfc 	bl	800a71a <HAL_UARTEx_DisableFifoMode>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d28:	f000 fbee 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200008b8 	.word	0x200008b8
 8001d34:	40013800 	.word	0x40013800

08001d38 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d3e:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <MX_OCTOSPI1_Init+0x78>)
 8001d40:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d56:	2220      	movs	r2, #32
 8001d58:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_OCTOSPI1_Init+0x74>)
 8001d98:	f003 f99c 	bl	80050d4 <HAL_OSPI_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_OCTOSPI1_Init+0x6e>
  {
    Error_Handler();
 8001da2:	f000 fbb1 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000062c 	.word	0x2000062c
 8001db0:	44021000 	.word	0x44021000

08001db4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001db8:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001dba:	4a48      	ldr	r2, [pc, #288]	; (8001edc <MX_SAI1_Init+0x128>)
 8001dbc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001dbe:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001dc4:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001dca:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001dcc:	2240      	movs	r2, #64	; 0x40
 8001dce:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001dd0:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001dd6:	4b40      	ldr	r3, [pc, #256]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001ddc:	4b3e      	ldr	r3, [pc, #248]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001de2:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001de8:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001dee:	4b3a      	ldr	r3, [pc, #232]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001df4:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001df6:	4a3a      	ldr	r2, [pc, #232]	; (8001ee0 <MX_SAI1_Init+0x12c>)
 8001df8:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001dfa:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e00:	4b35      	ldr	r3, [pc, #212]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e06:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e0c:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8001e12:	4b31      	ldr	r3, [pc, #196]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8001e1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001e28:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e34:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e3a:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001e40:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001e46:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e4c:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001e52:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001e58:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001e5e:	481e      	ldr	r0, [pc, #120]	; (8001ed8 <MX_SAI1_Init+0x124>)
 8001e60:	f006 f97a 	bl	8008158 <HAL_SAI_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8001e6a:	f000 fb4d 	bl	8002508 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <MX_SAI1_Init+0x130>)
 8001e70:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <MX_SAI1_Init+0x134>)
 8001e72:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <MX_SAI1_Init+0x130>)
 8001e76:	2204      	movs	r2, #4
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <MX_SAI1_Init+0x130>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <MX_SAI1_Init+0x130>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <MX_SAI1_Init+0x130>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <MX_SAI1_Init+0x130>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <MX_SAI1_Init+0x130>)
 8001e94:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001e98:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <MX_SAI1_Init+0x130>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <MX_SAI1_Init+0x130>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_SAI1_Init+0x130>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <MX_SAI1_Init+0x130>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <MX_SAI1_Init+0x130>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <MX_SAI1_Init+0x130>)
 8001ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001ec2:	4808      	ldr	r0, [pc, #32]	; (8001ee4 <MX_SAI1_Init+0x130>)
 8001ec4:	f006 f948 	bl	8008158 <HAL_SAI_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_SAI1_Init+0x11e>
  {
    Error_Handler();
 8001ece:	f000 fb1b 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000980 	.word	0x20000980
 8001edc:	40015404 	.word	0x40015404
 8001ee0:	0002ee00 	.word	0x0002ee00
 8001ee4:	200007b8 	.word	0x200007b8
 8001ee8:	40015424 	.word	0x40015424

08001eec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f02:	463b      	mov	r3, r7
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <MX_TIM4_Init+0x98>)
 8001f0e:	4a1e      	ldr	r2, [pc, #120]	; (8001f88 <MX_TIM4_Init+0x9c>)
 8001f10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <MX_TIM4_Init+0x98>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <MX_TIM4_Init+0x98>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <MX_TIM4_Init+0x98>)
 8001f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <MX_TIM4_Init+0x98>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <MX_TIM4_Init+0x98>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f32:	4814      	ldr	r0, [pc, #80]	; (8001f84 <MX_TIM4_Init+0x98>)
 8001f34:	f006 ffac 	bl	8008e90 <HAL_TIM_Base_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001f3e:	f000 fae3 	bl	8002508 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001f42:	2307      	movs	r3, #7
 8001f44:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001f46:	2310      	movs	r3, #16
 8001f48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480c      	ldr	r0, [pc, #48]	; (8001f84 <MX_TIM4_Init+0x98>)
 8001f52:	f007 f965 	bl	8009220 <HAL_TIM_SlaveConfigSynchro>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001f5c:	f000 fad4 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f60:	2300      	movs	r3, #0
 8001f62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f68:	463b      	mov	r3, r7
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_TIM4_Init+0x98>)
 8001f6e:	f007 fe1b 	bl	8009ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001f78:	f000 fac6 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f7c:	bf00      	nop
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000594 	.word	0x20000594
 8001f88:	40000800 	.word	0x40000800

08001f8c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <MX_TIM16_Init+0x44>)
 8001f92:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <MX_TIM16_Init+0x48>)
 8001f94:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <MX_TIM16_Init+0x44>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <MX_TIM16_Init+0x44>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <MX_TIM16_Init+0x44>)
 8001fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <MX_TIM16_Init+0x44>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <MX_TIM16_Init+0x44>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_TIM16_Init+0x44>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001fbc:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <MX_TIM16_Init+0x44>)
 8001fbe:	f006 ff67 	bl	8008e90 <HAL_TIM_Base_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001fc8:	f000 fa9e 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000d0c 	.word	0x20000d0c
 8001fd4:	40014400 	.word	0x40014400

08001fd8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b094      	sub	sp, #80	; 0x50
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	611a      	str	r2, [r3, #16]
 8001fee:	615a      	str	r2, [r3, #20]
 8001ff0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	2234      	movs	r2, #52	; 0x34
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f009 ffba 	bl	800bf72 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001ffe:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <MX_TIM17_Init+0xec>)
 8002000:	4a31      	ldr	r2, [pc, #196]	; (80020c8 <MX_TIM17_Init+0xf0>)
 8002002:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002004:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <MX_TIM17_Init+0xec>)
 8002006:	2200      	movs	r2, #0
 8002008:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200a:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <MX_TIM17_Init+0xec>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002010:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <MX_TIM17_Init+0xec>)
 8002012:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002016:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <MX_TIM17_Init+0xec>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800201e:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <MX_TIM17_Init+0xec>)
 8002020:	2200      	movs	r2, #0
 8002022:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <MX_TIM17_Init+0xec>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800202a:	4826      	ldr	r0, [pc, #152]	; (80020c4 <MX_TIM17_Init+0xec>)
 800202c:	f006 ff30 	bl	8008e90 <HAL_TIM_Base_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002036:	f000 fa67 	bl	8002508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800203a:	4822      	ldr	r0, [pc, #136]	; (80020c4 <MX_TIM17_Init+0xec>)
 800203c:	f006 ff7f 	bl	8008f3e <HAL_TIM_PWM_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002046:	f000 fa5f 	bl	8002508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800204a:	2360      	movs	r3, #96	; 0x60
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002052:	2300      	movs	r3, #0
 8002054:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002056:	2300      	movs	r3, #0
 8002058:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002066:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800206a:	2200      	movs	r2, #0
 800206c:	4619      	mov	r1, r3
 800206e:	4815      	ldr	r0, [pc, #84]	; (80020c4 <MX_TIM17_Init+0xec>)
 8002070:	f006 ffc6 	bl	8009000 <HAL_TIM_PWM_ConfigChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800207a:	f000 fa45 	bl	8002508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002096:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80020a0:	463b      	mov	r3, r7
 80020a2:	4619      	mov	r1, r3
 80020a4:	4807      	ldr	r0, [pc, #28]	; (80020c4 <MX_TIM17_Init+0xec>)
 80020a6:	f007 fe07 	bl	8009cb8 <HAL_TIMEx_ConfigBreakDeadTime>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80020b0:	f000 fa2a 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80020b4:	4803      	ldr	r0, [pc, #12]	; (80020c4 <MX_TIM17_Init+0xec>)
 80020b6:	f000 fd57 	bl	8002b68 <HAL_TIM_MspPostInit>

}
 80020ba:	bf00      	nop
 80020bc:	3750      	adds	r7, #80	; 0x50
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000684 	.word	0x20000684
 80020c8:	40014800 	.word	0x40014800

080020cc <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d2:	463b      	mov	r3, r7
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
 80020e0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80020e2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80020e6:	f7ff fb5f 	bl	80017a8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f7ff fb44 	bl	8001778 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80020f0:	2002      	movs	r0, #2
 80020f2:	f7ff fb41 	bl	8001778 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80020f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80020fc:	2303      	movs	r3, #3
 80020fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	463b      	mov	r3, r7
 8002106:	4619      	mov	r1, r3
 8002108:	4809      	ldr	r0, [pc, #36]	; (8002130 <MX_UCPD1_Init+0x64>)
 800210a:	f008 fed6 	bl	800aeba <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800210e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002112:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002114:	2303      	movs	r3, #3
 8002116:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	463b      	mov	r3, r7
 800211e:	4619      	mov	r1, r3
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <MX_UCPD1_Init+0x68>)
 8002122:	f008 feca 	bl	800aeba <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	42020000 	.word	0x42020000
 8002134:	42020400 	.word	0x42020400

08002138 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800213c:	4b10      	ldr	r3, [pc, #64]	; (8002180 <MX_USB_PCD_Init+0x48>)
 800213e:	4a11      	ldr	r2, [pc, #68]	; (8002184 <MX_USB_PCD_Init+0x4c>)
 8002140:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <MX_USB_PCD_Init+0x48>)
 8002144:	2208      	movs	r2, #8
 8002146:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <MX_USB_PCD_Init+0x48>)
 800214a:	2202      	movs	r2, #2
 800214c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <MX_USB_PCD_Init+0x48>)
 8002150:	2202      	movs	r2, #2
 8002152:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <MX_USB_PCD_Init+0x48>)
 8002156:	2200      	movs	r2, #0
 8002158:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_USB_PCD_Init+0x48>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <MX_USB_PCD_Init+0x48>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_USB_PCD_Init+0x48>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <MX_USB_PCD_Init+0x48>)
 800216e:	f003 f8b1 	bl	80052d4 <HAL_PCD_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002178:	f000 f9c6 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000a18 	.word	0x20000a18
 8002184:	4000d400 	.word	0x4000d400

08002188 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800218e:	463b      	mov	r3, r7
 8002190:	2220      	movs	r2, #32
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f009 feec 	bl	800bf72 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800219a:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <MX_FMC_Init+0xc8>)
 800219c:	4a2d      	ldr	r2, [pc, #180]	; (8002254 <MX_FMC_Init+0xcc>)
 800219e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80021a0:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <MX_FMC_Init+0xc8>)
 80021a2:	4a2d      	ldr	r2, [pc, #180]	; (8002258 <MX_FMC_Init+0xd0>)
 80021a4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80021a6:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <MX_FMC_Init+0xc8>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <MX_FMC_Init+0xc8>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80021b2:	4b27      	ldr	r3, [pc, #156]	; (8002250 <MX_FMC_Init+0xc8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <MX_FMC_Init+0xc8>)
 80021ba:	2210      	movs	r2, #16
 80021bc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <MX_FMC_Init+0xc8>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <MX_FMC_Init+0xc8>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80021ca:	4b21      	ldr	r3, [pc, #132]	; (8002250 <MX_FMC_Init+0xc8>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <MX_FMC_Init+0xc8>)
 80021d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80021d8:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <MX_FMC_Init+0xc8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80021de:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <MX_FMC_Init+0xc8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <MX_FMC_Init+0xc8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <MX_FMC_Init+0xc8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <MX_FMC_Init+0xc8>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <MX_FMC_Init+0xc8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <MX_FMC_Init+0xc8>)
 80021fe:	2200      	movs	r2, #0
 8002200:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <MX_FMC_Init+0xc8>)
 8002204:	2200      	movs	r2, #0
 8002206:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <MX_FMC_Init+0xc8>)
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002210:	230f      	movs	r3, #15
 8002212:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8002214:	230f      	movs	r3, #15
 8002216:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8002218:	23ff      	movs	r3, #255	; 0xff
 800221a:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002220:	230f      	movs	r3, #15
 8002222:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002224:	2310      	movs	r3, #16
 8002226:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002228:	2311      	movs	r3, #17
 800222a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002230:	463b      	mov	r3, r7
 8002232:	2200      	movs	r2, #0
 8002234:	4619      	mov	r1, r3
 8002236:	4806      	ldr	r0, [pc, #24]	; (8002250 <MX_FMC_Init+0xc8>)
 8002238:	f006 fde2 	bl	8008e00 <HAL_SRAM_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_FMC_Init+0xbe>
  {
    Error_Handler( );
 8002242:	f000 f961 	bl	8002508 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002246:	bf00      	nop
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200006d0 	.word	0x200006d0
 8002254:	44020000 	.word	0x44020000
 8002258:	44020104 	.word	0x44020104

0800225c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08e      	sub	sp, #56	; 0x38
 8002260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
 8002270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002272:	4b9c      	ldr	r3, [pc, #624]	; (80024e4 <MX_GPIO_Init+0x288>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	4a9b      	ldr	r2, [pc, #620]	; (80024e4 <MX_GPIO_Init+0x288>)
 8002278:	f043 0310 	orr.w	r3, r3, #16
 800227c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227e:	4b99      	ldr	r3, [pc, #612]	; (80024e4 <MX_GPIO_Init+0x288>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	623b      	str	r3, [r7, #32]
 8002288:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	4b96      	ldr	r3, [pc, #600]	; (80024e4 <MX_GPIO_Init+0x288>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	4a95      	ldr	r2, [pc, #596]	; (80024e4 <MX_GPIO_Init+0x288>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002296:	4b93      	ldr	r3, [pc, #588]	; (80024e4 <MX_GPIO_Init+0x288>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022a2:	4b90      	ldr	r3, [pc, #576]	; (80024e4 <MX_GPIO_Init+0x288>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	4a8f      	ldr	r2, [pc, #572]	; (80024e4 <MX_GPIO_Init+0x288>)
 80022a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ae:	4b8d      	ldr	r3, [pc, #564]	; (80024e4 <MX_GPIO_Init+0x288>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 80022ba:	f003 f995 	bl	80055e8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022be:	4b89      	ldr	r3, [pc, #548]	; (80024e4 <MX_GPIO_Init+0x288>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	4a88      	ldr	r2, [pc, #544]	; (80024e4 <MX_GPIO_Init+0x288>)
 80022c4:	f043 0308 	orr.w	r3, r3, #8
 80022c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ca:	4b86      	ldr	r3, [pc, #536]	; (80024e4 <MX_GPIO_Init+0x288>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	4b83      	ldr	r3, [pc, #524]	; (80024e4 <MX_GPIO_Init+0x288>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	4a82      	ldr	r2, [pc, #520]	; (80024e4 <MX_GPIO_Init+0x288>)
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e2:	4b80      	ldr	r3, [pc, #512]	; (80024e4 <MX_GPIO_Init+0x288>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ee:	4b7d      	ldr	r3, [pc, #500]	; (80024e4 <MX_GPIO_Init+0x288>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	4a7c      	ldr	r2, [pc, #496]	; (80024e4 <MX_GPIO_Init+0x288>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fa:	4b7a      	ldr	r3, [pc, #488]	; (80024e4 <MX_GPIO_Init+0x288>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002306:	4b77      	ldr	r3, [pc, #476]	; (80024e4 <MX_GPIO_Init+0x288>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	4a76      	ldr	r2, [pc, #472]	; (80024e4 <MX_GPIO_Init+0x288>)
 800230c:	f043 0320 	orr.w	r3, r3, #32
 8002310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002312:	4b74      	ldr	r3, [pc, #464]	; (80024e4 <MX_GPIO_Init+0x288>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800231e:	4b71      	ldr	r3, [pc, #452]	; (80024e4 <MX_GPIO_Init+0x288>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002322:	4a70      	ldr	r2, [pc, #448]	; (80024e4 <MX_GPIO_Init+0x288>)
 8002324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800232a:	4b6e      	ldr	r3, [pc, #440]	; (80024e4 <MX_GPIO_Init+0x288>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin|BLE_RSTN_Pin|BLE_CS_Pin|AUDIO_RESETN_Pin, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	f241 1122 	movw	r1, #4386	; 0x1122
 800233c:	486a      	ldr	r0, [pc, #424]	; (80024e8 <MX_GPIO_Init+0x28c>)
 800233e:	f002 fd8b 	bl	8004e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	2108      	movs	r1, #8
 8002346:	4869      	ldr	r0, [pc, #420]	; (80024ec <MX_GPIO_Init+0x290>)
 8002348:	f002 fd86 	bl	8004e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 800234c:	2200      	movs	r2, #0
 800234e:	2120      	movs	r1, #32
 8002350:	4867      	ldr	r0, [pc, #412]	; (80024f0 <MX_GPIO_Init+0x294>)
 8002352:	f002 fd81 	bl	8004e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_TE_GPIO_Port, LCD_TE_Pin, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800235c:	4865      	ldr	r0, [pc, #404]	; (80024f4 <MX_GPIO_Init+0x298>)
 800235e:	f002 fd7b 	bl	8004e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_PWR_ON_GPIO_Port, LCD_PWR_ON_Pin, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	2101      	movs	r1, #1
 8002366:	4864      	ldr	r0, [pc, #400]	; (80024f8 <MX_GPIO_Init+0x29c>)
 8002368:	f002 fd76 	bl	8004e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 800236c:	2200      	movs	r2, #0
 800236e:	f44f 4158 	mov.w	r1, #55296	; 0xd800
 8002372:	4862      	ldr	r0, [pc, #392]	; (80024fc <MX_GPIO_Init+0x2a0>)
 8002374:	f002 fd70 	bl	8004e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin BLE_RSTN_Pin BLE_CS_Pin AUDIO_RESETN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|BLE_RSTN_Pin|BLE_CS_Pin|AUDIO_RESETN_Pin;
 8002378:	f241 1322 	movw	r3, #4386	; 0x1122
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237e:	2301      	movs	r3, #1
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800238a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238e:	4619      	mov	r1, r3
 8002390:	4855      	ldr	r0, [pc, #340]	; (80024e8 <MX_GPIO_Init+0x28c>)
 8002392:	f002 fadb 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002396:	2304      	movs	r3, #4
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023a6:	230c      	movs	r3, #12
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ae:	4619      	mov	r1, r3
 80023b0:	484e      	ldr	r0, [pc, #312]	; (80024ec <MX_GPIO_Init+0x290>)
 80023b2:	f002 facb 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 PC10 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9
 80023b6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023c8:	230c      	movs	r3, #12
 80023ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d0:	4619      	mov	r1, r3
 80023d2:	484b      	ldr	r0, [pc, #300]	; (8002500 <MX_GPIO_Init+0x2a4>)
 80023d4:	f002 faba 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80023d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023de:	2300      	movs	r3, #0
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80023e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ea:	4619      	mov	r1, r3
 80023ec:	4844      	ldr	r0, [pc, #272]	; (8002500 <MX_GPIO_Init+0x2a4>)
 80023ee:	f002 faad 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80023f2:	2308      	movs	r3, #8
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	2301      	movs	r3, #1
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8002402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002406:	4619      	mov	r1, r3
 8002408:	4838      	ldr	r0, [pc, #224]	; (80024ec <MX_GPIO_Init+0x290>)
 800240a:	f002 fa9f 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_ACC_INT_Pin SDIO_DETECT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin|SDIO_DETECT_Pin|CTP_INT_Pin;
 800240e:	230e      	movs	r3, #14
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002412:	4b3c      	ldr	r3, [pc, #240]	; (8002504 <MX_GPIO_Init+0x2a8>)
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800241a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241e:	4619      	mov	r1, r3
 8002420:	4836      	ldr	r0, [pc, #216]	; (80024fc <MX_GPIO_Init+0x2a0>)
 8002422:	f002 fa93 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8002426:	2320      	movs	r3, #32
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242a:	2301      	movs	r3, #1
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243a:	4619      	mov	r1, r3
 800243c:	482c      	ldr	r0, [pc, #176]	; (80024f0 <MX_GPIO_Init+0x294>)
 800243e:	f002 fa85 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8002442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002448:	2301      	movs	r3, #1
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002450:	2300      	movs	r3, #0
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8002454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002458:	4619      	mov	r1, r3
 800245a:	4826      	ldr	r0, [pc, #152]	; (80024f4 <MX_GPIO_Init+0x298>)
 800245c:	f002 fa76 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = LCD_PWR_ON_Pin;
 8002460:	2301      	movs	r3, #1
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002464:	2301      	movs	r3, #1
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 8002470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002474:	4619      	mov	r1, r3
 8002476:	4820      	ldr	r0, [pc, #128]	; (80024f8 <MX_GPIO_Init+0x29c>)
 8002478:	f002 fa68 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 800247c:	2340      	movs	r3, #64	; 0x40
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002480:	4b20      	ldr	r3, [pc, #128]	; (8002504 <MX_GPIO_Init+0x2a8>)
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8002488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248c:	4619      	mov	r1, r3
 800248e:	4816      	ldr	r0, [pc, #88]	; (80024e8 <MX_GPIO_Init+0x28c>)
 8002490:	f002 fa5c 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin STMOD_SEL_12_Pin STMOD_SEL_34_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin;
 8002494:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249a:	2301      	movs	r3, #1
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024aa:	4619      	mov	r1, r3
 80024ac:	4813      	ldr	r0, [pc, #76]	; (80024fc <MX_GPIO_Init+0x2a0>)
 80024ae:	f002 fa4d 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80024b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80024c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c4:	4619      	mov	r1, r3
 80024c6:	480a      	ldr	r0, [pc, #40]	; (80024f0 <MX_GPIO_Init+0x294>)
 80024c8:	f002 fa40 	bl	800494c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI6_IRQn, 0, 0);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	2011      	movs	r0, #17
 80024d2:	f002 f896 	bl	8004602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 80024d6:	2011      	movs	r0, #17
 80024d8:	f002 f8ad 	bl	8004636 <HAL_NVIC_EnableIRQ>

}
 80024dc:	bf00      	nop
 80024de:	3738      	adds	r7, #56	; 0x38
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	42021800 	.word	0x42021800
 80024ec:	42020c00 	.word	0x42020c00
 80024f0:	42020400 	.word	0x42020400
 80024f4:	42020000 	.word	0x42020000
 80024f8:	42021c00 	.word	0x42021c00
 80024fc:	42021400 	.word	0x42021400
 8002500:	42020800 	.word	0x42020800
 8002504:	10110000 	.word	0x10110000

08002508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800250c:	b672      	cpsid	i
}
 800250e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002510:	e7fe      	b.n	8002510 <Error_Handler+0x8>
	...

08002514 <main_cpp>:
#include <cstdio>

using ble::Role;

extern "C" int main_cpp()
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
    /* Hardware init done by CubeMX generated main
     * only need to init app stuff here. */

    // Initialize the BLE as a server
    if (!ble::init(Role::SERVER)) {
 8002518:	2000      	movs	r0, #0
 800251a:	f7fe f9c9 	bl	80008b0 <_ZN3ble4initENS_4RoleE>
 800251e:	4603      	mov	r3, r0
 8002520:	f083 0301 	eor.w	r3, r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <main_cpp+0x20>
        printf("BLE init failed, spinning\n");
 800252a:	4811      	ldr	r0, [pc, #68]	; (8002570 <main_cpp+0x5c>)
 800252c:	f00a f94a 	bl	800c7c4 <puts>
        Error_Handler();
 8002530:	f7ff ffea 	bl	8002508 <Error_Handler>
    }

    // advertise a name to see if we're even started yet
    if (!ble::advertising::add_name("Hello!")) {
 8002534:	480f      	ldr	r0, [pc, #60]	; (8002574 <main_cpp+0x60>)
 8002536:	f7fe fb51 	bl	8000bdc <_ZN3ble11advertising8add_nameEPKc>
 800253a:	4603      	mov	r3, r0
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <main_cpp+0x3c>
        printf("Couldn't add BLE name, spinning\n");
 8002546:	480c      	ldr	r0, [pc, #48]	; (8002578 <main_cpp+0x64>)
 8002548:	f00a f93c 	bl	800c7c4 <puts>
        Error_Handler();
 800254c:	f7ff ffdc 	bl	8002508 <Error_Handler>
    }

    if (!ble::advertising::start()) {
 8002550:	f7fe fa98 	bl	8000a84 <_ZN3ble11advertising5startEv>
 8002554:	4603      	mov	r3, r0
 8002556:	f083 0301 	eor.w	r3, r3, #1
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <main_cpp+0x56>
        printf("Couldn't start BLE advertising, spinning\n");
 8002560:	4806      	ldr	r0, [pc, #24]	; (800257c <main_cpp+0x68>)
 8002562:	f00a f92f 	bl	800c7c4 <puts>
        Error_Handler();
 8002566:	f7ff ffcf 	bl	8002508 <Error_Handler>
    }

    while (1) {
        ble::process_events();
 800256a:	f7fe fb69 	bl	8000c40 <_ZN3ble14process_eventsEv>
 800256e:	e7fc      	b.n	800256a <main_cpp+0x56>
 8002570:	0800d460 	.word	0x0800d460
 8002574:	0800d47c 	.word	0x0800d47c
 8002578:	0800d484 	.word	0x0800d484
 800257c:	0800d4a4 	.word	0x0800d4a4

08002580 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_MspInit+0x44>)
 8002588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258a:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <HAL_MspInit+0x44>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6613      	str	r3, [r2, #96]	; 0x60
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <HAL_MspInit+0x44>)
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_MspInit+0x44>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	4a08      	ldr	r2, [pc, #32]	; (80025c4 <HAL_MspInit+0x44>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a8:	6593      	str	r3, [r2, #88]	; 0x58
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_MspInit+0x44>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000

080025c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	; 0x28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a15      	ldr	r2, [pc, #84]	; (800263c <HAL_ADC_MspInit+0x74>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d123      	bne.n	8002632 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_ADC_MspInit+0x78>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ee:	4a14      	ldr	r2, [pc, #80]	; (8002640 <HAL_ADC_MspInit+0x78>)
 80025f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_ADC_MspInit+0x78>)
 80025f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_ADC_MspInit+0x78>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002606:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <HAL_ADC_MspInit+0x78>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_ADC_MspInit+0x78>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800261a:	2310      	movs	r3, #16
 800261c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800261e:	2303      	movs	r3, #3
 8002620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	4619      	mov	r1, r3
 800262c:	4805      	ldr	r0, [pc, #20]	; (8002644 <HAL_ADC_MspInit+0x7c>)
 800262e:	f002 f98d 	bl	800494c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002632:	bf00      	nop
 8002634:	3728      	adds	r7, #40	; 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	42028000 	.word	0x42028000
 8002640:	40021000 	.word	0x40021000
 8002644:	42020000 	.word	0x42020000

08002648 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b0b0      	sub	sp, #192	; 0xc0
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002660:	f107 0318 	add.w	r3, r7, #24
 8002664:	2294      	movs	r2, #148	; 0x94
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f009 fc82 	bl	800bf72 <memset>
  if(DFSDM1_Init == 0)
 800266e:	4b37      	ldr	r3, [pc, #220]	; (800274c <HAL_DFSDM_ChannelMspInit+0x104>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d165      	bne.n	8002742 <HAL_DFSDM_ChannelMspInit+0xfa>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800267a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK2;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002682:	f107 0318 	add.w	r3, r7, #24
 8002686:	4618      	mov	r0, r3
 8002688:	f003 ff1c 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002692:	f7ff ff39 	bl	8002508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002696:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <HAL_DFSDM_ChannelMspInit+0x108>)
 8002698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269a:	4a2d      	ldr	r2, [pc, #180]	; (8002750 <HAL_DFSDM_ChannelMspInit+0x108>)
 800269c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a0:	6613      	str	r3, [r2, #96]	; 0x60
 80026a2:	4b2b      	ldr	r3, [pc, #172]	; (8002750 <HAL_DFSDM_ChannelMspInit+0x108>)
 80026a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026ae:	4b28      	ldr	r3, [pc, #160]	; (8002750 <HAL_DFSDM_ChannelMspInit+0x108>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	4a27      	ldr	r2, [pc, #156]	; (8002750 <HAL_DFSDM_ChannelMspInit+0x108>)
 80026b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ba:	4b25      	ldr	r3, [pc, #148]	; (8002750 <HAL_DFSDM_ChannelMspInit+0x108>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80026c6:	f002 ff8f 	bl	80055e8 <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <HAL_DFSDM_ChannelMspInit+0x108>)
 80026cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ce:	4a20      	ldr	r2, [pc, #128]	; (8002750 <HAL_DFSDM_ChannelMspInit+0x108>)
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <HAL_DFSDM_ChannelMspInit+0x108>)
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PG7     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80026fa:	2306      	movs	r3, #6
 80026fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002700:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002704:	4619      	mov	r1, r3
 8002706:	4813      	ldr	r0, [pc, #76]	; (8002754 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8002708:	f002 f920 	bl	800494c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800270c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002726:	2306      	movs	r3, #6
 8002728:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002730:	4619      	mov	r1, r3
 8002732:	4809      	ldr	r0, [pc, #36]	; (8002758 <HAL_DFSDM_ChannelMspInit+0x110>)
 8002734:	f002 f90a 	bl	800494c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <HAL_DFSDM_ChannelMspInit+0x104>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	4a03      	ldr	r2, [pc, #12]	; (800274c <HAL_DFSDM_ChannelMspInit+0x104>)
 8002740:	6013      	str	r3, [r2, #0]
  }

}
 8002742:	bf00      	nop
 8002744:	37c0      	adds	r7, #192	; 0xc0
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000244 	.word	0x20000244
 8002750:	40021000 	.word	0x40021000
 8002754:	42021800 	.word	0x42021800
 8002758:	42020400 	.word	0x42020400

0800275c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b0ae      	sub	sp, #184	; 0xb8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	2294      	movs	r2, #148	; 0x94
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f009 fbf8 	bl	800bf72 <memset>
  if(hi2c->Instance==I2C1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a21      	ldr	r2, [pc, #132]	; (800280c <HAL_I2C_MspInit+0xb0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d13a      	bne.n	8002802 <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800278c:	2340      	movs	r3, #64	; 0x40
 800278e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002790:	2300      	movs	r3, #0
 8002792:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	4618      	mov	r0, r3
 800279a:	f003 fe93 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80027a4:	f7ff feb0 	bl	8002508 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_I2C_MspInit+0xb4>)
 80027aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ac:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_I2C_MspInit+0xb4>)
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027b4:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_I2C_MspInit+0xb4>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027c0:	23c0      	movs	r3, #192	; 0xc0
 80027c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c6:	2312      	movs	r3, #18
 80027c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027d8:	2304      	movs	r3, #4
 80027da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027e2:	4619      	mov	r1, r3
 80027e4:	480b      	ldr	r0, [pc, #44]	; (8002814 <HAL_I2C_MspInit+0xb8>)
 80027e6:	f002 f8b1 	bl	800494c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_I2C_MspInit+0xb4>)
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ee:	4a08      	ldr	r2, [pc, #32]	; (8002810 <HAL_I2C_MspInit+0xb4>)
 80027f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027f4:	6593      	str	r3, [r2, #88]	; 0x58
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_I2C_MspInit+0xb4>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002802:	bf00      	nop
 8002804:	37b8      	adds	r7, #184	; 0xb8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40005400 	.word	0x40005400
 8002810:	40021000 	.word	0x40021000
 8002814:	42020400 	.word	0x42020400

08002818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b0b0      	sub	sp, #192	; 0xc0
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002830:	f107 0318 	add.w	r3, r7, #24
 8002834:	2294      	movs	r2, #148	; 0x94
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f009 fb9a 	bl	800bf72 <memset>
  if(huart->Instance==LPUART1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a42      	ldr	r2, [pc, #264]	; (800294c <HAL_UART_MspInit+0x134>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d13c      	bne.n	80028c2 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002848:	2320      	movs	r3, #32
 800284a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800284c:	2300      	movs	r3, #0
 800284e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002850:	f107 0318 	add.w	r3, r7, #24
 8002854:	4618      	mov	r0, r3
 8002856:	f003 fe35 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002860:	f7ff fe52 	bl	8002508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002864:	4b3a      	ldr	r3, [pc, #232]	; (8002950 <HAL_UART_MspInit+0x138>)
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	4a39      	ldr	r2, [pc, #228]	; (8002950 <HAL_UART_MspInit+0x138>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002870:	4b37      	ldr	r3, [pc, #220]	; (8002950 <HAL_UART_MspInit+0x138>)
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287c:	4b34      	ldr	r3, [pc, #208]	; (8002950 <HAL_UART_MspInit+0x138>)
 800287e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002880:	4a33      	ldr	r2, [pc, #204]	; (8002950 <HAL_UART_MspInit+0x138>)
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002888:	4b31      	ldr	r3, [pc, #196]	; (8002950 <HAL_UART_MspInit+0x138>)
 800288a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002894:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80028ae:	2308      	movs	r3, #8
 80028b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80028b8:	4619      	mov	r1, r3
 80028ba:	4826      	ldr	r0, [pc, #152]	; (8002954 <HAL_UART_MspInit+0x13c>)
 80028bc:	f002 f846 	bl	800494c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028c0:	e040      	b.n	8002944 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a24      	ldr	r2, [pc, #144]	; (8002958 <HAL_UART_MspInit+0x140>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d13b      	bne.n	8002944 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028cc:	2301      	movs	r3, #1
 80028ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028d0:	2300      	movs	r3, #0
 80028d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d4:	f107 0318 	add.w	r3, r7, #24
 80028d8:	4618      	mov	r0, r3
 80028da:	f003 fdf3 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80028e4:	f7ff fe10 	bl	8002508 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_UART_MspInit+0x138>)
 80028ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ec:	4a18      	ldr	r2, [pc, #96]	; (8002950 <HAL_UART_MspInit+0x138>)
 80028ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f2:	6613      	str	r3, [r2, #96]	; 0x60
 80028f4:	4b16      	ldr	r3, [pc, #88]	; (8002950 <HAL_UART_MspInit+0x138>)
 80028f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_UART_MspInit+0x138>)
 8002902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002904:	4a12      	ldr	r2, [pc, #72]	; (8002950 <HAL_UART_MspInit+0x138>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_UART_MspInit+0x138>)
 800290e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8002918:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800291c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002932:	2307      	movs	r3, #7
 8002934:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002938:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800293c:	4619      	mov	r1, r3
 800293e:	4807      	ldr	r0, [pc, #28]	; (800295c <HAL_UART_MspInit+0x144>)
 8002940:	f002 f804 	bl	800494c <HAL_GPIO_Init>
}
 8002944:	bf00      	nop
 8002946:	37c0      	adds	r7, #192	; 0xc0
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40008000 	.word	0x40008000
 8002950:	40021000 	.word	0x40021000
 8002954:	42020400 	.word	0x42020400
 8002958:	40013800 	.word	0x40013800
 800295c:	42020000 	.word	0x42020000

08002960 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b0b0      	sub	sp, #192	; 0xc0
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002978:	f107 0318 	add.w	r3, r7, #24
 800297c:	2294      	movs	r2, #148	; 0x94
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f009 faf6 	bl	800bf72 <memset>
  if(hospi->Instance==OCTOSPI1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a4e      	ldr	r2, [pc, #312]	; (8002ac4 <HAL_OSPI_MspInit+0x164>)
 800298c:	4293      	cmp	r3, r2
 800298e:	f040 8094 	bne.w	8002aba <HAL_OSPI_MspInit+0x15a>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002992:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002996:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002998:	2300      	movs	r3, #0
 800299a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800299e:	f107 0318 	add.w	r3, r7, #24
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 fd8e 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 80029ae:	f7ff fdab 	bl	8002508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80029b2:	4b45      	ldr	r3, [pc, #276]	; (8002ac8 <HAL_OSPI_MspInit+0x168>)
 80029b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b6:	4a44      	ldr	r2, [pc, #272]	; (8002ac8 <HAL_OSPI_MspInit+0x168>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6513      	str	r3, [r2, #80]	; 0x50
 80029be:	4b42      	ldr	r3, [pc, #264]	; (8002ac8 <HAL_OSPI_MspInit+0x168>)
 80029c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ca:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <HAL_OSPI_MspInit+0x168>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	4a3e      	ldr	r2, [pc, #248]	; (8002ac8 <HAL_OSPI_MspInit+0x168>)
 80029d0:	f043 0304 	orr.w	r3, r3, #4
 80029d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d6:	4b3c      	ldr	r3, [pc, #240]	; (8002ac8 <HAL_OSPI_MspInit+0x168>)
 80029d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <HAL_OSPI_MspInit+0x168>)
 80029e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e6:	4a38      	ldr	r2, [pc, #224]	; (8002ac8 <HAL_OSPI_MspInit+0x168>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ee:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <HAL_OSPI_MspInit+0x168>)
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	4b33      	ldr	r3, [pc, #204]	; (8002ac8 <HAL_OSPI_MspInit+0x168>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	4a32      	ldr	r2, [pc, #200]	; (8002ac8 <HAL_OSPI_MspInit+0x168>)
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a06:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <HAL_OSPI_MspInit+0x168>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> OCTOSPI1_CLK
    PA6     ------> OCTOSPI1_IO3
    PB1     ------> OCTOSPI1_IO0
    PB0     ------> OCTOSPI1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1;
 8002a12:	230e      	movs	r3, #14
 8002a14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a24:	2303      	movs	r3, #3
 8002a26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002a2a:	230a      	movs	r3, #10
 8002a2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a34:	4619      	mov	r1, r3
 8002a36:	4825      	ldr	r0, [pc, #148]	; (8002acc <HAL_OSPI_MspInit+0x16c>)
 8002a38:	f001 ff88 	bl	800494c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8002a54:	2303      	movs	r3, #3
 8002a56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a5a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a5e:	4619      	mov	r1, r3
 8002a60:	481a      	ldr	r0, [pc, #104]	; (8002acc <HAL_OSPI_MspInit+0x16c>)
 8002a62:	f001 ff73 	bl	800494c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_6;
 8002a66:	23cc      	movs	r3, #204	; 0xcc
 8002a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002a7e:	230a      	movs	r3, #10
 8002a80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4811      	ldr	r0, [pc, #68]	; (8002ad0 <HAL_OSPI_MspInit+0x170>)
 8002a8c:	f001 ff5e 	bl	800494c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8002a90:	2307      	movs	r3, #7
 8002a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002aa8:	230a      	movs	r3, #10
 8002aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4807      	ldr	r0, [pc, #28]	; (8002ad4 <HAL_OSPI_MspInit+0x174>)
 8002ab6:	f001 ff49 	bl	800494c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002aba:	bf00      	nop
 8002abc:	37c0      	adds	r7, #192	; 0xc0
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	44021000 	.word	0x44021000
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	42020800 	.word	0x42020800
 8002ad0:	42020000 	.word	0x42020000
 8002ad4:	42020400 	.word	0x42020400

08002ad8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <HAL_TIM_Base_MspInit+0x80>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10c      	bne.n	8002b04 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002aea:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <HAL_TIM_Base_MspInit+0x84>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <HAL_TIM_Base_MspInit+0x84>)
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	6593      	str	r3, [r2, #88]	; 0x58
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_TIM_Base_MspInit+0x84>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002b02:	e022      	b.n	8002b4a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a15      	ldr	r2, [pc, #84]	; (8002b60 <HAL_TIM_Base_MspInit+0x88>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d10c      	bne.n	8002b28 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_TIM_Base_MspInit+0x84>)
 8002b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b12:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <HAL_TIM_Base_MspInit+0x84>)
 8002b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b18:	6613      	str	r3, [r2, #96]	; 0x60
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_TIM_Base_MspInit+0x84>)
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
}
 8002b26:	e010      	b.n	8002b4a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <HAL_TIM_Base_MspInit+0x8c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d10b      	bne.n	8002b4a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <HAL_TIM_Base_MspInit+0x84>)
 8002b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_TIM_Base_MspInit+0x84>)
 8002b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b3e:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <HAL_TIM_Base_MspInit+0x84>)
 8002b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40000800 	.word	0x40000800
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40014400 	.word	0x40014400
 8002b64:	40014800 	.word	0x40014800

08002b68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 030c 	add.w	r3, r7, #12
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a11      	ldr	r2, [pc, #68]	; (8002bcc <HAL_TIM_MspPostInit+0x64>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d11b      	bne.n	8002bc2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_TIM_MspPostInit+0x68>)
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	4a10      	ldr	r2, [pc, #64]	; (8002bd0 <HAL_TIM_MspPostInit+0x68>)
 8002b90:	f043 0310 	orr.w	r3, r3, #16
 8002b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <HAL_TIM_MspPostInit+0x68>)
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PE1     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LCD_BL_PWM_Pin;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8002bb2:	230e      	movs	r3, #14
 8002bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8002bb6:	f107 030c 	add.w	r3, r7, #12
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4805      	ldr	r0, [pc, #20]	; (8002bd4 <HAL_TIM_MspPostInit+0x6c>)
 8002bbe:	f001 fec5 	bl	800494c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002bc2:	bf00      	nop
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40014800 	.word	0x40014800
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	42021000 	.word	0x42021000

08002bd8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b0ae      	sub	sp, #184	; 0xb8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bf0:	f107 0310 	add.w	r3, r7, #16
 8002bf4:	2294      	movs	r2, #148	; 0x94
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f009 f9ba 	bl	800bf72 <memset>
  if(hpcd->Instance==USB)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a23      	ldr	r2, [pc, #140]	; (8002c90 <HAL_PCD_MspInit+0xb8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d13e      	bne.n	8002c86 <HAL_PCD_MspInit+0xae>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c0c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8002c0e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8002c12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c16:	f107 0310 	add.w	r3, r7, #16
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 fc52 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8002c26:	f7ff fc6f 	bl	8002508 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <HAL_PCD_MspInit+0xbc>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2e:	4a19      	ldr	r2, [pc, #100]	; (8002c94 <HAL_PCD_MspInit+0xbc>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c36:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <HAL_PCD_MspInit+0xbc>)
 8002c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002c42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002c5c:	230a      	movs	r3, #10
 8002c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c66:	4619      	mov	r1, r3
 8002c68:	480b      	ldr	r0, [pc, #44]	; (8002c98 <HAL_PCD_MspInit+0xc0>)
 8002c6a:	f001 fe6f 	bl	800494c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_PCD_MspInit+0xbc>)
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <HAL_PCD_MspInit+0xbc>)
 8002c74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c78:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_PCD_MspInit+0xbc>)
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002c86:	bf00      	nop
 8002c88:	37b8      	adds	r7, #184	; 0xb8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	4000d400 	.word	0x4000d400
 8002c94:	40021000 	.word	0x40021000
 8002c98:	42020000 	.word	0x42020000

08002c9c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002ca2:	1d3b      	adds	r3, r7, #4
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002cb0:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <HAL_FMC_MspInit+0xa4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d13e      	bne.n	8002d36 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 8002cb8:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <HAL_FMC_MspInit+0xa4>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002cbe:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <HAL_FMC_MspInit+0xa8>)
 8002cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc2:	4a20      	ldr	r2, [pc, #128]	; (8002d44 <HAL_FMC_MspInit+0xa8>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6513      	str	r3, [r2, #80]	; 0x50
 8002cca:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <HAL_FMC_MspInit+0xa8>)
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
  PE13   ------> FMC_DA10
  PE13   ------> FMC_D10
  PD10   ------> FMC_DA15
  PD10   ------> FMC_D15
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0
 8002cd6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002cda:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ce8:	230c      	movs	r3, #12
 8002cea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cec:	1d3b      	adds	r3, r7, #4
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4815      	ldr	r0, [pc, #84]	; (8002d48 <HAL_FMC_MspInit+0xac>)
 8002cf2:	f001 fe2b 	bl	800494c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d02:	2303      	movs	r3, #3
 8002d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d06:	230c      	movs	r3, #12
 8002d08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	480f      	ldr	r0, [pc, #60]	; (8002d4c <HAL_FMC_MspInit+0xb0>)
 8002d10:	f001 fe1c 	bl	800494c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7
 8002d14:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002d18:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d22:	2303      	movs	r3, #3
 8002d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d26:	230c      	movs	r3, #12
 8002d28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4808      	ldr	r0, [pc, #32]	; (8002d50 <HAL_FMC_MspInit+0xb4>)
 8002d30:	f001 fe0c 	bl	800494c <HAL_GPIO_Init>
 8002d34:	e000      	b.n	8002d38 <HAL_FMC_MspInit+0x9c>
    return;
 8002d36:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000248 	.word	0x20000248
 8002d44:	40021000 	.word	0x40021000
 8002d48:	42020c00 	.word	0x42020c00
 8002d4c:	42021400 	.word	0x42021400
 8002d50:	42021000 	.word	0x42021000

08002d54 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002d5c:	f7ff ff9e 	bl	8002c9c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a2a      	ldr	r2, [pc, #168]	; (8002e20 <HAL_SAI_MspInit+0xb8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d124      	bne.n	8002dc4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002d7a:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_SAI_MspInit+0xbc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10b      	bne.n	8002d9a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002d82:	4b29      	ldr	r3, [pc, #164]	; (8002e28 <HAL_SAI_MspInit+0xc0>)
 8002d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d86:	4a28      	ldr	r2, [pc, #160]	; (8002e28 <HAL_SAI_MspInit+0xc0>)
 8002d88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <HAL_SAI_MspInit+0xc0>)
 8002d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002d9a:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <HAL_SAI_MspInit+0xbc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	4a20      	ldr	r2, [pc, #128]	; (8002e24 <HAL_SAI_MspInit+0xbc>)
 8002da2:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_6;
 8002da4:	2374      	movs	r3, #116	; 0x74
 8002da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	2302      	movs	r3, #2
 8002daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	2300      	movs	r3, #0
 8002db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002db4:	230d      	movs	r3, #13
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	481b      	ldr	r0, [pc, #108]	; (8002e2c <HAL_SAI_MspInit+0xc4>)
 8002dc0:	f001 fdc4 	bl	800494c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <HAL_SAI_MspInit+0xc8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d124      	bne.n	8002e18 <HAL_SAI_MspInit+0xb0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002dce:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <HAL_SAI_MspInit+0xbc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10b      	bne.n	8002dee <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_SAI_MspInit+0xc0>)
 8002dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dda:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <HAL_SAI_MspInit+0xc0>)
 8002ddc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002de0:	6613      	str	r3, [r2, #96]	; 0x60
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_SAI_MspInit+0xc0>)
 8002de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002dee:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_SAI_MspInit+0xbc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3301      	adds	r3, #1
 8002df4:	4a0b      	ldr	r2, [pc, #44]	; (8002e24 <HAL_SAI_MspInit+0xbc>)
 8002df6:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002df8:	2308      	movs	r3, #8
 8002dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e04:	2300      	movs	r3, #0
 8002e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002e08:	230d      	movs	r3, #13
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	4619      	mov	r1, r3
 8002e12:	4806      	ldr	r0, [pc, #24]	; (8002e2c <HAL_SAI_MspInit+0xc4>)
 8002e14:	f001 fd9a 	bl	800494c <HAL_GPIO_Init>

    }
}
 8002e18:	bf00      	nop
 8002e1a:	3728      	adds	r7, #40	; 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40015404 	.word	0x40015404
 8002e24:	2000024c 	.word	0x2000024c
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	42021000 	.word	0x42021000
 8002e30:	40015424 	.word	0x40015424

08002e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <NMI_Handler+0x4>

08002e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <HardFault_Handler+0x4>

08002e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <MemManage_Handler+0x4>

08002e46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e4a:	e7fe      	b.n	8002e4a <BusFault_Handler+0x4>

08002e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e50:	e7fe      	b.n	8002e50 <UsageFault_Handler+0x4>

08002e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e80:	f000 fb02 	bl	8003488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <EXTI6_IRQHandler+0x10>)
 8002e8e:	f001 fd15 	bl	80048bc <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000550 	.word	0x20000550

08002e9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
	return 1;
 8002ea0:	2301      	movs	r3, #1
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_kill>:

int _kill(int pid, int sig)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002eb6:	f008 fff9 	bl	800beac <__errno>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2216      	movs	r2, #22
 8002ebe:	601a      	str	r2, [r3, #0]
	return -1;
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <_exit>:

void _exit (int status)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ffe7 	bl	8002eac <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ede:	e7fe      	b.n	8002ede <_exit+0x12>

08002ee0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	e00a      	b.n	8002f08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ef2:	e000      	b.n	8002ef6 <_read+0x16>
 8002ef4:	bf00      	nop
 8002ef6:	4601      	mov	r1, r0
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	60ba      	str	r2, [r7, #8]
 8002efe:	b2ca      	uxtb	r2, r1
 8002f00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	3301      	adds	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	dbf0      	blt.n	8002ef2 <_read+0x12>
	}

return len;
 8002f10:	687b      	ldr	r3, [r7, #4]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	e009      	b.n	8002f40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	60ba      	str	r2, [r7, #8]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	e000      	b.n	8002f3a <_write+0x20>
 8002f38:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	dbf1      	blt.n	8002f2c <_write+0x12>
	}
	return len;
 8002f48:	687b      	ldr	r3, [r7, #4]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <_close>:

int _close(int file)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
	return -1;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f7a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <_isatty>:

int _isatty(int file)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
	return 1;
 8002f92:	2301      	movs	r3, #1
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
	return 0;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc4:	4a14      	ldr	r2, [pc, #80]	; (8003018 <_sbrk+0x5c>)
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <_sbrk+0x60>)
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fd0:	4b13      	ldr	r3, [pc, #76]	; (8003020 <_sbrk+0x64>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <_sbrk+0x64>)
 8002fda:	4a12      	ldr	r2, [pc, #72]	; (8003024 <_sbrk+0x68>)
 8002fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <_sbrk+0x64>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d207      	bcs.n	8002ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fec:	f008 ff5e 	bl	800beac <__errno>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	220c      	movs	r2, #12
 8002ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffa:	e009      	b.n	8003010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <_sbrk+0x64>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003002:	4b07      	ldr	r3, [pc, #28]	; (8003020 <_sbrk+0x64>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	4a05      	ldr	r2, [pc, #20]	; (8003020 <_sbrk+0x64>)
 800300c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800300e:	68fb      	ldr	r3, [r7, #12]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20030000 	.word	0x20030000
 800301c:	00000400 	.word	0x00000400
 8003020:	20000250 	.word	0x20000250
 8003024:	20000e18 	.word	0x20000e18

08003028 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <SystemInit+0x20>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003032:	4a05      	ldr	r2, [pc, #20]	; (8003048 <SystemInit+0x20>)
 8003034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8003052:	4b4f      	ldr	r3, [pc, #316]	; (8003190 <SystemCoreClockUpdate+0x144>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d107      	bne.n	800306e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800305e:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <SystemCoreClockUpdate+0x144>)
 8003060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	e005      	b.n	800307a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800306e:	4b48      	ldr	r3, [pc, #288]	; (8003190 <SystemCoreClockUpdate+0x144>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800307a:	4a46      	ldr	r2, [pc, #280]	; (8003194 <SystemCoreClockUpdate+0x148>)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003084:	4b42      	ldr	r3, [pc, #264]	; (8003190 <SystemCoreClockUpdate+0x144>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	2b0c      	cmp	r3, #12
 800308e:	d866      	bhi.n	800315e <SystemCoreClockUpdate+0x112>
 8003090:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <SystemCoreClockUpdate+0x4c>)
 8003092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003096:	bf00      	nop
 8003098:	080030cd 	.word	0x080030cd
 800309c:	0800315f 	.word	0x0800315f
 80030a0:	0800315f 	.word	0x0800315f
 80030a4:	0800315f 	.word	0x0800315f
 80030a8:	080030d5 	.word	0x080030d5
 80030ac:	0800315f 	.word	0x0800315f
 80030b0:	0800315f 	.word	0x0800315f
 80030b4:	0800315f 	.word	0x0800315f
 80030b8:	080030dd 	.word	0x080030dd
 80030bc:	0800315f 	.word	0x0800315f
 80030c0:	0800315f 	.word	0x0800315f
 80030c4:	0800315f 	.word	0x0800315f
 80030c8:	080030e5 	.word	0x080030e5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80030cc:	4a32      	ldr	r2, [pc, #200]	; (8003198 <SystemCoreClockUpdate+0x14c>)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	6013      	str	r3, [r2, #0]
      break;
 80030d2:	e048      	b.n	8003166 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <SystemCoreClockUpdate+0x14c>)
 80030d6:	4a31      	ldr	r2, [pc, #196]	; (800319c <SystemCoreClockUpdate+0x150>)
 80030d8:	601a      	str	r2, [r3, #0]
      break;
 80030da:	e044      	b.n	8003166 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80030dc:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <SystemCoreClockUpdate+0x14c>)
 80030de:	4a30      	ldr	r2, [pc, #192]	; (80031a0 <SystemCoreClockUpdate+0x154>)
 80030e0:	601a      	str	r2, [r3, #0]
      break;
 80030e2:	e040      	b.n	8003166 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80030e4:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <SystemCoreClockUpdate+0x144>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80030ee:	4b28      	ldr	r3, [pc, #160]	; (8003190 <SystemCoreClockUpdate+0x144>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	3301      	adds	r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d003      	beq.n	800310a <SystemCoreClockUpdate+0xbe>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b03      	cmp	r3, #3
 8003106:	d006      	beq.n	8003116 <SystemCoreClockUpdate+0xca>
 8003108:	e00b      	b.n	8003122 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800310a:	4a24      	ldr	r2, [pc, #144]	; (800319c <SystemCoreClockUpdate+0x150>)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	613b      	str	r3, [r7, #16]
          break;
 8003114:	e00b      	b.n	800312e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8003116:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <SystemCoreClockUpdate+0x154>)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	613b      	str	r3, [r7, #16]
          break;
 8003120:	e005      	b.n	800312e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	613b      	str	r3, [r7, #16]
          break;
 800312c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800312e:	4b18      	ldr	r3, [pc, #96]	; (8003190 <SystemCoreClockUpdate+0x144>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	0a1b      	lsrs	r3, r3, #8
 8003134:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <SystemCoreClockUpdate+0x144>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	0e5b      	lsrs	r3, r3, #25
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	3301      	adds	r3, #1
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	4a0f      	ldr	r2, [pc, #60]	; (8003198 <SystemCoreClockUpdate+0x14c>)
 800315a:	6013      	str	r3, [r2, #0]
      break;
 800315c:	e003      	b.n	8003166 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800315e:	4a0e      	ldr	r2, [pc, #56]	; (8003198 <SystemCoreClockUpdate+0x14c>)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	6013      	str	r3, [r2, #0]
      break;
 8003164:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <SystemCoreClockUpdate+0x144>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	4a0c      	ldr	r2, [pc, #48]	; (80031a4 <SystemCoreClockUpdate+0x158>)
 8003172:	5cd3      	ldrb	r3, [r2, r3]
 8003174:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <SystemCoreClockUpdate+0x14c>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
 8003180:	4a05      	ldr	r2, [pc, #20]	; (8003198 <SystemCoreClockUpdate+0x14c>)
 8003182:	6013      	str	r3, [r2, #0]
}
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	40021000 	.word	0x40021000
 8003194:	0800d4f8 	.word	0x0800d4f8
 8003198:	20000000 	.word	0x20000000
 800319c:	00f42400 	.word	0x00f42400
 80031a0:	007a1200 	.word	0x007a1200
 80031a4:	0800d4e0 	.word	0x0800d4e0

080031a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80031a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80031ac:	f7ff ff3c 	bl	8003028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80031b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80031b2:	e003      	b.n	80031bc <LoopCopyDataInit>

080031b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80031b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80031b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80031ba:	3104      	adds	r1, #4

080031bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031bc:	480a      	ldr	r0, [pc, #40]	; (80031e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80031c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031c4:	d3f6      	bcc.n	80031b4 <CopyDataInit>
	ldr	r2, =_sbss
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80031c8:	e002      	b.n	80031d0 <LoopFillZerobss>

080031ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031cc:	f842 3b04 	str.w	r3, [r2], #4

080031d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <LoopForever+0x16>)
	cmp	r2, r3
 80031d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031d4:	d3f9      	bcc.n	80031ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031d6:	f008 fe81 	bl	800bedc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031da:	f7fe fafd 	bl	80017d8 <main>

080031de <LoopForever>:

LoopForever:
    b LoopForever
 80031de:	e7fe      	b.n	80031de <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80031e0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80031e4:	0800d63c 	.word	0x0800d63c
	ldr	r0, =_sdata
 80031e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80031ec:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80031f0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80031f4:	20000e18 	.word	0x20000e18

080031f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031f8:	e7fe      	b.n	80031f8 <ADC1_2_IRQHandler>
	...

080031fc <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <BSP_SPI1_Init+0x54>)
 8003208:	4a12      	ldr	r2, [pc, #72]	; (8003254 <BSP_SPI1_Init+0x58>)
 800320a:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <BSP_SPI1_Init+0x5c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	4911      	ldr	r1, [pc, #68]	; (8003258 <BSP_SPI1_Init+0x5c>)
 8003214:	600a      	str	r2, [r1, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d114      	bne.n	8003244 <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800321a:	480d      	ldr	r0, [pc, #52]	; (8003250 <BSP_SPI1_Init+0x54>)
 800321c:	f005 fc86 	bl	8008b2c <HAL_SPI_GetState>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10e      	bne.n	8003244 <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 8003226:	480a      	ldr	r0, [pc, #40]	; (8003250 <BSP_SPI1_Init+0x54>)
 8003228:	f000 f882 	bl	8003330 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d108      	bne.n	8003244 <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8003232:	4807      	ldr	r0, [pc, #28]	; (8003250 <BSP_SPI1_Init+0x54>)
 8003234:	f000 f83a 	bl	80032ac <MX_SPI1_Init>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 800323e:	f06f 0307 	mvn.w	r3, #7
 8003242:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 8003244:	687b      	ldr	r3, [r7, #4]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000d90 	.word	0x20000d90
 8003254:	40013000 	.word	0x40013000
 8003258:	20000254 	.word	0x20000254

0800325c <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	4613      	mov	r3, r2
 8003268:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003274:	9200      	str	r2, [sp, #0]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	68f9      	ldr	r1, [r7, #12]
 800327a:	4807      	ldr	r0, [pc, #28]	; (8003298 <BSP_SPI1_SendRecv+0x3c>)
 800327c:	f005 fa43 	bl	8008706 <HAL_SPI_TransmitReceive>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003286:	f06f 0305 	mvn.w	r3, #5
 800328a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800328c:	697b      	ldr	r3, [r7, #20]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000d90 	.word	0x20000d90

0800329c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80032a0:	f000 f906 	bl	80034b0 <HAL_GetTick>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a1c      	ldr	r2, [pc, #112]	; (800332c <MX_SPI1_Init+0x80>)
 80032bc:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032c4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032d2:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e6:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2218      	movs	r2, #24
 80032ec:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2207      	movs	r2, #7
 8003304:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2208      	movs	r2, #8
 8003310:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f005 f94a 	bl	80085ac <HAL_SPI_Init>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003322:	7bfb      	ldrb	r3, [r7, #15]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40013000 	.word	0x40013000

08003330 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	; 0x28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003338:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <SPI1_MspInit+0xa4>)
 800333a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333c:	4a25      	ldr	r2, [pc, #148]	; (80033d4 <SPI1_MspInit+0xa4>)
 800333e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003342:	6613      	str	r3, [r2, #96]	; 0x60
 8003344:	4b23      	ldr	r3, [pc, #140]	; (80033d4 <SPI1_MspInit+0xa4>)
 8003346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <SPI1_MspInit+0xa4>)
 8003352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003354:	4a1f      	ldr	r2, [pc, #124]	; (80033d4 <SPI1_MspInit+0xa4>)
 8003356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800335a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800335c:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <SPI1_MspInit+0xa4>)
 800335e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8003368:	f002 f93e 	bl	80055e8 <HAL_PWREx_EnableVddIO2>
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800336c:	2310      	movs	r3, #16
 800336e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	2302      	movs	r3, #2
 8003372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003378:	2300      	movs	r3, #0
 800337a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800337c:	2305      	movs	r3, #5
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	4619      	mov	r1, r3
 8003386:	4814      	ldr	r0, [pc, #80]	; (80033d8 <SPI1_MspInit+0xa8>)
 8003388:	f001 fae0 	bl	800494c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800338c:	2304      	movs	r3, #4
 800338e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003390:	2302      	movs	r3, #2
 8003392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003398:	2300      	movs	r3, #0
 800339a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800339c:	2305      	movs	r3, #5
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	4619      	mov	r1, r3
 80033a6:	480c      	ldr	r0, [pc, #48]	; (80033d8 <SPI1_MspInit+0xa8>)
 80033a8:	f001 fad0 	bl	800494c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80033ac:	2308      	movs	r3, #8
 80033ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b0:	2302      	movs	r3, #2
 80033b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b8:	2300      	movs	r3, #0
 80033ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80033bc:	2305      	movs	r3, #5
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	4619      	mov	r1, r3
 80033c6:	4804      	ldr	r0, [pc, #16]	; (80033d8 <SPI1_MspInit+0xa8>)
 80033c8:	f001 fac0 	bl	800494c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80033cc:	bf00      	nop
 80033ce:	3728      	adds	r7, #40	; 0x28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000
 80033d8:	42021800 	.word	0x42021800

080033dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80033e6:	2004      	movs	r0, #4
 80033e8:	f001 f900 	bl	80045ec <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80033ec:	f7ff fe2e 	bl	800304c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033f0:	2000      	movs	r0, #0
 80033f2:	f000 f80d 	bl	8003410 <HAL_InitTick>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	71fb      	strb	r3, [r7, #7]
 8003400:	e001      	b.n	8003406 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003402:	f7ff f8bd 	bl	8002580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003406:	79fb      	ldrb	r3, [r7, #7]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800341c:	4b17      	ldr	r3, [pc, #92]	; (800347c <HAL_InitTick+0x6c>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d023      	beq.n	800346c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003424:	4b16      	ldr	r3, [pc, #88]	; (8003480 <HAL_InitTick+0x70>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_InitTick+0x6c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	4619      	mov	r1, r3
 800342e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003432:	fbb3 f3f1 	udiv	r3, r3, r1
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	4618      	mov	r0, r3
 800343c:	f001 f909 	bl	8004652 <HAL_SYSTICK_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10f      	bne.n	8003466 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b07      	cmp	r3, #7
 800344a:	d809      	bhi.n	8003460 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800344c:	2200      	movs	r2, #0
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	f04f 30ff 	mov.w	r0, #4294967295
 8003454:	f001 f8d5 	bl	8004602 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003458:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <HAL_InitTick+0x74>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	e007      	b.n	8003470 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	e004      	b.n	8003470 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
 800346a:	e001      	b.n	8003470 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000008 	.word	0x20000008
 8003480:	20000000 	.word	0x20000000
 8003484:	20000004 	.word	0x20000004

08003488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_IncTick+0x20>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_IncTick+0x24>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4413      	add	r3, r2
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <HAL_IncTick+0x24>)
 800349a:	6013      	str	r3, [r2, #0]
}
 800349c:	bf00      	nop
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000008 	.word	0x20000008
 80034ac:	20000df4 	.word	0x20000df4

080034b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return uwTick;
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <HAL_GetTick+0x14>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000df4 	.word	0x20000df4

080034c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034d0:	f7ff ffee 	bl	80034b0 <HAL_GetTick>
 80034d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d005      	beq.n	80034ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <HAL_Delay+0x44>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4413      	add	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034ee:	bf00      	nop
 80034f0:	f7ff ffde 	bl	80034b0 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d8f7      	bhi.n	80034f0 <HAL_Delay+0x28>
  {
  }
}
 8003500:	bf00      	nop
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000008 	.word	0x20000008

08003510 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	609a      	str	r2, [r3, #8]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	609a      	str	r2, [r3, #8]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3360      	adds	r3, #96	; 0x60
 800358a:	461a      	mov	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <LL_ADC_SetOffset+0x44>)
 800359a:	4013      	ands	r3, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	03fff000 	.word	0x03fff000

080035c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3360      	adds	r3, #96	; 0x60
 80035ce:	461a      	mov	r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3360      	adds	r3, #96	; 0x60
 80035fc:	461a      	mov	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	431a      	orrs	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	615a      	str	r2, [r3, #20]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3330      	adds	r3, #48	; 0x30
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	0a1b      	lsrs	r3, r3, #8
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	f003 030c 	and.w	r3, r3, #12
 8003664:	4413      	add	r3, r2
 8003666:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	211f      	movs	r1, #31
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	401a      	ands	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	0e9b      	lsrs	r3, r3, #26
 8003680:	f003 011f 	and.w	r1, r3, #31
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	431a      	orrs	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003694:	bf00      	nop
 8003696:	371c      	adds	r7, #28
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3314      	adds	r3, #20
 80036b0:	461a      	mov	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	0e5b      	lsrs	r3, r3, #25
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	4413      	add	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	0d1b      	lsrs	r3, r3, #20
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	2107      	movs	r1, #7
 80036ce:	fa01 f303 	lsl.w	r3, r1, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	401a      	ands	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	0d1b      	lsrs	r3, r3, #20
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	431a      	orrs	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003710:	43db      	mvns	r3, r3
 8003712:	401a      	ands	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f003 0318 	and.w	r3, r3, #24
 800371a:	4908      	ldr	r1, [pc, #32]	; (800373c <LL_ADC_SetChannelSingleDiff+0x44>)
 800371c:	40d9      	lsrs	r1, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	400b      	ands	r3, r1
 8003722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003726:	431a      	orrs	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	0007ffff 	.word	0x0007ffff

08003740 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003750:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6093      	str	r3, [r2, #8]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003778:	d101      	bne.n	800377e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800379c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037c8:	d101      	bne.n	80037ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <LL_ADC_IsEnabled+0x18>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <LL_ADC_IsEnabled+0x1a>
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b04      	cmp	r3, #4
 8003814:	d101      	bne.n	800381a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b08      	cmp	r3, #8
 800383a:	d101      	bne.n	8003840 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003850:	b590      	push	{r4, r7, lr}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800385c:	2300      	movs	r3, #0
 800385e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e132      	b.n	8003ad0 <HAL_ADC_Init+0x280>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7fe fea5 	bl	80025c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff67 	bl	8003764 <LL_ADC_IsDeepPowerDownEnabled>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d004      	beq.n	80038a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff ff4d 	bl	8003740 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff ff82 	bl	80037b4 <LL_ADC_IsInternalRegulatorEnabled>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d113      	bne.n	80038de <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff ff66 	bl	800378c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80038c0:	4b85      	ldr	r3, [pc, #532]	; (8003ad8 <HAL_ADC_Init+0x288>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	099b      	lsrs	r3, r3, #6
 80038c6:	4a85      	ldr	r2, [pc, #532]	; (8003adc <HAL_ADC_Init+0x28c>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038d0:	e002      	b.n	80038d8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f9      	bne.n	80038d2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ff66 	bl	80037b4 <LL_ADC_IsInternalRegulatorEnabled>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10d      	bne.n	800390a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	f043 0210 	orr.w	r2, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	f043 0201 	orr.w	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff ff77 	bl	8003802 <LL_ADC_REG_IsConversionOngoing>
 8003914:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	f040 80cd 	bne.w	8003abe <HAL_ADC_Init+0x26e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 80c9 	bne.w	8003abe <HAL_ADC_Init+0x26e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003934:	f043 0202 	orr.w	r2, r3, #2
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff4b 	bl	80037dc <LL_ADC_IsEnabled>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d110      	bne.n	800396e <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800394c:	4864      	ldr	r0, [pc, #400]	; (8003ae0 <HAL_ADC_Init+0x290>)
 800394e:	f7ff ff45 	bl	80037dc <LL_ADC_IsEnabled>
 8003952:	4604      	mov	r4, r0
 8003954:	4863      	ldr	r0, [pc, #396]	; (8003ae4 <HAL_ADC_Init+0x294>)
 8003956:	f7ff ff41 	bl	80037dc <LL_ADC_IsEnabled>
 800395a:	4603      	mov	r3, r0
 800395c:	4323      	orrs	r3, r4
 800395e:	2b00      	cmp	r3, #0
 8003960:	d105      	bne.n	800396e <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4619      	mov	r1, r3
 8003968:	485f      	ldr	r0, [pc, #380]	; (8003ae8 <HAL_ADC_Init+0x298>)
 800396a:	f7ff fdd1 	bl	8003510 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	7e5b      	ldrb	r3, [r3, #25]
 8003972:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003978:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800397e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003984:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800398c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d106      	bne.n	80039aa <HAL_ADC_Init+0x15a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	3b01      	subs	r3, #1
 80039a2:	045b      	lsls	r3, r3, #17
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_ADC_Init+0x176>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	4b47      	ldr	r3, [pc, #284]	; (8003aec <HAL_ADC_Init+0x29c>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	430b      	orrs	r3, r1
 80039d8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff ff0f 	bl	8003802 <LL_ADC_REG_IsConversionOngoing>
 80039e4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ff1c 	bl	8003828 <LL_ADC_INJ_IsConversionOngoing>
 80039f0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d140      	bne.n	8003a7a <HAL_ADC_Init+0x22a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d13d      	bne.n	8003a7a <HAL_ADC_Init+0x22a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	7e1b      	ldrb	r3, [r3, #24]
 8003a06:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a08:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a10:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a20:	f023 0306 	bic.w	r3, r3, #6
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	69b9      	ldr	r1, [r7, #24]
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d118      	bne.n	8003a6a <HAL_ADC_Init+0x21a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a42:	f023 0304 	bic.w	r3, r3, #4
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a4e:	4311      	orrs	r1, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a54:	4311      	orrs	r1, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	611a      	str	r2, [r3, #16]
 8003a68:	e007      	b.n	8003a7a <HAL_ADC_Init+0x22a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d10c      	bne.n	8003a9c <HAL_ADC_Init+0x24c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	f023 010f 	bic.w	r1, r3, #15
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	1e5a      	subs	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
 8003a9a:	e007      	b.n	8003aac <HAL_ADC_Init+0x25c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 020f 	bic.w	r2, r2, #15
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	f023 0303 	bic.w	r3, r3, #3
 8003ab4:	f043 0201 	orr.w	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	659a      	str	r2, [r3, #88]	; 0x58
 8003abc:	e007      	b.n	8003ace <HAL_ADC_Init+0x27e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac2:	f043 0210 	orr.w	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ace:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3724      	adds	r7, #36	; 0x24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd90      	pop	{r4, r7, pc}
 8003ad8:	20000000 	.word	0x20000000
 8003adc:	053e2d63 	.word	0x053e2d63
 8003ae0:	42028000 	.word	0x42028000
 8003ae4:	42028100 	.word	0x42028100
 8003ae8:	42028300 	.word	0x42028300
 8003aec:	fff0c007 	.word	0xfff0c007

08003af0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b0b7      	sub	sp, #220	; 0xdc
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x22>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e3c0      	b.n	8004294 <HAL_ADC_ConfigChannel+0x7a4>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fe6f 	bl	8003802 <LL_ADC_REG_IsConversionOngoing>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f040 83a5 	bne.w	8004276 <HAL_ADC_ConfigChannel+0x786>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	6859      	ldr	r1, [r3, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f7ff fd85 	bl	8003648 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff fe5d 	bl	8003802 <LL_ADC_REG_IsConversionOngoing>
 8003b48:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fe69 	bl	8003828 <LL_ADC_INJ_IsConversionOngoing>
 8003b56:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f040 81c1 	bne.w	8003ee6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f040 81bc 	bne.w	8003ee6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b76:	d10f      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2200      	movs	r2, #0
 8003b82:	4619      	mov	r1, r3
 8003b84:	f7ff fd8c 	bl	80036a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fd46 	bl	8003622 <LL_ADC_SetSamplingTimeCommonConfig>
 8003b96:	e00e      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6819      	ldr	r1, [r3, #0]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f7ff fd7b 	bl	80036a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fd36 	bl	8003622 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	08db      	lsrs	r3, r3, #3
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d00a      	beq.n	8003bee <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	6919      	ldr	r1, [r3, #16]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003be8:	f7ff fcc6 	bl	8003578 <LL_ADC_SetOffset>
 8003bec:	e17b      	b.n	8003ee6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fce3 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x12a>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fcd8 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003c10:	4603      	mov	r3, r0
 8003c12:	0e9b      	lsrs	r3, r3, #26
 8003c14:	f003 021f 	and.w	r2, r3, #31
 8003c18:	e01e      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x168>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fccd 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8003c48:	2320      	movs	r3, #32
 8003c4a:	e004      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8003c4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c50:	fab3 f383 	clz	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x180>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	0e9b      	lsrs	r3, r3, #26
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	e018      	b.n	8003ca2 <HAL_ADC_ConfigChannel+0x1b2>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003c8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8003c94:	2320      	movs	r3, #32
 8003c96:	e004      	b.n	8003ca2 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8003c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c9c:	fab3 f383 	clz	r3, r3
 8003ca0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d106      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2200      	movs	r2, #0
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fc9c 	bl	80035ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fc80 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x1f0>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fc75 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	0e9b      	lsrs	r3, r3, #26
 8003cda:	f003 021f 	and.w	r2, r3, #31
 8003cde:	e01e      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x22e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fc6a 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003cf6:	fa93 f3a3 	rbit	r3, r3
 8003cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003d06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8003d0e:	2320      	movs	r3, #32
 8003d10:	e004      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8003d12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d105      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x246>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	0e9b      	lsrs	r3, r3, #26
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	e018      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x278>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d42:	fa93 f3a3 	rbit	r3, r3
 8003d46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003d4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003d52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8003d5a:	2320      	movs	r3, #32
 8003d5c:	e004      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8003d5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d62:	fab3 f383 	clz	r3, r3
 8003d66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d106      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2101      	movs	r1, #1
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fc39 	bl	80035ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2102      	movs	r1, #2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fc1d 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x2b6>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2102      	movs	r1, #2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fc12 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	0e9b      	lsrs	r3, r3, #26
 8003da0:	f003 021f 	and.w	r2, r3, #31
 8003da4:	e01e      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x2f4>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2102      	movs	r1, #2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fc07 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dbc:	fa93 f3a3 	rbit	r3, r3
 8003dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003dcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	e004      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8003dd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ddc:	fab3 f383 	clz	r3, r3
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x30c>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	0e9b      	lsrs	r3, r3, #26
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	e016      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x33a>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e08:	fa93 f3a3 	rbit	r3, r3
 8003e0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003e0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8003e1c:	2320      	movs	r3, #32
 8003e1e:	e004      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8003e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e24:	fab3 f383 	clz	r3, r3
 8003e28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d106      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	2102      	movs	r1, #2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fbd8 	bl	80035ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2103      	movs	r1, #3
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fbbc 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x378>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2103      	movs	r1, #3
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fbb1 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	0e9b      	lsrs	r3, r3, #26
 8003e62:	f003 021f 	and.w	r2, r3, #31
 8003e66:	e017      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x3a8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2103      	movs	r1, #3
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fba6 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003e74:	4603      	mov	r3, r0
 8003e76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e7a:	fa93 f3a3 	rbit	r3, r3
 8003e7e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e82:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8003e8a:	2320      	movs	r3, #32
 8003e8c:	e003      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8003e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e90:	fab3 f383 	clz	r3, r3
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x3c0>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	0e9b      	lsrs	r3, r3, #26
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	e011      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x3e4>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eb8:	fa93 f3a3 	rbit	r3, r3
 8003ebc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003ebe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8003ec8:	2320      	movs	r3, #32
 8003eca:	e003      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8003ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ece:	fab3 f383 	clz	r3, r3
 8003ed2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d106      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2200      	movs	r2, #0
 8003ede:	2103      	movs	r1, #3
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fb83 	bl	80035ec <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fc76 	bl	80037dc <LL_ADC_IsEnabled>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 81c8 	bne.w	8004288 <HAL_ADC_ConfigChannel+0x798>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	461a      	mov	r2, r3
 8003f06:	f7ff fbf7 	bl	80036f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4a8f      	ldr	r2, [pc, #572]	; (800414c <HAL_ADC_ConfigChannel+0x65c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	f040 8131 	bne.w	8004178 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x44e>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	0e9b      	lsrs	r3, r3, #26
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	2b09      	cmp	r3, #9
 8003f34:	bf94      	ite	ls
 8003f36:	2301      	movls	r3, #1
 8003f38:	2300      	movhi	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	e019      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x482>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003f4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f4e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8003f56:	2320      	movs	r3, #32
 8003f58:	e003      	b.n	8003f62 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8003f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f5c:	fab3 f383 	clz	r3, r3
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	3301      	adds	r3, #1
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	2b09      	cmp	r3, #9
 8003f6a:	bf94      	ite	ls
 8003f6c:	2301      	movls	r3, #1
 8003f6e:	2300      	movhi	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d079      	beq.n	800406a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d107      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x4a2>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	0e9b      	lsrs	r3, r3, #26
 8003f88:	3301      	adds	r3, #1
 8003f8a:	069b      	lsls	r3, r3, #26
 8003f8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f90:	e015      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x4ce>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f9a:	fa93 f3a3 	rbit	r3, r3
 8003f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003faa:	2320      	movs	r3, #32
 8003fac:	e003      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb0:	fab3 f383 	clz	r3, r3
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	069b      	lsls	r3, r3, #26
 8003fba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x4ee>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	0e9b      	lsrs	r3, r3, #26
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fdc:	e017      	b.n	800400e <HAL_ADC_ConfigChannel+0x51e>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe6:	fa93 f3a3 	rbit	r3, r3
 8003fea:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	e003      	b.n	8004002 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8003ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ffc:	fab3 f383 	clz	r3, r3
 8004000:	b2db      	uxtb	r3, r3
 8004002:	3301      	adds	r3, #1
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2101      	movs	r1, #1
 800400a:	fa01 f303 	lsl.w	r3, r1, r3
 800400e:	ea42 0103 	orr.w	r1, r2, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x544>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	0e9b      	lsrs	r3, r3, #26
 8004024:	3301      	adds	r3, #1
 8004026:	f003 021f 	and.w	r2, r3, #31
 800402a:	4613      	mov	r3, r2
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	4413      	add	r3, r2
 8004030:	051b      	lsls	r3, r3, #20
 8004032:	e018      	b.n	8004066 <HAL_ADC_ConfigChannel+0x576>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	fa93 f3a3 	rbit	r3, r3
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004044:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800404c:	2320      	movs	r3, #32
 800404e:	e003      	b.n	8004058 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004052:	fab3 f383 	clz	r3, r3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	3301      	adds	r3, #1
 800405a:	f003 021f 	and.w	r2, r3, #31
 800405e:	4613      	mov	r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4413      	add	r3, r2
 8004064:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004066:	430b      	orrs	r3, r1
 8004068:	e081      	b.n	800416e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x596>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	0e9b      	lsrs	r3, r3, #26
 800407c:	3301      	adds	r3, #1
 800407e:	069b      	lsls	r3, r3, #26
 8004080:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004084:	e015      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x5c2>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408e:	fa93 f3a3 	rbit	r3, r3
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800409e:	2320      	movs	r3, #32
 80040a0:	e003      	b.n	80040aa <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	fab3 f383 	clz	r3, r3
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	3301      	adds	r3, #1
 80040ac:	069b      	lsls	r3, r3, #26
 80040ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x5e2>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	0e9b      	lsrs	r3, r3, #26
 80040c4:	3301      	adds	r3, #1
 80040c6:	f003 031f 	and.w	r3, r3, #31
 80040ca:	2101      	movs	r1, #1
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	e017      	b.n	8004102 <HAL_ADC_ConfigChannel+0x612>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	61fb      	str	r3, [r7, #28]
  return result;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e003      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	3301      	adds	r3, #1
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	ea42 0103 	orr.w	r1, r2, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10d      	bne.n	800412e <HAL_ADC_ConfigChannel+0x63e>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	0e9b      	lsrs	r3, r3, #26
 8004118:	3301      	adds	r3, #1
 800411a:	f003 021f 	and.w	r2, r3, #31
 800411e:	4613      	mov	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	4413      	add	r3, r2
 8004124:	3b1e      	subs	r3, #30
 8004126:	051b      	lsls	r3, r3, #20
 8004128:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800412c:	e01e      	b.n	800416c <HAL_ADC_ConfigChannel+0x67c>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	fa93 f3a3 	rbit	r3, r3
 800413a:	613b      	str	r3, [r7, #16]
  return result;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d104      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8004146:	2320      	movs	r3, #32
 8004148:	e006      	b.n	8004158 <HAL_ADC_ConfigChannel+0x668>
 800414a:	bf00      	nop
 800414c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	fab3 f383 	clz	r3, r3
 8004156:	b2db      	uxtb	r3, r3
 8004158:	3301      	adds	r3, #1
 800415a:	f003 021f 	and.w	r2, r3, #31
 800415e:	4613      	mov	r3, r2
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	4413      	add	r3, r2
 8004164:	3b1e      	subs	r3, #30
 8004166:	051b      	lsls	r3, r3, #20
 8004168:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800416c:	430b      	orrs	r3, r1
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	6892      	ldr	r2, [r2, #8]
 8004172:	4619      	mov	r1, r3
 8004174:	f7ff fa94 	bl	80036a0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b47      	ldr	r3, [pc, #284]	; (800429c <HAL_ADC_ConfigChannel+0x7ac>)
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8081 	beq.w	8004288 <HAL_ADC_ConfigChannel+0x798>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004186:	4846      	ldr	r0, [pc, #280]	; (80042a0 <HAL_ADC_ConfigChannel+0x7b0>)
 8004188:	f7ff f9e8 	bl	800355c <LL_ADC_GetCommonPathInternalCh>
 800418c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004190:	4844      	ldr	r0, [pc, #272]	; (80042a4 <HAL_ADC_ConfigChannel+0x7b4>)
 8004192:	f7ff fb23 	bl	80037dc <LL_ADC_IsEnabled>
 8004196:	4604      	mov	r4, r0
 8004198:	4843      	ldr	r0, [pc, #268]	; (80042a8 <HAL_ADC_ConfigChannel+0x7b8>)
 800419a:	f7ff fb1f 	bl	80037dc <LL_ADC_IsEnabled>
 800419e:	4603      	mov	r3, r0
 80041a0:	4323      	orrs	r3, r4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d15d      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x772>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a40      	ldr	r2, [pc, #256]	; (80042ac <HAL_ADC_ConfigChannel+0x7bc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d126      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x70e>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d120      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x70e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a38      	ldr	r2, [pc, #224]	; (80042a4 <HAL_ADC_ConfigChannel+0x7b4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d160      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80041c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041ce:	4619      	mov	r1, r3
 80041d0:	4833      	ldr	r0, [pc, #204]	; (80042a0 <HAL_ADC_ConfigChannel+0x7b0>)
 80041d2:	f7ff f9b0 	bl	8003536 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80041d6:	4b36      	ldr	r3, [pc, #216]	; (80042b0 <HAL_ADC_ConfigChannel+0x7c0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	099b      	lsrs	r3, r3, #6
 80041dc:	4a35      	ldr	r2, [pc, #212]	; (80042b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	099a      	lsrs	r2, r3, #6
 80041e4:	4613      	mov	r3, r2
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80041ee:	e002      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x706>
              {
                wait_loop_index--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f9      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x700>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041fc:	e044      	b.n	8004288 <HAL_ADC_ConfigChannel+0x798>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2d      	ldr	r2, [pc, #180]	; (80042b8 <HAL_ADC_ConfigChannel+0x7c8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d113      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x740>
 8004208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800420c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10d      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x740>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a22      	ldr	r2, [pc, #136]	; (80042a4 <HAL_ADC_ConfigChannel+0x7b4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d134      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800421e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004226:	4619      	mov	r1, r3
 8004228:	481d      	ldr	r0, [pc, #116]	; (80042a0 <HAL_ADC_ConfigChannel+0x7b0>)
 800422a:	f7ff f984 	bl	8003536 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800422e:	e02b      	b.n	8004288 <HAL_ADC_ConfigChannel+0x798>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a21      	ldr	r2, [pc, #132]	; (80042bc <HAL_ADC_ConfigChannel+0x7cc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d126      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x798>
 800423a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800423e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d120      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x798>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a16      	ldr	r2, [pc, #88]	; (80042a4 <HAL_ADC_ConfigChannel+0x7b4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d11b      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004250:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004258:	4619      	mov	r1, r3
 800425a:	4811      	ldr	r0, [pc, #68]	; (80042a0 <HAL_ADC_ConfigChannel+0x7b0>)
 800425c:	f7ff f96b 	bl	8003536 <LL_ADC_SetCommonPathInternalCh>
 8004260:	e012      	b.n	8004288 <HAL_ADC_ConfigChannel+0x798>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	f043 0220 	orr.w	r2, r3, #32
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004274:	e008      	b.n	8004288 <HAL_ADC_ConfigChannel+0x798>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	f043 0220 	orr.w	r2, r3, #32
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004290:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004294:	4618      	mov	r0, r3
 8004296:	37dc      	adds	r7, #220	; 0xdc
 8004298:	46bd      	mov	sp, r7
 800429a:	bd90      	pop	{r4, r7, pc}
 800429c:	80080000 	.word	0x80080000
 80042a0:	42028300 	.word	0x42028300
 80042a4:	42028000 	.word	0x42028000
 80042a8:	42028100 	.word	0x42028100
 80042ac:	c7520000 	.word	0xc7520000
 80042b0:	20000000 	.word	0x20000000
 80042b4:	053e2d63 	.word	0x053e2d63
 80042b8:	cb840000 	.word	0xcb840000
 80042bc:	80000001 	.word	0x80000001

080042c0 <LL_ADC_IsEnabled>:
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <LL_ADC_IsEnabled+0x18>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <LL_ADC_IsEnabled+0x1a>
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d101      	bne.n	80042fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b0a1      	sub	sp, #132	; 0x84
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004326:	2302      	movs	r3, #2
 8004328:	e085      	b.n	8004436 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a42      	ldr	r2, [pc, #264]	; (8004440 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d102      	bne.n	8004342 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800433c:	4b41      	ldr	r3, [pc, #260]	; (8004444 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e001      	b.n	8004346 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10b      	bne.n	8004364 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	f043 0220 	orr.w	r2, r3, #32
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e068      	b.n	8004436 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff ffbd 	bl	80042e6 <LL_ADC_REG_IsConversionOngoing>
 800436c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff ffb7 	bl	80042e6 <LL_ADC_REG_IsConversionOngoing>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d14a      	bne.n	8004414 <HAL_ADCEx_MultiModeConfigChannel+0x108>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800437e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004380:	2b00      	cmp	r3, #0
 8004382:	d147      	bne.n	8004414 <HAL_ADCEx_MultiModeConfigChannel+0x108>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004384:	4b30      	ldr	r3, [pc, #192]	; (8004448 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004386:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d027      	beq.n	80043e0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043a2:	035b      	lsls	r3, r3, #13
 80043a4:	430b      	orrs	r3, r1
 80043a6:	431a      	orrs	r2, r3
 80043a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043ac:	4824      	ldr	r0, [pc, #144]	; (8004440 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80043ae:	f7ff ff87 	bl	80042c0 <LL_ADC_IsEnabled>
 80043b2:	4604      	mov	r4, r0
 80043b4:	4823      	ldr	r0, [pc, #140]	; (8004444 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80043b6:	f7ff ff83 	bl	80042c0 <LL_ADC_IsEnabled>
 80043ba:	4603      	mov	r3, r0
 80043bc:	4323      	orrs	r3, r4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d132      	bne.n	8004428 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80043c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80043ca:	f023 030f 	bic.w	r3, r3, #15
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	6811      	ldr	r1, [r2, #0]
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	6892      	ldr	r2, [r2, #8]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	431a      	orrs	r2, r3
 80043da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043dc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043de:	e023      	b.n	8004428 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80043e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043ec:	4814      	ldr	r0, [pc, #80]	; (8004440 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80043ee:	f7ff ff67 	bl	80042c0 <LL_ADC_IsEnabled>
 80043f2:	4604      	mov	r4, r0
 80043f4:	4813      	ldr	r0, [pc, #76]	; (8004444 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80043f6:	f7ff ff63 	bl	80042c0 <LL_ADC_IsEnabled>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4323      	orrs	r3, r4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d112      	bne.n	8004428 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800440a:	f023 030f 	bic.w	r3, r3, #15
 800440e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004410:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004412:	e009      	b.n	8004428 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004418:	f043 0220 	orr.w	r2, r3, #32
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004426:	e000      	b.n	800442a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004428:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004432:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004436:	4618      	mov	r0, r3
 8004438:	3784      	adds	r7, #132	; 0x84
 800443a:	46bd      	mov	sp, r7
 800443c:	bd90      	pop	{r4, r7, pc}
 800443e:	bf00      	nop
 8004440:	42028000 	.word	0x42028000
 8004444:	42028100 	.word	0x42028100
 8004448:	42028300 	.word	0x42028300

0800444c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800445c:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <__NVIC_SetPriorityGrouping+0x44>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004468:	4013      	ands	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800447e:	4a04      	ldr	r2, [pc, #16]	; (8004490 <__NVIC_SetPriorityGrouping+0x44>)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	60d3      	str	r3, [r2, #12]
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	e000ed00 	.word	0xe000ed00

08004494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004498:	4b04      	ldr	r3, [pc, #16]	; (80044ac <__NVIC_GetPriorityGrouping+0x18>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	0a1b      	lsrs	r3, r3, #8
 800449e:	f003 0307 	and.w	r3, r3, #7
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	e000ed00 	.word	0xe000ed00

080044b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	db0b      	blt.n	80044da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	f003 021f 	and.w	r2, r3, #31
 80044c8:	4907      	ldr	r1, [pc, #28]	; (80044e8 <__NVIC_EnableIRQ+0x38>)
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2001      	movs	r0, #1
 80044d2:	fa00 f202 	lsl.w	r2, r0, r2
 80044d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	e000e100 	.word	0xe000e100

080044ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	6039      	str	r1, [r7, #0]
 80044f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	db0a      	blt.n	8004516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	b2da      	uxtb	r2, r3
 8004504:	490c      	ldr	r1, [pc, #48]	; (8004538 <__NVIC_SetPriority+0x4c>)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	0152      	lsls	r2, r2, #5
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	440b      	add	r3, r1
 8004510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004514:	e00a      	b.n	800452c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	4908      	ldr	r1, [pc, #32]	; (800453c <__NVIC_SetPriority+0x50>)
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	3b04      	subs	r3, #4
 8004524:	0152      	lsls	r2, r2, #5
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	440b      	add	r3, r1
 800452a:	761a      	strb	r2, [r3, #24]
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000e100 	.word	0xe000e100
 800453c:	e000ed00 	.word	0xe000ed00

08004540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004540:	b480      	push	{r7}
 8004542:	b089      	sub	sp, #36	; 0x24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f1c3 0307 	rsb	r3, r3, #7
 800455a:	2b03      	cmp	r3, #3
 800455c:	bf28      	it	cs
 800455e:	2303      	movcs	r3, #3
 8004560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3303      	adds	r3, #3
 8004566:	2b06      	cmp	r3, #6
 8004568:	d902      	bls.n	8004570 <NVIC_EncodePriority+0x30>
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	3b04      	subs	r3, #4
 800456e:	e000      	b.n	8004572 <NVIC_EncodePriority+0x32>
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004574:	f04f 32ff 	mov.w	r2, #4294967295
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43da      	mvns	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	401a      	ands	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004588:	f04f 31ff 	mov.w	r1, #4294967295
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	fa01 f303 	lsl.w	r3, r1, r3
 8004592:	43d9      	mvns	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004598:	4313      	orrs	r3, r2
         );
}
 800459a:	4618      	mov	r0, r3
 800459c:	3724      	adds	r7, #36	; 0x24
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045b8:	d301      	bcc.n	80045be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ba:	2301      	movs	r3, #1
 80045bc:	e00f      	b.n	80045de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045be:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <SysTick_Config+0x40>)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045c6:	2107      	movs	r1, #7
 80045c8:	f04f 30ff 	mov.w	r0, #4294967295
 80045cc:	f7ff ff8e 	bl	80044ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <SysTick_Config+0x40>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045d6:	4b04      	ldr	r3, [pc, #16]	; (80045e8 <SysTick_Config+0x40>)
 80045d8:	2207      	movs	r2, #7
 80045da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	e000e010 	.word	0xe000e010

080045ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff ff29 	bl	800444c <__NVIC_SetPriorityGrouping>
}
 80045fa:	bf00      	nop
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	4603      	mov	r3, r0
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004610:	f7ff ff40 	bl	8004494 <__NVIC_GetPriorityGrouping>
 8004614:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	6978      	ldr	r0, [r7, #20]
 800461c:	f7ff ff90 	bl	8004540 <NVIC_EncodePriority>
 8004620:	4602      	mov	r2, r0
 8004622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004626:	4611      	mov	r1, r2
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff ff5f 	bl	80044ec <__NVIC_SetPriority>
}
 800462e:	bf00      	nop
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	4603      	mov	r3, r0
 800463e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff ff33 	bl	80044b0 <__NVIC_EnableIRQ>
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff ffa4 	bl	80045a8 <SysTick_Config>
 8004660:	4603      	mov	r3, r0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0ac      	b.n	80047d8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f000 f8b2 	bl	80047ec <DFSDM_GetChannelFromInstance>
 8004688:	4603      	mov	r3, r0
 800468a:	4a55      	ldr	r2, [pc, #340]	; (80047e0 <HAL_DFSDM_ChannelInit+0x174>)
 800468c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e09f      	b.n	80047d8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7fd ffd5 	bl	8002648 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800469e:	4b51      	ldr	r3, [pc, #324]	; (80047e4 <HAL_DFSDM_ChannelInit+0x178>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3301      	adds	r3, #1
 80046a4:	4a4f      	ldr	r2, [pc, #316]	; (80047e4 <HAL_DFSDM_ChannelInit+0x178>)
 80046a6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80046a8:	4b4e      	ldr	r3, [pc, #312]	; (80047e4 <HAL_DFSDM_ChannelInit+0x178>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d125      	bne.n	80046fc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80046b0:	4b4d      	ldr	r3, [pc, #308]	; (80047e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a4c      	ldr	r2, [pc, #304]	; (80047e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046ba:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80046bc:	4b4a      	ldr	r3, [pc, #296]	; (80047e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	4948      	ldr	r1, [pc, #288]	; (80047e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80046ca:	4b47      	ldr	r3, [pc, #284]	; (80047e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a46      	ldr	r2, [pc, #280]	; (80047e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046d0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80046d4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	791b      	ldrb	r3, [r3, #4]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d108      	bne.n	80046f0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80046de:	4b42      	ldr	r3, [pc, #264]	; (80047e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	041b      	lsls	r3, r3, #16
 80046ea:	493f      	ldr	r1, [pc, #252]	; (80047e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80046f0:	4b3d      	ldr	r3, [pc, #244]	; (80047e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a3c      	ldr	r2, [pc, #240]	; (80047e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046fa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800470a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800471a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004720:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 020f 	bic.w	r2, r2, #15
 8004738:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6819      	ldr	r1, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004760:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6899      	ldr	r1, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	3b01      	subs	r3, #1
 8004772:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f002 0207 	and.w	r2, r2, #7
 800478c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6859      	ldr	r1, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047b8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f810 	bl	80047ec <DFSDM_GetChannelFromInstance>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4904      	ldr	r1, [pc, #16]	; (80047e0 <HAL_DFSDM_ChannelInit+0x174>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	2000025c 	.word	0x2000025c
 80047e4:	20000258 	.word	0x20000258
 80047e8:	40016000 	.word	0x40016000

080047ec <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a0e      	ldr	r2, [pc, #56]	; (8004830 <DFSDM_GetChannelFromInstance+0x44>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d102      	bne.n	8004802 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e00f      	b.n	8004822 <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a0b      	ldr	r2, [pc, #44]	; (8004834 <DFSDM_GetChannelFromInstance+0x48>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d102      	bne.n	8004810 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800480a:	2301      	movs	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	e008      	b.n	8004822 <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a09      	ldr	r2, [pc, #36]	; (8004838 <DFSDM_GetChannelFromInstance+0x4c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d102      	bne.n	800481e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004818:	2302      	movs	r3, #2
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	e001      	b.n	8004822 <DFSDM_GetChannelFromInstance+0x36>
  }
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800481e:	2303      	movs	r3, #3
 8004820:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004822:	68fb      	ldr	r3, [r7, #12]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	40016000 	.word	0x40016000
 8004834:	40016020 	.word	0x40016020
 8004838:	40016040 	.word	0x40016040

0800483c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	460b      	mov	r3, r1
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800484e:	7afb      	ldrb	r3, [r7, #11]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d011      	beq.n	8004878 <HAL_EXTI_RegisterCallback+0x3c>
 8004854:	2b02      	cmp	r3, #2
 8004856:	dc13      	bgt.n	8004880 <HAL_EXTI_RegisterCallback+0x44>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <HAL_EXTI_RegisterCallback+0x26>
 800485c:	2b01      	cmp	r3, #1
 800485e:	d007      	beq.n	8004870 <HAL_EXTI_RegisterCallback+0x34>
 8004860:	e00e      	b.n	8004880 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	609a      	str	r2, [r3, #8]
      break;
 800486e:	e00a      	b.n	8004886 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	605a      	str	r2, [r3, #4]
      break;
 8004876:	e006      	b.n	8004886 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	609a      	str	r2, [r3, #8]
      break;
 800487e:	e002      	b.n	8004886 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	75fb      	strb	r3, [r7, #23]
      break;
 8004884:	bf00      	nop
  }

  return status;
 8004886:	7dfb      	ldrb	r3, [r7, #23]
}
 8004888:	4618      	mov	r0, r3
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e003      	b.n	80048b0 <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2201      	movs	r2, #1
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	4b17      	ldr	r3, [pc, #92]	; (8004944 <HAL_EXTI_IRQHandler+0x88>)
 80048e6:	4413      	add	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4013      	ands	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <HAL_EXTI_IRQHandler+0x8c>)
 8004914:	4413      	add	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4013      	ands	r3, r2
 8004920:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d009      	beq.n	800493c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	4798      	blx	r3
    }
  }
}
 800493c:	bf00      	nop
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	4002f40c 	.word	0x4002f40c
 8004948:	4002f410 	.word	0x4002f410

0800494c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800495a:	e158      	b.n	8004c0e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	2101      	movs	r1, #1
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	fa01 f303 	lsl.w	r3, r1, r3
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 814a 	beq.w	8004c08 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d00b      	beq.n	8004994 <HAL_GPIO_Init+0x48>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d007      	beq.n	8004994 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004988:	2b11      	cmp	r3, #17
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b12      	cmp	r3, #18
 8004992:	d130      	bne.n	80049f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	2203      	movs	r2, #3
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4013      	ands	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049ca:	2201      	movs	r2, #1
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4013      	ands	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	091b      	lsrs	r3, r3, #4
 80049e0:	f003 0201 	and.w	r2, r3, #1
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	2203      	movs	r2, #3
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_Init+0xea>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b12      	cmp	r3, #18
 8004a34:	d123      	bne.n	8004a7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	08da      	lsrs	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3208      	adds	r2, #8
 8004a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	220f      	movs	r2, #15
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	43db      	mvns	r3, r3
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4013      	ands	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	08da      	lsrs	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3208      	adds	r2, #8
 8004a78:	6939      	ldr	r1, [r7, #16]
 8004a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	2203      	movs	r2, #3
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4013      	ands	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 0203 	and.w	r2, r3, #3
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80a4 	beq.w	8004c08 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8004ac0:	4a5a      	ldr	r2, [pc, #360]	; (8004c2c <HAL_GPIO_Init+0x2e0>)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	089b      	lsrs	r3, r3, #2
 8004ac6:	3318      	adds	r3, #24
 8004ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004acc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	220f      	movs	r2, #15
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a52      	ldr	r2, [pc, #328]	; (8004c30 <HAL_GPIO_Init+0x2e4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d025      	beq.n	8004b38 <HAL_GPIO_Init+0x1ec>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a51      	ldr	r2, [pc, #324]	; (8004c34 <HAL_GPIO_Init+0x2e8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d01f      	beq.n	8004b34 <HAL_GPIO_Init+0x1e8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a50      	ldr	r2, [pc, #320]	; (8004c38 <HAL_GPIO_Init+0x2ec>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d019      	beq.n	8004b30 <HAL_GPIO_Init+0x1e4>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a4f      	ldr	r2, [pc, #316]	; (8004c3c <HAL_GPIO_Init+0x2f0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d013      	beq.n	8004b2c <HAL_GPIO_Init+0x1e0>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a4e      	ldr	r2, [pc, #312]	; (8004c40 <HAL_GPIO_Init+0x2f4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00d      	beq.n	8004b28 <HAL_GPIO_Init+0x1dc>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a4d      	ldr	r2, [pc, #308]	; (8004c44 <HAL_GPIO_Init+0x2f8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d007      	beq.n	8004b24 <HAL_GPIO_Init+0x1d8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a4c      	ldr	r2, [pc, #304]	; (8004c48 <HAL_GPIO_Init+0x2fc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <HAL_GPIO_Init+0x1d4>
 8004b1c:	2306      	movs	r3, #6
 8004b1e:	e00c      	b.n	8004b3a <HAL_GPIO_Init+0x1ee>
 8004b20:	2307      	movs	r3, #7
 8004b22:	e00a      	b.n	8004b3a <HAL_GPIO_Init+0x1ee>
 8004b24:	2305      	movs	r3, #5
 8004b26:	e008      	b.n	8004b3a <HAL_GPIO_Init+0x1ee>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	e006      	b.n	8004b3a <HAL_GPIO_Init+0x1ee>
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e004      	b.n	8004b3a <HAL_GPIO_Init+0x1ee>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e002      	b.n	8004b3a <HAL_GPIO_Init+0x1ee>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <HAL_GPIO_Init+0x1ee>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	f002 0203 	and.w	r2, r2, #3
 8004b40:	00d2      	lsls	r2, r2, #3
 8004b42:	4093      	lsls	r3, r2
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004b4a:	4938      	ldr	r1, [pc, #224]	; (8004c2c <HAL_GPIO_Init+0x2e0>)
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	089b      	lsrs	r3, r3, #2
 8004b50:	3318      	adds	r3, #24
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b58:	4b34      	ldr	r3, [pc, #208]	; (8004c2c <HAL_GPIO_Init+0x2e0>)
 8004b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	43db      	mvns	r3, r3
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4013      	ands	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b7e:	4a2b      	ldr	r2, [pc, #172]	; (8004c2c <HAL_GPIO_Init+0x2e0>)
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004b86:	4b29      	ldr	r3, [pc, #164]	; (8004c2c <HAL_GPIO_Init+0x2e0>)
 8004b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	43db      	mvns	r3, r3
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4013      	ands	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bac:	4a1f      	ldr	r2, [pc, #124]	; (8004c2c <HAL_GPIO_Init+0x2e0>)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bb4:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <HAL_GPIO_Init+0x2e0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bd8:	4a14      	ldr	r2, [pc, #80]	; (8004c2c <HAL_GPIO_Init+0x2e0>)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bde:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <HAL_GPIO_Init+0x2e0>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	43db      	mvns	r3, r3
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4013      	ands	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c02:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <HAL_GPIO_Init+0x2e0>)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	fa22 f303 	lsr.w	r3, r2, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f47f ae9f 	bne.w	800495c <HAL_GPIO_Init+0x10>
  }
}
 8004c1e:	bf00      	nop
 8004c20:	bf00      	nop
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	4002f400 	.word	0x4002f400
 8004c30:	42020000 	.word	0x42020000
 8004c34:	42020400 	.word	0x42020400
 8004c38:	42020800 	.word	0x42020800
 8004c3c:	42020c00 	.word	0x42020c00
 8004c40:	42021000 	.word	0x42021000
 8004c44:	42021400 	.word	0x42021400
 8004c48:	42021800 	.word	0x42021800

08004c4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004c5a:	e0c7      	b.n	8004dec <HAL_GPIO_DeInit+0x1a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	4013      	ands	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 80ba 	beq.w	8004de6 <HAL_GPIO_DeInit+0x19a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      temp = EXTI->EXTICR[position >> 2U];
 8004c72:	4a65      	ldr	r2, [pc, #404]	; (8004e08 <HAL_GPIO_DeInit+0x1bc>)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	089b      	lsrs	r3, r3, #2
 8004c78:	3318      	adds	r3, #24
 8004c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7e:	60fb      	str	r3, [r7, #12]
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	220f      	movs	r2, #15
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4013      	ands	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a5d      	ldr	r2, [pc, #372]	; (8004e0c <HAL_GPIO_DeInit+0x1c0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d025      	beq.n	8004ce8 <HAL_GPIO_DeInit+0x9c>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a5c      	ldr	r2, [pc, #368]	; (8004e10 <HAL_GPIO_DeInit+0x1c4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d01f      	beq.n	8004ce4 <HAL_GPIO_DeInit+0x98>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a5b      	ldr	r2, [pc, #364]	; (8004e14 <HAL_GPIO_DeInit+0x1c8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d019      	beq.n	8004ce0 <HAL_GPIO_DeInit+0x94>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a5a      	ldr	r2, [pc, #360]	; (8004e18 <HAL_GPIO_DeInit+0x1cc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d013      	beq.n	8004cdc <HAL_GPIO_DeInit+0x90>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a59      	ldr	r2, [pc, #356]	; (8004e1c <HAL_GPIO_DeInit+0x1d0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00d      	beq.n	8004cd8 <HAL_GPIO_DeInit+0x8c>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a58      	ldr	r2, [pc, #352]	; (8004e20 <HAL_GPIO_DeInit+0x1d4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d007      	beq.n	8004cd4 <HAL_GPIO_DeInit+0x88>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a57      	ldr	r2, [pc, #348]	; (8004e24 <HAL_GPIO_DeInit+0x1d8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d101      	bne.n	8004cd0 <HAL_GPIO_DeInit+0x84>
 8004ccc:	2306      	movs	r3, #6
 8004cce:	e00c      	b.n	8004cea <HAL_GPIO_DeInit+0x9e>
 8004cd0:	2307      	movs	r3, #7
 8004cd2:	e00a      	b.n	8004cea <HAL_GPIO_DeInit+0x9e>
 8004cd4:	2305      	movs	r3, #5
 8004cd6:	e008      	b.n	8004cea <HAL_GPIO_DeInit+0x9e>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	e006      	b.n	8004cea <HAL_GPIO_DeInit+0x9e>
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e004      	b.n	8004cea <HAL_GPIO_DeInit+0x9e>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e002      	b.n	8004cea <HAL_GPIO_DeInit+0x9e>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <HAL_GPIO_DeInit+0x9e>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	f002 0203 	and.w	r2, r2, #3
 8004cf0:	00d2      	lsls	r2, r2, #3
 8004cf2:	4093      	lsls	r3, r2
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d136      	bne.n	8004d68 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004cfa:	4b43      	ldr	r3, [pc, #268]	; (8004e08 <HAL_GPIO_DeInit+0x1bc>)
 8004cfc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	43db      	mvns	r3, r3
 8004d04:	4940      	ldr	r1, [pc, #256]	; (8004e08 <HAL_GPIO_DeInit+0x1bc>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004d0c:	4b3e      	ldr	r3, [pc, #248]	; (8004e08 <HAL_GPIO_DeInit+0x1bc>)
 8004d0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	43db      	mvns	r3, r3
 8004d16:	493c      	ldr	r1, [pc, #240]	; (8004e08 <HAL_GPIO_DeInit+0x1bc>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004d1e:	4b3a      	ldr	r3, [pc, #232]	; (8004e08 <HAL_GPIO_DeInit+0x1bc>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	43db      	mvns	r3, r3
 8004d26:	4938      	ldr	r1, [pc, #224]	; (8004e08 <HAL_GPIO_DeInit+0x1bc>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004d2c:	4b36      	ldr	r3, [pc, #216]	; (8004e08 <HAL_GPIO_DeInit+0x1bc>)
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	43db      	mvns	r3, r3
 8004d34:	4934      	ldr	r1, [pc, #208]	; (8004e08 <HAL_GPIO_DeInit+0x1bc>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	604b      	str	r3, [r1, #4]

        temp = (0x0FUL) << (8U * (position & 0x03U));
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	220f      	movs	r2, #15
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~temp;
 8004d4a:	4a2f      	ldr	r2, [pc, #188]	; (8004e08 <HAL_GPIO_DeInit+0x1bc>)
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	089b      	lsrs	r3, r3, #2
 8004d50:	3318      	adds	r3, #24
 8004d52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	43da      	mvns	r2, r3
 8004d5a:	482b      	ldr	r0, [pc, #172]	; (8004e08 <HAL_GPIO_DeInit+0x1bc>)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	089b      	lsrs	r3, r3, #2
 8004d60:	400a      	ands	r2, r1
 8004d62:	3318      	adds	r3, #24
 8004d64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	2103      	movs	r1, #3
 8004d72:	fa01 f303 	lsl.w	r3, r1, r3
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	08da      	lsrs	r2, r3, #3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3208      	adds	r2, #8
 8004d84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	220f      	movs	r2, #15
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	08d2      	lsrs	r2, r2, #3
 8004d9c:	4019      	ands	r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3208      	adds	r2, #8
 8004da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	2103      	movs	r1, #3
 8004db0:	fa01 f303 	lsl.w	r3, r1, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	401a      	ands	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	401a      	ands	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	2103      	movs	r1, #3
 8004dda:	fa01 f303 	lsl.w	r3, r1, r3
 8004dde:	43db      	mvns	r3, r3
 8004de0:	401a      	ands	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	3301      	adds	r3, #1
 8004dea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	fa22 f303 	lsr.w	r3, r2, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f47f af31 	bne.w	8004c5c <HAL_GPIO_DeInit+0x10>
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	4002f400 	.word	0x4002f400
 8004e0c:	42020000 	.word	0x42020000
 8004e10:	42020400 	.word	0x42020400
 8004e14:	42020800 	.word	0x42020800
 8004e18:	42020c00 	.word	0x42020c00
 8004e1c:	42021000 	.word	0x42021000
 8004e20:	42021400 	.word	0x42021400
 8004e24:	42021800 	.word	0x42021800

08004e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	887b      	ldrh	r3, [r7, #2]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
 8004e44:	e001      	b.n	8004e4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e46:	2300      	movs	r3, #0
 8004e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	807b      	strh	r3, [r7, #2]
 8004e64:	4613      	mov	r3, r2
 8004e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e68:	787b      	ldrb	r3, [r7, #1]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e6e:	887a      	ldrh	r2, [r7, #2]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e74:	e002      	b.n	8004e7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e76:	887a      	ldrh	r2, [r7, #2]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e081      	b.n	8004f9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fd fc54 	bl	800275c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2224      	movs	r2, #36	; 0x24
 8004eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ed8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ee8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d107      	bne.n	8004f02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004efe:	609a      	str	r2, [r3, #8]
 8004f00:	e006      	b.n	8004f10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d104      	bne.n	8004f22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6812      	ldr	r2, [r2, #0]
 8004f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	ea42 0103 	orr.w	r1, r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	021a      	lsls	r2, r3, #8
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69d9      	ldr	r1, [r3, #28]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1a      	ldr	r2, [r3, #32]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d138      	bne.n	800502e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e032      	b.n	8005030 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2224      	movs	r2, #36	; 0x24
 8004fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0201 	bic.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ff8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6819      	ldr	r1, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0201 	orr.w	r2, r2, #1
 8005018:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	e000      	b.n	8005030 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800502e:	2302      	movs	r3, #2
  }
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b20      	cmp	r3, #32
 8005050:	d139      	bne.n	80050c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800505c:	2302      	movs	r3, #2
 800505e:	e033      	b.n	80050c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2224      	movs	r2, #36	; 0x24
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800508e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0201 	orr.w	r2, r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e000      	b.n	80050c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80050c6:	2302      	movs	r3, #2
  }
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af02      	add	r7, sp, #8
 80050da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80050e0:	f7fe f9e6 	bl	80034b0 <HAL_GetTick>
 80050e4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
 80050f0:	e0a2      	b.n	8005238 <HAL_OSPI_Init+0x164>
    assert_param(IS_OSPI_DHQC           (hospi->Init.DelayHoldQuarterCycle));
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f040 809b 	bne.w	8005238 <HAL_OSPI_Init+0x164>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fd fc2c 	bl	8002960 <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005108:	f241 3188 	movw	r1, #5000	; 0x1388
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f89b 	bl	8005248 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	4b4a      	ldr	r3, [pc, #296]	; (8005244 <HAL_OSPI_Init+0x170>)
 800511a:	4013      	ands	r3, r2
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	68d1      	ldr	r1, [r2, #12]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6912      	ldr	r2, [r2, #16]
 8005124:	3a01      	subs	r2, #1
 8005126:	0412      	lsls	r2, r2, #16
 8005128:	4311      	orrs	r1, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6952      	ldr	r2, [r2, #20]
 800512e:	3a01      	subs	r2, #1
 8005130:	0212      	lsls	r2, r2, #8
 8005132:	4311      	orrs	r1, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005138:	4311      	orrs	r1, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	69d2      	ldr	r2, [r2, #28]
 800513e:	4311      	orrs	r1, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6812      	ldr	r2, [r2, #0]
 8005144:	430b      	orrs	r3, r1
 8005146:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1a      	ldr	r2, [r3, #32]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	0412      	lsls	r2, r2, #16
 8005168:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005172:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	3b01      	subs	r3, #1
 8005184:	021a      	lsls	r2, r3, #8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2200      	movs	r2, #0
 8005198:	2120      	movs	r1, #32
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f863 	bl	8005266 <OSPI_WaitFlagStateUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d146      	bne.n	8005238 <HAL_OSPI_Init+0x164>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	1e5a      	subs	r2, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051e0:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2b02      	cmp	r3, #2
 800520e:	d107      	bne.n	8005220 <HAL_OSPI_Init+0x14c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0202 	orr.w	r2, r2, #2
 800521e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005228:	d103      	bne.n	8005232 <HAL_OSPI_Init+0x15e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005230:	e002      	b.n	8005238 <HAL_OSPI_Init+0x164>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
  }

  /* Return function status */
  return status;
 8005238:	7bfb      	ldrb	r3, [r7, #15]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	f8e0f8f4 	.word	0xf8e0f8f4

08005248 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005276:	e01a      	b.n	80052ae <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527e:	d016      	beq.n	80052ae <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005280:	f7fe f916 	bl	80034b0 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	429a      	cmp	r2, r3
 800528e:	d302      	bcc.n	8005296 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10b      	bne.n	80052ae <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800529c:	64da      	str	r2, [r3, #76]	; 0x4c
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a2:	f043 0201 	orr.w	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	651a      	str	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e00e      	b.n	80052cc <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6a1a      	ldr	r2, [r3, #32]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4013      	ands	r3, r2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bf14      	ite	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	2300      	moveq	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d1d6      	bne.n	8005278 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052d6:	b08b      	sub	sp, #44	; 0x2c
 80052d8:	af06      	add	r7, sp, #24
 80052da:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e0d7      	b.n	8005496 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fd fc6c 	bl	8002bd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2203      	movs	r2, #3
 8005304:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f005 fe41 	bl	800af94 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005312:	2300      	movs	r3, #0
 8005314:	73fb      	strb	r3, [r7, #15]
 8005316:	e04c      	b.n	80053b2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	440b      	add	r3, r1
 8005328:	3301      	adds	r3, #1
 800532a:	2201      	movs	r2, #1
 800532c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	440b      	add	r3, r1
 800533e:	7bfa      	ldrb	r2, [r7, #15]
 8005340:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005342:	7bfa      	ldrb	r2, [r7, #15]
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	b298      	uxth	r0, r3
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	440b      	add	r3, r1
 8005354:	3336      	adds	r3, #54	; 0x36
 8005356:	4602      	mov	r2, r0
 8005358:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	440b      	add	r3, r1
 800536a:	3303      	adds	r3, #3
 800536c:	2200      	movs	r2, #0
 800536e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005370:	7bfa      	ldrb	r2, [r7, #15]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	440b      	add	r3, r1
 800537e:	3338      	adds	r3, #56	; 0x38
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005384:	7bfa      	ldrb	r2, [r7, #15]
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	440b      	add	r3, r1
 8005392:	333c      	adds	r3, #60	; 0x3c
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005398:	7bfa      	ldrb	r2, [r7, #15]
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	440b      	add	r3, r1
 80053a6:	3340      	adds	r3, #64	; 0x40
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	3301      	adds	r3, #1
 80053b0:	73fb      	strb	r3, [r7, #15]
 80053b2:	7bfa      	ldrb	r2, [r7, #15]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d3ad      	bcc.n	8005318 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053bc:	2300      	movs	r3, #0
 80053be:	73fb      	strb	r3, [r7, #15]
 80053c0:	e044      	b.n	800544c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80053c2:	7bfa      	ldrb	r2, [r7, #15]
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	440b      	add	r3, r1
 80053d0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80053d8:	7bfa      	ldrb	r2, [r7, #15]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	440b      	add	r3, r1
 80053e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80053ea:	7bfa      	ldrb	r2, [r7, #15]
 80053ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053ee:	7bfa      	ldrb	r2, [r7, #15]
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	440b      	add	r3, r1
 80053fc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005404:	7bfa      	ldrb	r2, [r7, #15]
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	440b      	add	r3, r1
 8005412:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800541a:	7bfa      	ldrb	r2, [r7, #15]
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	440b      	add	r3, r1
 8005428:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005430:	7bfa      	ldrb	r2, [r7, #15]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	440b      	add	r3, r1
 800543e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	3301      	adds	r3, #1
 800544a:	73fb      	strb	r3, [r7, #15]
 800544c:	7bfa      	ldrb	r2, [r7, #15]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	429a      	cmp	r2, r3
 8005454:	d3b5      	bcc.n	80053c2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	687e      	ldr	r6, [r7, #4]
 800545e:	466d      	mov	r5, sp
 8005460:	f106 0410 	add.w	r4, r6, #16
 8005464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	602b      	str	r3, [r5, #0]
 800546c:	1d33      	adds	r3, r6, #4
 800546e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005470:	6838      	ldr	r0, [r7, #0]
 8005472:	f005 fdaa 	bl	800afca <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d102      	bne.n	8005494 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f805 	bl	800549e <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800549e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f043 0302 	orr.w	r3, r3, #2
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a04      	ldr	r2, [pc, #16]	; (8005510 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005502:	6013      	str	r3, [r2, #0]
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40007000 	.word	0x40007000

08005514 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005518:	4b04      	ldr	r3, [pc, #16]	; (800552c <HAL_PWREx_GetVoltageRange+0x18>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005520:	4618      	mov	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40007000 	.word	0x40007000

08005530 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8005538:	4b27      	ldr	r3, [pc, #156]	; (80055d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005540:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8005542:	f000 f861 	bl	8005608 <HAL_PWREx_SMPS_GetEffectiveMode>
 8005546:	4603      	mov	r3, r0
 8005548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554c:	d101      	bne.n	8005552 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e03e      	b.n	80055d0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8005552:	4b21      	ldr	r3, [pc, #132]	; (80055d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800555a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555e:	d101      	bne.n	8005564 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e035      	b.n	80055d0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	429a      	cmp	r2, r3
 800556a:	d101      	bne.n	8005570 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	e02f      	b.n	80055d0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005570:	4b19      	ldr	r3, [pc, #100]	; (80055d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005578:	4917      	ldr	r1, [pc, #92]	; (80055d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4313      	orrs	r3, r2
 800557e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8005580:	4b16      	ldr	r3, [pc, #88]	; (80055dc <HAL_PWREx_ControlVoltageScaling+0xac>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	4a16      	ldr	r2, [pc, #88]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005588:	fba2 2303 	umull	r2, r3, r2, r3
 800558c:	09db      	lsrs	r3, r3, #7
 800558e:	2232      	movs	r2, #50	; 0x32
 8005590:	fb02 f303 	mul.w	r3, r2, r3
 8005594:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	08db      	lsrs	r3, r3, #3
 800559c:	3301      	adds	r3, #1
 800559e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055a0:	e002      	b.n	80055a8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b4:	d102      	bne.n	80055bc <HAL_PWREx_ControlVoltageScaling+0x8c>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f2      	bne.n	80055a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055bc:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c8:	d101      	bne.n	80055ce <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e000      	b.n	80055d0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40007000 	.word	0x40007000
 80055dc:	20000000 	.word	0x20000000
 80055e0:	0a7c5ac5 	.word	0x0a7c5ac5
 80055e4:	cccccccd 	.word	0xcccccccd

080055e8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <HAL_PWREx_EnableVddIO2+0x1c>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	4a04      	ldr	r2, [pc, #16]	; (8005604 <HAL_PWREx_EnableVddIO2+0x1c>)
 80055f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055f6:	6053      	str	r3, [r2, #4]
}
 80055f8:	bf00      	nop
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40007000 	.word	0x40007000

08005608 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800561e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005622:	607b      	str	r3, [r7, #4]
 8005624:	e00a      	b.n	800563c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d103      	bne.n	8005638 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8005630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005634:	607b      	str	r3, [r7, #4]
 8005636:	e001      	b.n	800563c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8005638:	2300      	movs	r3, #0
 800563a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800563c:	687b      	ldr	r3, [r7, #4]
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40007000 	.word	0x40007000

08005650 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d102      	bne.n	8005664 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	f000 bc52 	b.w	8005f08 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005664:	4ba3      	ldr	r3, [pc, #652]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 030c 	and.w	r3, r3, #12
 800566c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800566e:	4ba1      	ldr	r3, [pc, #644]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 80da 	beq.w	800583a <HAL_RCC_OscConfig+0x1ea>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d006      	beq.n	800569a <HAL_RCC_OscConfig+0x4a>
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b0c      	cmp	r3, #12
 8005690:	f040 8081 	bne.w	8005796 <HAL_RCC_OscConfig+0x146>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d17d      	bne.n	8005796 <HAL_RCC_OscConfig+0x146>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800569a:	4b96      	ldr	r3, [pc, #600]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d006      	beq.n	80056b4 <HAL_RCC_OscConfig+0x64>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f000 bc2a 	b.w	8005f08 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056b8:	4b8e      	ldr	r3, [pc, #568]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <HAL_RCC_OscConfig+0x7e>
 80056c4:	4b8b      	ldr	r3, [pc, #556]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056cc:	e005      	b.n	80056da <HAL_RCC_OscConfig+0x8a>
 80056ce:	4b89      	ldr	r3, [pc, #548]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80056d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056da:	4293      	cmp	r3, r2
 80056dc:	d224      	bcs.n	8005728 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fe10 	bl	8006308 <RCC_SetFlashLatencyFromMSIRange>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	f000 bc0a 	b.w	8005f08 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056f4:	4b7f      	ldr	r3, [pc, #508]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a7e      	ldr	r2, [pc, #504]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80056fa:	f043 0308 	orr.w	r3, r3, #8
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	4b7c      	ldr	r3, [pc, #496]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	4979      	ldr	r1, [pc, #484]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 800570e:	4313      	orrs	r3, r2
 8005710:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005712:	4b78      	ldr	r3, [pc, #480]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	4974      	ldr	r1, [pc, #464]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 8005722:	4313      	orrs	r3, r2
 8005724:	604b      	str	r3, [r1, #4]
 8005726:	e025      	b.n	8005774 <HAL_RCC_OscConfig+0x124>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005728:	4b72      	ldr	r3, [pc, #456]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a71      	ldr	r2, [pc, #452]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 800572e:	f043 0308 	orr.w	r3, r3, #8
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	4b6f      	ldr	r3, [pc, #444]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	496c      	ldr	r1, [pc, #432]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 8005742:	4313      	orrs	r3, r2
 8005744:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005746:	4b6b      	ldr	r3, [pc, #428]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	4967      	ldr	r1, [pc, #412]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 8005756:	4313      	orrs	r3, r2
 8005758:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d109      	bne.n	8005774 <HAL_RCC_OscConfig+0x124>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fdcf 	bl	8006308 <RCC_SetFlashLatencyFromMSIRange>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <HAL_RCC_OscConfig+0x124>
            {
              return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e3c9      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005774:	f000 fd8c 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 8005778:	4603      	mov	r3, r0
 800577a:	4a5f      	ldr	r2, [pc, #380]	; (80058f8 <HAL_RCC_OscConfig+0x2a8>)
 800577c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800577e:	4b5f      	ldr	r3, [pc, #380]	; (80058fc <HAL_RCC_OscConfig+0x2ac>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f7fd fe44 	bl	8003410 <HAL_InitTick>
 8005788:	4603      	mov	r3, r0
 800578a:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d052      	beq.n	8005838 <HAL_RCC_OscConfig+0x1e8>
        {
          return status;
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	e3b8      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d032      	beq.n	8005804 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800579e:	4b55      	ldr	r3, [pc, #340]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a54      	ldr	r2, [pc, #336]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057aa:	f7fd fe81 	bl	80034b0 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x174>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057b2:	f7fd fe7d 	bl	80034b0 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x174>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e3a1      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057c4:	4b4b      	ldr	r3, [pc, #300]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCC_OscConfig+0x162>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057d0:	4b48      	ldr	r3, [pc, #288]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a47      	ldr	r2, [pc, #284]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80057d6:	f043 0308 	orr.w	r3, r3, #8
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	4b45      	ldr	r3, [pc, #276]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	4942      	ldr	r1, [pc, #264]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057ee:	4b41      	ldr	r3, [pc, #260]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	493d      	ldr	r1, [pc, #244]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	604b      	str	r3, [r1, #4]
 8005802:	e01a      	b.n	800583a <HAL_RCC_OscConfig+0x1ea>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005804:	4b3b      	ldr	r3, [pc, #236]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a3a      	ldr	r2, [pc, #232]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005810:	f7fd fe4e 	bl	80034b0 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x1da>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005818:	f7fd fe4a 	bl	80034b0 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e36e      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800582a:	4b32      	ldr	r3, [pc, #200]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f0      	bne.n	8005818 <HAL_RCC_OscConfig+0x1c8>
 8005836:	e000      	b.n	800583a <HAL_RCC_OscConfig+0x1ea>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005838:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d071      	beq.n	800592a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b08      	cmp	r3, #8
 800584a:	d005      	beq.n	8005858 <HAL_RCC_OscConfig+0x208>
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	2b0c      	cmp	r3, #12
 8005850:	d10e      	bne.n	8005870 <HAL_RCC_OscConfig+0x220>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b03      	cmp	r3, #3
 8005856:	d10b      	bne.n	8005870 <HAL_RCC_OscConfig+0x220>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005858:	4b26      	ldr	r3, [pc, #152]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d061      	beq.n	8005928 <HAL_RCC_OscConfig+0x2d8>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d15d      	bne.n	8005928 <HAL_RCC_OscConfig+0x2d8>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e34b      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005878:	d106      	bne.n	8005888 <HAL_RCC_OscConfig+0x238>
 800587a:	4b1e      	ldr	r3, [pc, #120]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1d      	ldr	r2, [pc, #116]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 8005880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	e01d      	b.n	80058c4 <HAL_RCC_OscConfig+0x274>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005890:	d10c      	bne.n	80058ac <HAL_RCC_OscConfig+0x25c>
 8005892:	4b18      	ldr	r3, [pc, #96]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a17      	ldr	r2, [pc, #92]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 8005898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	4b15      	ldr	r3, [pc, #84]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a14      	ldr	r2, [pc, #80]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80058a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	e00b      	b.n	80058c4 <HAL_RCC_OscConfig+0x274>
 80058ac:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a10      	ldr	r2, [pc, #64]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80058b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a0d      	ldr	r2, [pc, #52]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80058be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d019      	beq.n	8005900 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058cc:	f7fd fdf0 	bl	80034b0 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x296>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058d4:	f7fd fdec 	bl	80034b0 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b64      	cmp	r3, #100	; 0x64
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x296>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e310      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058e6:	4b03      	ldr	r3, [pc, #12]	; (80058f4 <HAL_RCC_OscConfig+0x2a4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0f0      	beq.n	80058d4 <HAL_RCC_OscConfig+0x284>
 80058f2:	e01a      	b.n	800592a <HAL_RCC_OscConfig+0x2da>
 80058f4:	40021000 	.word	0x40021000
 80058f8:	20000000 	.word	0x20000000
 80058fc:	20000004 	.word	0x20000004
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005900:	f7fd fdd6 	bl	80034b0 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x2ca>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005908:	f7fd fdd2 	bl	80034b0 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b64      	cmp	r3, #100	; 0x64
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e2f6      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800591a:	4ba6      	ldr	r3, [pc, #664]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f0      	bne.n	8005908 <HAL_RCC_OscConfig+0x2b8>
 8005926:	e000      	b.n	800592a <HAL_RCC_OscConfig+0x2da>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d060      	beq.n	80059f8 <HAL_RCC_OscConfig+0x3a8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	2b04      	cmp	r3, #4
 800593a:	d005      	beq.n	8005948 <HAL_RCC_OscConfig+0x2f8>
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2b0c      	cmp	r3, #12
 8005940:	d119      	bne.n	8005976 <HAL_RCC_OscConfig+0x326>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b02      	cmp	r3, #2
 8005946:	d116      	bne.n	8005976 <HAL_RCC_OscConfig+0x326>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005948:	4b9a      	ldr	r3, [pc, #616]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <HAL_RCC_OscConfig+0x310>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e2d3      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005960:	4b94      	ldr	r3, [pc, #592]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	061b      	lsls	r3, r3, #24
 800596e:	4991      	ldr	r1, [pc, #580]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005970:	4313      	orrs	r3, r2
 8005972:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005974:	e040      	b.n	80059f8 <HAL_RCC_OscConfig+0x3a8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d023      	beq.n	80059c6 <HAL_RCC_OscConfig+0x376>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800597e:	4b8d      	ldr	r3, [pc, #564]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a8c      	ldr	r2, [pc, #560]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598a:	f7fd fd91 	bl	80034b0 <HAL_GetTick>
 800598e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x354>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005992:	f7fd fd8d 	bl	80034b0 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e2b1      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059a4:	4b83      	ldr	r3, [pc, #524]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0f0      	beq.n	8005992 <HAL_RCC_OscConfig+0x342>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b0:	4b80      	ldr	r3, [pc, #512]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	061b      	lsls	r3, r3, #24
 80059be:	497d      	ldr	r1, [pc, #500]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	604b      	str	r3, [r1, #4]
 80059c4:	e018      	b.n	80059f8 <HAL_RCC_OscConfig+0x3a8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c6:	4b7b      	ldr	r3, [pc, #492]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a7a      	ldr	r2, [pc, #488]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 80059cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d2:	f7fd fd6d 	bl	80034b0 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x39c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059da:	f7fd fd69 	bl	80034b0 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e28d      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059ec:	4b71      	ldr	r3, [pc, #452]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1f0      	bne.n	80059da <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d051      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d031      	beq.n	8005a70 <HAL_RCC_OscConfig+0x420>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d108      	bne.n	8005a26 <HAL_RCC_OscConfig+0x3d6>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8005a14:	4b67      	ldr	r3, [pc, #412]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a1a:	4a66      	ldr	r2, [pc, #408]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005a1c:	f023 0310 	bic.w	r3, r3, #16
 8005a20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005a24:	e007      	b.n	8005a36 <HAL_RCC_OscConfig+0x3e6>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8005a26:	4b63      	ldr	r3, [pc, #396]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a2c:	4a61      	ldr	r2, [pc, #388]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005a2e:	f043 0310 	orr.w	r3, r3, #16
 8005a32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a36:	4b5f      	ldr	r3, [pc, #380]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a3c:	4a5d      	ldr	r2, [pc, #372]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a46:	f7fd fd33 	bl	80034b0 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a4e:	f7fd fd2f 	bl	80034b0 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b07      	cmp	r3, #7
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e253      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a60:	4b54      	ldr	r3, [pc, #336]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0ef      	beq.n	8005a4e <HAL_RCC_OscConfig+0x3fe>
 8005a6e:	e01b      	b.n	8005aa8 <HAL_RCC_OscConfig+0x458>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a70:	4b50      	ldr	r3, [pc, #320]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a76:	4a4f      	ldr	r2, [pc, #316]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005a78:	f023 0301 	bic.w	r3, r3, #1
 8005a7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a80:	f7fd fd16 	bl	80034b0 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0x44a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a88:	f7fd fd12 	bl	80034b0 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b07      	cmp	r3, #7
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e236      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a9a:	4b46      	ldr	r3, [pc, #280]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1ef      	bne.n	8005a88 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8109 	beq.w	8005cc8 <HAL_RCC_OscConfig+0x678>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005aba:	4b3e      	ldr	r3, [pc, #248]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10d      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x492>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac6:	4b3b      	ldr	r3, [pc, #236]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aca:	4a3a      	ldr	r2, [pc, #232]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ad2:	4b38      	ldr	r3, [pc, #224]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ada:	60bb      	str	r3, [r7, #8]
 8005adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ae2:	4b35      	ldr	r3, [pc, #212]	; (8005bb8 <HAL_RCC_OscConfig+0x568>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d118      	bne.n	8005b20 <HAL_RCC_OscConfig+0x4d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aee:	4b32      	ldr	r3, [pc, #200]	; (8005bb8 <HAL_RCC_OscConfig+0x568>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a31      	ldr	r2, [pc, #196]	; (8005bb8 <HAL_RCC_OscConfig+0x568>)
 8005af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005afa:	f7fd fcd9 	bl	80034b0 <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x4c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b02:	f7fd fcd5 	bl	80034b0 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x4c4>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e1f9      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b14:	4b28      	ldr	r3, [pc, #160]	; (8005bb8 <HAL_RCC_OscConfig+0x568>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f0      	beq.n	8005b02 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01f      	beq.n	8005b6c <HAL_RCC_OscConfig+0x51c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d010      	beq.n	8005b5a <HAL_RCC_OscConfig+0x50a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005b38:	4b1e      	ldr	r3, [pc, #120]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3e:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005b40:	f043 0304 	orr.w	r3, r3, #4
 8005b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4e:	4a19      	ldr	r2, [pc, #100]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005b50:	f043 0301 	orr.w	r3, r3, #1
 8005b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b58:	e018      	b.n	8005b8c <HAL_RCC_OscConfig+0x53c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b5a:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b60:	4a14      	ldr	r2, [pc, #80]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005b62:	f043 0301 	orr.w	r3, r3, #1
 8005b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b6a:	e00f      	b.n	8005b8c <HAL_RCC_OscConfig+0x53c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b6c:	4b11      	ldr	r3, [pc, #68]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b72:	4a10      	ldr	r2, [pc, #64]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005b7c:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b82:	4a0c      	ldr	r2, [pc, #48]	; (8005bb4 <HAL_RCC_OscConfig+0x564>)
 8005b84:	f023 0304 	bic.w	r3, r3, #4
 8005b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d058      	beq.n	8005c46 <HAL_RCC_OscConfig+0x5f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b94:	f7fd fc8c 	bl	80034b0 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b9a:	e00f      	b.n	8005bbc <HAL_RCC_OscConfig+0x56c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b9c:	f7fd fc88 	bl	80034b0 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d906      	bls.n	8005bbc <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e1aa      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
 8005bb2:	bf00      	nop
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	40007000 	.word	0x40007000
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bbc:	4bb0      	ldr	r3, [pc, #704]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0e8      	beq.n	8005b9c <HAL_RCC_OscConfig+0x54c>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01b      	beq.n	8005c0e <HAL_RCC_OscConfig+0x5be>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005bd6:	4baa      	ldr	r3, [pc, #680]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bdc:	4aa8      	ldr	r2, [pc, #672]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005be6:	e00a      	b.n	8005bfe <HAL_RCC_OscConfig+0x5ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be8:	f7fd fc62 	bl	80034b0 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x5ae>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e184      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005bfe:	4ba0      	ldr	r3, [pc, #640]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0ed      	beq.n	8005be8 <HAL_RCC_OscConfig+0x598>
 8005c0c:	e053      	b.n	8005cb6 <HAL_RCC_OscConfig+0x666>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005c0e:	4b9c      	ldr	r3, [pc, #624]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c14:	4a9a      	ldr	r2, [pc, #616]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005c1e:	e00a      	b.n	8005c36 <HAL_RCC_OscConfig+0x5e6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c20:	f7fd fc46 	bl	80034b0 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e168      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005c36:	4b92      	ldr	r3, [pc, #584]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1ed      	bne.n	8005c20 <HAL_RCC_OscConfig+0x5d0>
 8005c44:	e037      	b.n	8005cb6 <HAL_RCC_OscConfig+0x666>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c46:	f7fd fc33 	bl	80034b0 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c4c:	e00a      	b.n	8005c64 <HAL_RCC_OscConfig+0x614>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c4e:	f7fd fc2f 	bl	80034b0 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e151      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c64:	4b86      	ldr	r3, [pc, #536]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1ed      	bne.n	8005c4e <HAL_RCC_OscConfig+0x5fe>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005c72:	4b83      	ldr	r3, [pc, #524]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01a      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x666>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005c80:	4b7f      	ldr	r3, [pc, #508]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c86:	4a7e      	ldr	r2, [pc, #504]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005c90:	e00a      	b.n	8005ca8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c92:	f7fd fc0d 	bl	80034b0 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e12f      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ca8:	4b75      	ldr	r3, [pc, #468]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1ed      	bne.n	8005c92 <HAL_RCC_OscConfig+0x642>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cb6:	7ffb      	ldrb	r3, [r7, #31]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d105      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x678>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cbc:	4b70      	ldr	r3, [pc, #448]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc0:	4a6f      	ldr	r2, [pc, #444]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d03c      	beq.n	8005d4e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01c      	beq.n	8005d16 <HAL_RCC_OscConfig+0x6c6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cdc:	4b68      	ldr	r3, [pc, #416]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ce2:	4a67      	ldr	r2, [pc, #412]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005ce4:	f043 0301 	orr.w	r3, r3, #1
 8005ce8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cec:	f7fd fbe0 	bl	80034b0 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x6b6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cf4:	f7fd fbdc 	bl	80034b0 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e100      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d06:	4b5e      	ldr	r3, [pc, #376]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0ef      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x6a4>
 8005d14:	e01b      	b.n	8005d4e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d16:	4b5a      	ldr	r3, [pc, #360]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d1c:	4a58      	ldr	r2, [pc, #352]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005d1e:	f023 0301 	bic.w	r3, r3, #1
 8005d22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d26:	f7fd fbc3 	bl	80034b0 <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x6f0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d2e:	f7fd fbbf 	bl	80034b0 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e0e3      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d40:	4b4f      	ldr	r3, [pc, #316]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1ef      	bne.n	8005d2e <HAL_RCC_OscConfig+0x6de>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 80d7 	beq.w	8005f06 <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d58:	4b49      	ldr	r3, [pc, #292]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 030c 	and.w	r3, r3, #12
 8005d60:	2b0c      	cmp	r3, #12
 8005d62:	f000 8091 	beq.w	8005e88 <HAL_RCC_OscConfig+0x838>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d15a      	bne.n	8005e24 <HAL_RCC_OscConfig+0x7d4>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d6e:	4b44      	ldr	r3, [pc, #272]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a43      	ldr	r2, [pc, #268]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7a:	f7fd fb99 	bl	80034b0 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x744>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d82:	f7fd fb95 	bl	80034b0 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x744>
          {
            return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e0b9      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d94:	4b3a      	ldr	r3, [pc, #232]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f0      	bne.n	8005d82 <HAL_RCC_OscConfig+0x732>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005da0:	4b37      	ldr	r3, [pc, #220]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	4b37      	ldr	r3, [pc, #220]	; (8005e84 <HAL_RCC_OscConfig+0x834>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005db0:	3a01      	subs	r2, #1
 8005db2:	0112      	lsls	r2, r2, #4
 8005db4:	4311      	orrs	r1, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dba:	0212      	lsls	r2, r2, #8
 8005dbc:	4311      	orrs	r1, r2
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005dc2:	0852      	lsrs	r2, r2, #1
 8005dc4:	3a01      	subs	r2, #1
 8005dc6:	0552      	lsls	r2, r2, #21
 8005dc8:	4311      	orrs	r1, r2
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005dce:	0852      	lsrs	r2, r2, #1
 8005dd0:	3a01      	subs	r2, #1
 8005dd2:	0652      	lsls	r2, r2, #25
 8005dd4:	4311      	orrs	r1, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005dda:	06d2      	lsls	r2, r2, #27
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	4928      	ldr	r1, [pc, #160]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005de4:	4b26      	ldr	r3, [pc, #152]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005df0:	4b23      	ldr	r3, [pc, #140]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	4a22      	ldr	r2, [pc, #136]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dfa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfc:	f7fd fb58 	bl	80034b0 <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0x7c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e04:	f7fd fb54 	bl	80034b0 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x7c6>
          {
            return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e078      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e16:	4b1a      	ldr	r3, [pc, #104]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0f0      	beq.n	8005e04 <HAL_RCC_OscConfig+0x7b4>
 8005e22:	e070      	b.n	8005f06 <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e24:	4b16      	ldr	r3, [pc, #88]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a15      	ldr	r2, [pc, #84]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e2e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005e30:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d105      	bne.n	8005e48 <HAL_RCC_OscConfig+0x7f8>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005e3c:	4b10      	ldr	r3, [pc, #64]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	4a0f      	ldr	r2, [pc, #60]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005e48:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	4a0c      	ldr	r2, [pc, #48]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005e4e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e58:	f7fd fb2a 	bl	80034b0 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x822>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e60:	f7fd fb26 	bl	80034b0 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x822>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e04a      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e72:	4b03      	ldr	r3, [pc, #12]	; (8005e80 <HAL_RCC_OscConfig+0x830>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCC_OscConfig+0x810>
 8005e7e:	e042      	b.n	8005f06 <HAL_RCC_OscConfig+0x8b6>
 8005e80:	40021000 	.word	0x40021000
 8005e84:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_RCC_OscConfig+0x844>
      {
        return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e039      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005e94:	4b1e      	ldr	r3, [pc, #120]	; (8005f10 <HAL_RCC_OscConfig+0x8c0>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f003 0203 	and.w	r2, r3, #3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d12c      	bne.n	8005f02 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d123      	bne.n	8005f02 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d11b      	bne.n	8005f02 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d113      	bne.n	8005f02 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	085b      	lsrs	r3, r3, #1
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d109      	bne.n	8005f02 <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef8:	085b      	lsrs	r3, r3, #1
 8005efa:	3b01      	subs	r3, #1
 8005efc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d001      	beq.n	8005f06 <HAL_RCC_OscConfig+0x8b6>
        {
          return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <HAL_RCC_OscConfig+0x8b8>
        }
      }
    }
  }

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3720      	adds	r7, #32
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40021000 	.word	0x40021000

08005f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e104      	b.n	8006136 <HAL_RCC_ClockConfig+0x222>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f2c:	4b84      	ldr	r3, [pc, #528]	; (8006140 <HAL_RCC_ClockConfig+0x22c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d910      	bls.n	8005f5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3a:	4b81      	ldr	r3, [pc, #516]	; (8006140 <HAL_RCC_ClockConfig+0x22c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f023 020f 	bic.w	r2, r3, #15
 8005f42:	497f      	ldr	r1, [pc, #508]	; (8006140 <HAL_RCC_ClockConfig+0x22c>)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f4a:	4b7d      	ldr	r3, [pc, #500]	; (8006140 <HAL_RCC_ClockConfig+0x22c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d001      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e0ec      	b.n	8006136 <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 808b 	beq.w	8006080 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d134      	bne.n	8005fdc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f72:	4b74      	ldr	r3, [pc, #464]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e0d9      	b.n	8006136 <HAL_RCC_ClockConfig+0x222>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f82:	f000 fa25 	bl	80063d0 <RCC_GetSysClockFreqFromPLLSource>
 8005f86:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	4a6f      	ldr	r2, [pc, #444]	; (8006148 <HAL_RCC_ClockConfig+0x234>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d956      	bls.n	800603e <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005f90:	4b6c      	ldr	r3, [pc, #432]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f9c:	4b69      	ldr	r3, [pc, #420]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fa4:	4a67      	ldr	r2, [pc, #412]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 8005fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005faa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	e045      	b.n	800603e <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d03f      	beq.n	800603e <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d13b      	bne.n	800603e <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fc6:	4b5f      	ldr	r3, [pc, #380]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fce:	4a5d      	ldr	r2, [pc, #372]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005fd6:	2380      	movs	r3, #128	; 0x80
 8005fd8:	617b      	str	r3, [r7, #20]
 8005fda:	e030      	b.n	800603e <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d107      	bne.n	8005ff4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fe4:	4b57      	ldr	r3, [pc, #348]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d115      	bne.n	800601c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e0a0      	b.n	8006136 <HAL_RCC_ClockConfig+0x222>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d107      	bne.n	800600c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ffc:	4b51      	ldr	r3, [pc, #324]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d109      	bne.n	800601c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e094      	b.n	8006136 <HAL_RCC_ClockConfig+0x222>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800600c:	4b4d      	ldr	r3, [pc, #308]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e08c      	b.n	8006136 <HAL_RCC_ClockConfig+0x222>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800601c:	f000 f89a 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 8006020:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	4a48      	ldr	r2, [pc, #288]	; (8006148 <HAL_RCC_ClockConfig+0x234>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d909      	bls.n	800603e <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800602a:	4b46      	ldr	r3, [pc, #280]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006032:	4a44      	ldr	r2, [pc, #272]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 8006034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006038:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800603e:	4b41      	ldr	r3, [pc, #260]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f023 0203 	bic.w	r2, r3, #3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	493e      	ldr	r1, [pc, #248]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 800604c:	4313      	orrs	r3, r2
 800604e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006050:	f7fd fa2e 	bl	80034b0 <HAL_GetTick>
 8006054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006056:	e00a      	b.n	800606e <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006058:	f7fd fa2a 	bl	80034b0 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	f241 3288 	movw	r2, #5000	; 0x1388
 8006066:	4293      	cmp	r3, r2
 8006068:	d901      	bls.n	800606e <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e063      	b.n	8006136 <HAL_RCC_ClockConfig+0x222>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800606e:	4b35      	ldr	r3, [pc, #212]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 020c 	and.w	r2, r3, #12
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	429a      	cmp	r2, r3
 800607e:	d1eb      	bne.n	8006058 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800608c:	4b2d      	ldr	r3, [pc, #180]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	492a      	ldr	r1, [pc, #168]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 800609a:	4313      	orrs	r3, r2
 800609c:	608b      	str	r3, [r1, #8]
 800609e:	e008      	b.n	80060b2 <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2b80      	cmp	r3, #128	; 0x80
 80060a4:	d105      	bne.n	80060b2 <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060a6:	4b27      	ldr	r3, [pc, #156]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	4a26      	ldr	r2, [pc, #152]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 80060ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060b2:	4b23      	ldr	r3, [pc, #140]	; (8006140 <HAL_RCC_ClockConfig+0x22c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d210      	bcs.n	80060e2 <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c0:	4b1f      	ldr	r3, [pc, #124]	; (8006140 <HAL_RCC_ClockConfig+0x22c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f023 020f 	bic.w	r2, r3, #15
 80060c8:	491d      	ldr	r1, [pc, #116]	; (8006140 <HAL_RCC_ClockConfig+0x22c>)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d0:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <HAL_RCC_ClockConfig+0x22c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d001      	beq.n	80060e2 <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e029      	b.n	8006136 <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0304 	and.w	r3, r3, #4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d008      	beq.n	8006100 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ee:	4b15      	ldr	r3, [pc, #84]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	4912      	ldr	r1, [pc, #72]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d009      	beq.n	8006120 <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800610c:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	490a      	ldr	r1, [pc, #40]	; (8006144 <HAL_RCC_ClockConfig+0x230>)
 800611c:	4313      	orrs	r3, r2
 800611e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006120:	f000 f8b6 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 8006124:	4603      	mov	r3, r0
 8006126:	4a09      	ldr	r2, [pc, #36]	; (800614c <HAL_RCC_ClockConfig+0x238>)
 8006128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800612a:	4b09      	ldr	r3, [pc, #36]	; (8006150 <HAL_RCC_ClockConfig+0x23c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f7fd f96e 	bl	8003410 <HAL_InitTick>
 8006134:	4603      	mov	r3, r0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	40022000 	.word	0x40022000
 8006144:	40021000 	.word	0x40021000
 8006148:	04c4b400 	.word	0x04c4b400
 800614c:	20000000 	.word	0x20000000
 8006150:	20000004 	.word	0x20000004

08006154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006154:	b480      	push	{r7}
 8006156:	b089      	sub	sp, #36	; 0x24
 8006158:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	2300      	movs	r3, #0
 8006160:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006162:	4b47      	ldr	r3, [pc, #284]	; (8006280 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 030c 	and.w	r3, r3, #12
 800616a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800616c:	4b44      	ldr	r3, [pc, #272]	; (8006280 <HAL_RCC_GetSysClockFreq+0x12c>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0303 	and.w	r3, r3, #3
 8006174:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <HAL_RCC_GetSysClockFreq+0x34>
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2b0c      	cmp	r3, #12
 8006180:	d121      	bne.n	80061c6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d11e      	bne.n	80061c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006188:	4b3d      	ldr	r3, [pc, #244]	; (8006280 <HAL_RCC_GetSysClockFreq+0x12c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	2b00      	cmp	r3, #0
 8006192:	d107      	bne.n	80061a4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006194:	4b3a      	ldr	r3, [pc, #232]	; (8006280 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800619a:	0a1b      	lsrs	r3, r3, #8
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	61fb      	str	r3, [r7, #28]
 80061a2:	e005      	b.n	80061b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061a4:	4b36      	ldr	r3, [pc, #216]	; (8006280 <HAL_RCC_GetSysClockFreq+0x12c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	091b      	lsrs	r3, r3, #4
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80061b0:	4a34      	ldr	r2, [pc, #208]	; (8006284 <HAL_RCC_GetSysClockFreq+0x130>)
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10d      	bne.n	80061dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80061c4:	e00a      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d102      	bne.n	80061d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061cc:	4b2e      	ldr	r3, [pc, #184]	; (8006288 <HAL_RCC_GetSysClockFreq+0x134>)
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	e004      	b.n	80061dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d101      	bne.n	80061dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061d8:	4b2c      	ldr	r3, [pc, #176]	; (800628c <HAL_RCC_GetSysClockFreq+0x138>)
 80061da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b0c      	cmp	r3, #12
 80061e0:	d146      	bne.n	8006270 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80061e2:	4b27      	ldr	r3, [pc, #156]	; (8006280 <HAL_RCC_GetSysClockFreq+0x12c>)
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061ec:	4b24      	ldr	r3, [pc, #144]	; (8006280 <HAL_RCC_GetSysClockFreq+0x12c>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	091b      	lsrs	r3, r3, #4
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	3301      	adds	r3, #1
 80061f8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d003      	beq.n	8006208 <HAL_RCC_GetSysClockFreq+0xb4>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b03      	cmp	r3, #3
 8006204:	d00d      	beq.n	8006222 <HAL_RCC_GetSysClockFreq+0xce>
 8006206:	e019      	b.n	800623c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006208:	4a1f      	ldr	r2, [pc, #124]	; (8006288 <HAL_RCC_GetSysClockFreq+0x134>)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	4a1b      	ldr	r2, [pc, #108]	; (8006280 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006212:	68d2      	ldr	r2, [r2, #12]
 8006214:	0a12      	lsrs	r2, r2, #8
 8006216:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800621a:	fb02 f303 	mul.w	r3, r2, r3
 800621e:	617b      	str	r3, [r7, #20]
        break;
 8006220:	e019      	b.n	8006256 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006222:	4a1a      	ldr	r2, [pc, #104]	; (800628c <HAL_RCC_GetSysClockFreq+0x138>)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	fbb2 f3f3 	udiv	r3, r2, r3
 800622a:	4a15      	ldr	r2, [pc, #84]	; (8006280 <HAL_RCC_GetSysClockFreq+0x12c>)
 800622c:	68d2      	ldr	r2, [r2, #12]
 800622e:	0a12      	lsrs	r2, r2, #8
 8006230:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006234:	fb02 f303 	mul.w	r3, r2, r3
 8006238:	617b      	str	r3, [r7, #20]
        break;
 800623a:	e00c      	b.n	8006256 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	fbb2 f3f3 	udiv	r3, r2, r3
 8006244:	4a0e      	ldr	r2, [pc, #56]	; (8006280 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006246:	68d2      	ldr	r2, [r2, #12]
 8006248:	0a12      	lsrs	r2, r2, #8
 800624a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800624e:	fb02 f303 	mul.w	r3, r2, r3
 8006252:	617b      	str	r3, [r7, #20]
        break;
 8006254:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8006256:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	0e5b      	lsrs	r3, r3, #25
 800625c:	f003 0303 	and.w	r3, r3, #3
 8006260:	3301      	adds	r3, #1
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	fbb2 f3f3 	udiv	r3, r2, r3
 800626e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006270:	69bb      	ldr	r3, [r7, #24]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3724      	adds	r7, #36	; 0x24
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40021000 	.word	0x40021000
 8006284:	0800d4f8 	.word	0x0800d4f8
 8006288:	00f42400 	.word	0x00f42400
 800628c:	007a1200 	.word	0x007a1200

08006290 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8006294:	f7ff ff5e 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 8006298:	4602      	mov	r2, r0
 800629a:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <HAL_RCC_GetHCLKFreq+0x20>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	091b      	lsrs	r3, r3, #4
 80062a0:	f003 030f 	and.w	r3, r3, #15
 80062a4:	4903      	ldr	r1, [pc, #12]	; (80062b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80062a6:	5ccb      	ldrb	r3, [r1, r3]
 80062a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40021000 	.word	0x40021000
 80062b4:	0800d4e0 	.word	0x0800d4e0

080062b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062bc:	f7ff ffe8 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 80062c0:	4602      	mov	r2, r0
 80062c2:	4b05      	ldr	r3, [pc, #20]	; (80062d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	0a1b      	lsrs	r3, r3, #8
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	4903      	ldr	r1, [pc, #12]	; (80062dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ce:	5ccb      	ldrb	r3, [r1, r3]
 80062d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	40021000 	.word	0x40021000
 80062dc:	0800d4f0 	.word	0x0800d4f0

080062e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062e4:	f7ff ffd4 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 80062e8:	4602      	mov	r2, r0
 80062ea:	4b05      	ldr	r3, [pc, #20]	; (8006300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	0adb      	lsrs	r3, r3, #11
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	4903      	ldr	r1, [pc, #12]	; (8006304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062f6:	5ccb      	ldrb	r3, [r1, r3]
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40021000 	.word	0x40021000
 8006304:	0800d4f0 	.word	0x0800d4f0

08006308 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006314:	4b2c      	ldr	r3, [pc, #176]	; (80063c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006320:	f7ff f8f8 	bl	8005514 <HAL_PWREx_GetVoltageRange>
 8006324:	6138      	str	r0, [r7, #16]
 8006326:	e014      	b.n	8006352 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006328:	4b27      	ldr	r3, [pc, #156]	; (80063c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800632a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632c:	4a26      	ldr	r2, [pc, #152]	; (80063c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800632e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006332:	6593      	str	r3, [r2, #88]	; 0x58
 8006334:	4b24      	ldr	r3, [pc, #144]	; (80063c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006340:	f7ff f8e8 	bl	8005514 <HAL_PWREx_GetVoltageRange>
 8006344:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006346:	4b20      	ldr	r3, [pc, #128]	; (80063c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634a:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800634c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006350:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800635e:	d10b      	bne.n	8006378 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b80      	cmp	r3, #128	; 0x80
 8006364:	d919      	bls.n	800639a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2ba0      	cmp	r3, #160	; 0xa0
 800636a:	d902      	bls.n	8006372 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800636c:	2302      	movs	r3, #2
 800636e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8006370:	e013      	b.n	800639a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006372:	2301      	movs	r3, #1
 8006374:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8006376:	e010      	b.n	800639a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b80      	cmp	r3, #128	; 0x80
 800637c:	d902      	bls.n	8006384 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800637e:	2303      	movs	r3, #3
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	e00a      	b.n	800639a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b80      	cmp	r3, #128	; 0x80
 8006388:	d102      	bne.n	8006390 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800638a:	2302      	movs	r3, #2
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e004      	b.n	800639a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b70      	cmp	r3, #112	; 0x70
 8006394:	d101      	bne.n	800639a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006396:	2301      	movs	r3, #1
 8006398:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800639a:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f023 020f 	bic.w	r2, r3, #15
 80063a2:	490a      	ldr	r1, [pc, #40]	; (80063cc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80063aa:	4b08      	ldr	r3, [pc, #32]	; (80063cc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d001      	beq.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e000      	b.n	80063be <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40021000 	.word	0x40021000
 80063cc:	40022000 	.word	0x40022000

080063d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80063da:	4b36      	ldr	r3, [pc, #216]	; (80064b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d118      	bne.n	8006418 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80063e6:	4b33      	ldr	r3, [pc, #204]	; (80064b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d107      	bne.n	8006402 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80063f2:	4b30      	ldr	r3, [pc, #192]	; (80064b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80063f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063f8:	0a1b      	lsrs	r3, r3, #8
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	e005      	b.n	800640e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006402:	4b2c      	ldr	r3, [pc, #176]	; (80064b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	091b      	lsrs	r3, r3, #4
 8006408:	f003 030f 	and.w	r3, r3, #15
 800640c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800640e:	4a2a      	ldr	r2, [pc, #168]	; (80064b8 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006416:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006418:	4b26      	ldr	r3, [pc, #152]	; (80064b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006422:	4b24      	ldr	r3, [pc, #144]	; (80064b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	091b      	lsrs	r3, r3, #4
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	3301      	adds	r3, #1
 800642e:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d003      	beq.n	800643e <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b03      	cmp	r3, #3
 800643a:	d00d      	beq.n	8006458 <RCC_GetSysClockFreqFromPLLSource+0x88>
 800643c:	e019      	b.n	8006472 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800643e:	4a1f      	ldr	r2, [pc, #124]	; (80064bc <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	fbb2 f3f3 	udiv	r3, r2, r3
 8006446:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8006448:	68d2      	ldr	r2, [r2, #12]
 800644a:	0a12      	lsrs	r2, r2, #8
 800644c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006450:	fb02 f303 	mul.w	r3, r2, r3
 8006454:	613b      	str	r3, [r7, #16]
      break;
 8006456:	e019      	b.n	800648c <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006458:	4a19      	ldr	r2, [pc, #100]	; (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006460:	4a14      	ldr	r2, [pc, #80]	; (80064b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8006462:	68d2      	ldr	r2, [r2, #12]
 8006464:	0a12      	lsrs	r2, r2, #8
 8006466:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800646a:	fb02 f303 	mul.w	r3, r2, r3
 800646e:	613b      	str	r3, [r7, #16]
      break;
 8006470:	e00c      	b.n	800648c <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	fbb2 f3f3 	udiv	r3, r2, r3
 800647a:	4a0e      	ldr	r2, [pc, #56]	; (80064b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800647c:	68d2      	ldr	r2, [r2, #12]
 800647e:	0a12      	lsrs	r2, r2, #8
 8006480:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006484:	fb02 f303 	mul.w	r3, r2, r3
 8006488:	613b      	str	r3, [r7, #16]
      break;
 800648a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800648c:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	0e5b      	lsrs	r3, r3, #25
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	3301      	adds	r3, #1
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80064a6:	683b      	ldr	r3, [r7, #0]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	40021000 	.word	0x40021000
 80064b8:	0800d4f8 	.word	0x0800d4f8
 80064bc:	00f42400 	.word	0x00f42400
 80064c0:	007a1200 	.word	0x007a1200

080064c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064cc:	2300      	movs	r3, #0
 80064ce:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064d0:	2300      	movs	r3, #0
 80064d2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d040      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e4:	2b80      	cmp	r3, #128	; 0x80
 80064e6:	d02a      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80064e8:	2b80      	cmp	r3, #128	; 0x80
 80064ea:	d825      	bhi.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80064ec:	2b60      	cmp	r3, #96	; 0x60
 80064ee:	d026      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80064f0:	2b60      	cmp	r3, #96	; 0x60
 80064f2:	d821      	bhi.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d006      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d81d      	bhi.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006500:	2b20      	cmp	r3, #32
 8006502:	d010      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006504:	e018      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006506:	4b87      	ldr	r3, [pc, #540]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	4a86      	ldr	r2, [pc, #536]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800650c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006510:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006512:	e015      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3304      	adds	r3, #4
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f001 faf6 	bl	8007b0c <RCCEx_PLLSAI1_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006524:	e00c      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3320      	adds	r3, #32
 800652a:	2100      	movs	r1, #0
 800652c:	4618      	mov	r0, r3
 800652e:	f001 fbc3 	bl	8007cb8 <RCCEx_PLLSAI2_Config>
 8006532:	4603      	mov	r3, r0
 8006534:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006536:	e003      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	77fb      	strb	r3, [r7, #31]
        break;
 800653c:	e000      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800653e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006540:	7ffb      	ldrb	r3, [r7, #31]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10b      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006546:	4b77      	ldr	r3, [pc, #476]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006548:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800654c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006554:	4973      	ldr	r1, [pc, #460]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800655c:	e001      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655e:	7ffb      	ldrb	r3, [r7, #31]
 8006560:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d047      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006576:	d030      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657c:	d82a      	bhi.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800657e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006582:	d02a      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006588:	d824      	bhi.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800658a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800658e:	d008      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006594:	d81e      	bhi.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800659a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800659e:	d010      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80065a0:	e018      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065a2:	4b60      	ldr	r3, [pc, #384]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	4a5f      	ldr	r2, [pc, #380]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ac:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80065ae:	e015      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3304      	adds	r3, #4
 80065b4:	2100      	movs	r1, #0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f001 faa8 	bl	8007b0c <RCCEx_PLLSAI1_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80065c0:	e00c      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3320      	adds	r3, #32
 80065c6:	2100      	movs	r1, #0
 80065c8:	4618      	mov	r0, r3
 80065ca:	f001 fb75 	bl	8007cb8 <RCCEx_PLLSAI2_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80065d2:	e003      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	77fb      	strb	r3, [r7, #31]
        break;
 80065d8:	e000      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80065da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065dc:	7ffb      	ldrb	r3, [r7, #31]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10b      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80065e2:	4b50      	ldr	r3, [pc, #320]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f0:	494c      	ldr	r1, [pc, #304]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80065f8:	e001      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fa:	7ffb      	ldrb	r3, [r7, #31]
 80065fc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 809b 	beq.w	8006742 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800660c:	2300      	movs	r3, #0
 800660e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006610:	4b44      	ldr	r3, [pc, #272]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10d      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800661c:	4b41      	ldr	r3, [pc, #260]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800661e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006620:	4a40      	ldr	r2, [pc, #256]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006626:	6593      	str	r3, [r2, #88]	; 0x58
 8006628:	4b3e      	ldr	r3, [pc, #248]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800662a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006634:	2301      	movs	r3, #1
 8006636:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006638:	4b3b      	ldr	r3, [pc, #236]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a3a      	ldr	r2, [pc, #232]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800663e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006644:	f7fc ff34 	bl	80034b0 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800664a:	e009      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800664c:	f7fc ff30 	bl	80034b0 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d902      	bls.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	77fb      	strb	r3, [r7, #31]
        break;
 800665e:	e005      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006660:	4b31      	ldr	r3, [pc, #196]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0ef      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if (ret == HAL_OK)
 800666c:	7ffb      	ldrb	r3, [r7, #31]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d15c      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006672:	4b2c      	ldr	r3, [pc, #176]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800667c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01f      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	429a      	cmp	r2, r3
 800668e:	d019      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006690:	4b24      	ldr	r3, [pc, #144]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800669c:	4b21      	ldr	r3, [pc, #132]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800669e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a2:	4a20      	ldr	r2, [pc, #128]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066ac:	4b1d      	ldr	r3, [pc, #116]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b2:	4a1c      	ldr	r2, [pc, #112]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066bc:	4a19      	ldr	r2, [pc, #100]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d016      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ce:	f7fc feef 	bl	80034b0 <HAL_GetTick>
 80066d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066d4:	e00b      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066d6:	f7fc feeb 	bl	80034b0 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d902      	bls.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	77fb      	strb	r3, [r7, #31]
            break;
 80066ec:	e006      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ee:	4b0d      	ldr	r3, [pc, #52]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0ec      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if (ret == HAL_OK)
 80066fc:	7ffb      	ldrb	r3, [r7, #31]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10c      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006702:	4b08      	ldr	r3, [pc, #32]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006712:	4904      	ldr	r1, [pc, #16]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800671a:	e009      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800671c:	7ffb      	ldrb	r3, [r7, #31]
 800671e:	77bb      	strb	r3, [r7, #30]
 8006720:	e006      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006722:	bf00      	nop
 8006724:	40021000 	.word	0x40021000
 8006728:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672c:	7ffb      	ldrb	r3, [r7, #31]
 800672e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006730:	7dfb      	ldrb	r3, [r7, #23]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d105      	bne.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006736:	4baf      	ldr	r3, [pc, #700]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673a:	4aae      	ldr	r2, [pc, #696]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800673c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006740:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800674e:	4ba9      	ldr	r3, [pc, #676]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006754:	f023 0203 	bic.w	r2, r3, #3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675c:	49a5      	ldr	r1, [pc, #660]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800675e:	4313      	orrs	r3, r2
 8006760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006770:	4ba0      	ldr	r3, [pc, #640]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006776:	f023 020c 	bic.w	r2, r3, #12
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677e:	499d      	ldr	r1, [pc, #628]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0304 	and.w	r3, r3, #4
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006792:	4b98      	ldr	r3, [pc, #608]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006798:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a0:	4994      	ldr	r1, [pc, #592]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067b4:	4b8f      	ldr	r3, [pc, #572]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	498c      	ldr	r1, [pc, #560]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0310 	and.w	r3, r3, #16
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067d6:	4b87      	ldr	r3, [pc, #540]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e4:	4983      	ldr	r1, [pc, #524]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067f8:	4b7e      	ldr	r3, [pc, #504]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80067fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006806:	497b      	ldr	r1, [pc, #492]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006808:	4313      	orrs	r3, r2
 800680a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800681a:	4b76      	ldr	r3, [pc, #472]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800681c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006828:	4972      	ldr	r1, [pc, #456]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00a      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800683c:	4b6d      	ldr	r3, [pc, #436]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684a:	496a      	ldr	r1, [pc, #424]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800685e:	4b65      	ldr	r3, [pc, #404]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006864:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800686c:	4961      	ldr	r1, [pc, #388]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d031      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006888:	d00e      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800688a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800688e:	d814      	bhi.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d015      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006898:	d10f      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800689a:	4b56      	ldr	r3, [pc, #344]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	4a55      	ldr	r2, [pc, #340]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80068a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068a4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80068a6:	e00c      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	2100      	movs	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f001 f92c 	bl	8007b0c <RCCEx_PLLSAI1_Config>
 80068b4:	4603      	mov	r3, r0
 80068b6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80068b8:	e003      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>

      default:
        ret = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	77fb      	strb	r3, [r7, #31]
        break;
 80068be:	e000      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        break;
 80068c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c2:	7ffb      	ldrb	r3, [r7, #31]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10b      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80068c8:	4b4a      	ldr	r3, [pc, #296]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80068ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068d6:	4947      	ldr	r1, [pc, #284]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80068de:	e001      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x420>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e0:	7ffb      	ldrb	r3, [r7, #31]
 80068e2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00a      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068f0:	4b40      	ldr	r3, [pc, #256]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80068f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fe:	493d      	ldr	r1, [pc, #244]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006900:	4313      	orrs	r3, r2
 8006902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00a      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006912:	4b38      	ldr	r3, [pc, #224]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006918:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006920:	4934      	ldr	r1, [pc, #208]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006922:	4313      	orrs	r3, r2
 8006924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00a      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x486>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006934:	4b2f      	ldr	r3, [pc, #188]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	492c      	ldr	r1, [pc, #176]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006944:	4313      	orrs	r3, r2
 8006946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00a      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006956:	4b27      	ldr	r3, [pc, #156]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006958:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800695c:	f023 0203 	bic.w	r2, r3, #3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006964:	4923      	ldr	r1, [pc, #140]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006966:	4313      	orrs	r3, r2
 8006968:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d028      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006978:	4b1e      	ldr	r3, [pc, #120]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800697a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006986:	491b      	ldr	r1, [pc, #108]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006988:	4313      	orrs	r3, r2
 800698a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006996:	d106      	bne.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006998:	4b16      	ldr	r3, [pc, #88]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	4a15      	ldr	r2, [pc, #84]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800699e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069a2:	60d3      	str	r3, [r2, #12]
 80069a4:	e011      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069ae:	d10c      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x506>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3304      	adds	r3, #4
 80069b4:	2101      	movs	r1, #1
 80069b6:	4618      	mov	r0, r3
 80069b8:	f001 f8a8 	bl	8007b0c <RCCEx_PLLSAI1_Config>
 80069bc:	4603      	mov	r3, r0
 80069be:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80069c0:	7ffb      	ldrb	r3, [r7, #31]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x506>
        {
          /* set overall return value */
          status = ret;
 80069c6:	7ffb      	ldrb	r3, [r7, #31]
 80069c8:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d04d      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069de:	d10b      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80069e0:	4b04      	ldr	r3, [pc, #16]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80069e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069e6:	4a03      	ldr	r2, [pc, #12]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80069e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80069f0:	e015      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80069f2:	bf00      	nop
 80069f4:	40021000 	.word	0x40021000
 80069f8:	4b6b      	ldr	r3, [pc, #428]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80069fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a06:	4968      	ldr	r1, [pc, #416]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006a0e:	4b66      	ldr	r3, [pc, #408]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a14:	4a64      	ldr	r2, [pc, #400]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a1a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a26:	d10d      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 f86c 	bl	8007b0c <RCCEx_PLLSAI1_Config>
 8006a34:	4603      	mov	r3, r0
 8006a36:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006a38:	7ffb      	ldrb	r3, [r7, #31]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d019      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      {
        /* set overall return value */
        status = ret;
 8006a3e:	7ffb      	ldrb	r3, [r7, #31]
 8006a40:	77bb      	strb	r3, [r7, #30]
 8006a42:	e016      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a4c:	d106      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a4e:	4b56      	ldr	r3, [pc, #344]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	4a55      	ldr	r2, [pc, #340]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a58:	60d3      	str	r3, [r2, #12]
 8006a5a:	e00a      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a64:	d105      	bne.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a66:	4b50      	ldr	r3, [pc, #320]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	4a4f      	ldr	r2, [pc, #316]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a70:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d028      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a7e:	4b4a      	ldr	r3, [pc, #296]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a8c:	4946      	ldr	r1, [pc, #280]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a9c:	d106      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a9e:	4b42      	ldr	r3, [pc, #264]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	4a41      	ldr	r2, [pc, #260]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006aa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aa8:	60d3      	str	r3, [r2, #12]
 8006aaa:	e011      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ab4:	d10c      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	2101      	movs	r1, #1
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 f825 	bl	8007b0c <RCCEx_PLLSAI1_Config>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006ac6:	7ffb      	ldrb	r3, [r7, #31]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
      {
        /* set overall return value */
        status = ret;
 8006acc:	7ffb      	ldrb	r3, [r7, #31]
 8006ace:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01e      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006adc:	4b32      	ldr	r3, [pc, #200]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aec:	492e      	ldr	r1, [pc, #184]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006afe:	d10c      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x656>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3304      	adds	r3, #4
 8006b04:	2102      	movs	r1, #2
 8006b06:	4618      	mov	r0, r3
 8006b08:	f001 f800 	bl	8007b0c <RCCEx_PLLSAI1_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006b10:	7ffb      	ldrb	r3, [r7, #31]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x656>
      {
        /* set overall return value */
        status = ret;
 8006b16:	7ffb      	ldrb	r3, [r7, #31]
 8006b18:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00b      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x67a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b26:	4b20      	ldr	r3, [pc, #128]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006b28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b2c:	f023 0204 	bic.w	r2, r3, #4
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b36:	491c      	ldr	r1, [pc, #112]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00b      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x69e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006b4a:	4b17      	ldr	r3, [pc, #92]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b50:	f023 0218 	bic.w	r2, r3, #24
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5a:	4913      	ldr	r1, [pc, #76]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d017      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x6da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006b6e:	4b0e      	ldr	r3, [pc, #56]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b7e:	490a      	ldr	r1, [pc, #40]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b90:	d105      	bne.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b92:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	4a04      	ldr	r2, [pc, #16]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8006b98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b9c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006b9e:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3720      	adds	r7, #32
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40021000 	.word	0x40021000

08006bac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b088      	sub	sp, #32
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bbe:	d13e      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006bc0:	4bc2      	ldr	r3, [pc, #776]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bca:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bd2:	d028      	beq.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bda:	f200 8774 	bhi.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xf1a>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be4:	d005      	beq.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bec:	d00e      	beq.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8006bee:	f000 bf6a 	b.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xf1a>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006bf2:	4bb6      	ldr	r3, [pc, #728]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	f040 8764 	bne.w	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0xf1e>
          frequency = LSE_VALUE;
 8006c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c06:	61fb      	str	r3, [r7, #28]
        break;
 8006c08:	f000 bf5f 	b.w	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0xf1e>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006c0c:	4baf      	ldr	r3, [pc, #700]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8006c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	f040 8759 	bne.w	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
          frequency = LSI_VALUE;
 8006c1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006c20:	61fb      	str	r3, [r7, #28]
        break;
 8006c22:	f000 bf54 	b.w	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c26:	4ba9      	ldr	r3, [pc, #676]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c32:	f040 874e 	bne.w	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xf26>
          frequency = HSE_VALUE / 32U;
 8006c36:	4ba6      	ldr	r3, [pc, #664]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
 8006c38:	61fb      	str	r3, [r7, #28]
        break;
 8006c3a:	f000 bf4a 	b.w	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xf26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c3e:	4ba3      	ldr	r3, [pc, #652]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f003 0303 	and.w	r3, r3, #3
 8006c46:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d036      	beq.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d840      	bhi.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d003      	beq.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d020      	beq.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006c60:	e039      	b.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006c62:	4b9a      	ldr	r3, [pc, #616]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d116      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006c6e:	4b97      	ldr	r3, [pc, #604]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0308 	and.w	r3, r3, #8
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006c7a:	4b94      	ldr	r3, [pc, #592]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	091b      	lsrs	r3, r3, #4
 8006c80:	f003 030f 	and.w	r3, r3, #15
 8006c84:	e005      	b.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006c86:	4b91      	ldr	r3, [pc, #580]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8006c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c8c:	0a1b      	lsrs	r3, r3, #8
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	4a90      	ldr	r2, [pc, #576]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c98:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8006c9a:	e01f      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
          pllvco = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	61bb      	str	r3, [r7, #24]
        break;
 8006ca0:	e01c      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ca2:	4b8a      	ldr	r3, [pc, #552]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cae:	d102      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 8006cb0:	4b89      	ldr	r3, [pc, #548]	; (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8006cb2:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8006cb4:	e012      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
          pllvco = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61bb      	str	r3, [r7, #24]
        break;
 8006cba:	e00f      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006cbc:	4b83      	ldr	r3, [pc, #524]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cc8:	d102      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 8006cca:	4b84      	ldr	r3, [pc, #528]	; (8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8006ccc:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8006cce:	e005      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
          pllvco = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	61bb      	str	r3, [r7, #24]
        break;
 8006cd4:	e002      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      default:
        /* No source */
        pllvco = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]
        break;
 8006cda:	bf00      	nop
    }

    switch (PeriphClk)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ce2:	f000 865e 	beq.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cec:	f200 86f3 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cf6:	f000 860a 	beq.w	800790e <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d00:	f200 86e9 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d0a:	f000 8472 	beq.w	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d14:	f200 86df 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d1e:	f000 8539 	beq.w	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d28:	f200 86d5 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d32:	f000 8189 	beq.w	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d3c:	f200 86cb 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d46:	f000 80cb 	beq.w	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d50:	f200 86c1 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d5a:	f000 8439 	beq.w	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d64:	f200 86b7 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d6e:	f000 83f1 	beq.w	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d78:	f200 86ad 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d82:	f000 80ad 	beq.w	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d8c:	f200 86a3 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d96:	f000 8091 	beq.w	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da0:	f200 8699 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006daa:	d07f      	beq.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006db2:	f200 8690 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dbc:	f000 855d 	beq.w	800787a <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc6:	f200 8686 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd0:	f000 8509 	beq.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dda:	f200 867c 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de4:	f000 84aa 	beq.w	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dee:	f200 8672 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b80      	cmp	r3, #128	; 0x80
 8006df6:	f000 846f 	beq.w	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b80      	cmp	r3, #128	; 0x80
 8006dfe:	f200 866a 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d84b      	bhi.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 8663 	beq.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	2b1f      	cmp	r3, #31
 8006e16:	f200 865e 	bhi.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
 8006e1a:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e20:	0800724b 	.word	0x0800724b
 8006e24:	080072c1 	.word	0x080072c1
 8006e28:	08007ad7 	.word	0x08007ad7
 8006e2c:	08007353 	.word	0x08007353
 8006e30:	08007ad7 	.word	0x08007ad7
 8006e34:	08007ad7 	.word	0x08007ad7
 8006e38:	08007ad7 	.word	0x08007ad7
 8006e3c:	080073cb 	.word	0x080073cb
 8006e40:	08007ad7 	.word	0x08007ad7
 8006e44:	08007ad7 	.word	0x08007ad7
 8006e48:	08007ad7 	.word	0x08007ad7
 8006e4c:	08007ad7 	.word	0x08007ad7
 8006e50:	08007ad7 	.word	0x08007ad7
 8006e54:	08007ad7 	.word	0x08007ad7
 8006e58:	08007ad7 	.word	0x08007ad7
 8006e5c:	08007443 	.word	0x08007443
 8006e60:	08007ad7 	.word	0x08007ad7
 8006e64:	08007ad7 	.word	0x08007ad7
 8006e68:	08007ad7 	.word	0x08007ad7
 8006e6c:	08007ad7 	.word	0x08007ad7
 8006e70:	08007ad7 	.word	0x08007ad7
 8006e74:	08007ad7 	.word	0x08007ad7
 8006e78:	08007ad7 	.word	0x08007ad7
 8006e7c:	08007ad7 	.word	0x08007ad7
 8006e80:	08007ad7 	.word	0x08007ad7
 8006e84:	08007ad7 	.word	0x08007ad7
 8006e88:	08007ad7 	.word	0x08007ad7
 8006e8c:	08007ad7 	.word	0x08007ad7
 8006e90:	08007ad7 	.word	0x08007ad7
 8006e94:	08007ad7 	.word	0x08007ad7
 8006e98:	08007ad7 	.word	0x08007ad7
 8006e9c:	080074d3 	.word	0x080074d3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b40      	cmp	r3, #64	; 0x40
 8006ea4:	f000 83ec 	beq.w	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 8006ea8:	f000 be15 	b.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006eac:	69b9      	ldr	r1, [r7, #24]
 8006eae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006eb2:	f001 f851 	bl	8007f58 <RCCEx_GetSAIxPeriphCLKFreq>
 8006eb6:	61f8      	str	r0, [r7, #28]
        break;
 8006eb8:	f000 be10 	b.w	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006ebc:	69b9      	ldr	r1, [r7, #24]
 8006ebe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006ec2:	f001 f849 	bl	8007f58 <RCCEx_GetSAIxPeriphCLKFreq>
 8006ec6:	61f8      	str	r0, [r7, #28]
        break;
 8006ec8:	f000 be08 	b.w	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8006ecc:	40021000 	.word	0x40021000
 8006ed0:	0003d090 	.word	0x0003d090
 8006ed4:	0800d4f8 	.word	0x0800d4f8
 8006ed8:	00f42400 	.word	0x00f42400
 8006edc:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8006ee0:	4bb2      	ldr	r3, [pc, #712]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8006ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006ef2:	d015      	beq.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006efa:	f200 8096 	bhi.w	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f04:	d02a      	beq.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f0c:	f200 808d 	bhi.w	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d07f      	beq.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f1c:	d04b      	beq.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
            break;
 8006f1e:	e084      	b.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006f20:	4ba2      	ldr	r3, [pc, #648]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	f040 8081 	bne.w	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006f2e:	4b9f      	ldr	r3, [pc, #636]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0308 	and.w	r3, r3, #8
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d005      	beq.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8006f3a:	4b9c      	ldr	r3, [pc, #624]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	091b      	lsrs	r3, r3, #4
 8006f40:	f003 030f 	and.w	r3, r3, #15
 8006f44:	e005      	b.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8006f46:	4b99      	ldr	r3, [pc, #612]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8006f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f4c:	0a1b      	lsrs	r3, r3, #8
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	4a97      	ldr	r2, [pc, #604]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f58:	61fb      	str	r3, [r7, #28]
            break;
 8006f5a:	e069      	b.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006f5c:	4b93      	ldr	r3, [pc, #588]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f68:	d165      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006f6a:	4b90      	ldr	r3, [pc, #576]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f76:	d15e      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006f78:	4b8c      	ldr	r3, [pc, #560]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	091b      	lsrs	r3, r3, #4
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	3301      	adds	r3, #1
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8a:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006f8c:	4b87      	ldr	r3, [pc, #540]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	0a1b      	lsrs	r3, r3, #8
 8006f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f96:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	fb02 f203 	mul.w	r2, r2, r3
 8006fa0:	4b82      	ldr	r3, [pc, #520]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	0d5b      	lsrs	r3, r3, #21
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	3301      	adds	r3, #1
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb2:	61fb      	str	r3, [r7, #28]
            break;
 8006fb4:	e03f      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006fb6:	4b7d      	ldr	r3, [pc, #500]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fc2:	d13b      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006fc4:	4b79      	ldr	r3, [pc, #484]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fd0:	d134      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8006fd2:	f000 ff0d 	bl	8007df0 <RCCEx_PLLSAI1_GetVCOFreq>
 8006fd6:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006fd8:	4b74      	ldr	r3, [pc, #464]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fea:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006fec:	4b6f      	ldr	r3, [pc, #444]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	0a1b      	lsrs	r3, r3, #8
 8006ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff6:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	fb02 f203 	mul.w	r2, r2, r3
 8007000:	4b6a      	ldr	r3, [pc, #424]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	0d5b      	lsrs	r3, r3, #21
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	3301      	adds	r3, #1
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007012:	61fb      	str	r3, [r7, #28]
            break;
 8007014:	e012      	b.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007016:	4b65      	ldr	r3, [pc, #404]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8007018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b02      	cmp	r3, #2
 8007022:	d10e      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
              frequency = HSI48_VALUE;
 8007024:	4b63      	ldr	r3, [pc, #396]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8007026:	61fb      	str	r3, [r7, #28]
            break;
 8007028:	e00b      	b.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
            break;
 800702a:	bf00      	nop
 800702c:	f000 bd56 	b.w	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 8007030:	bf00      	nop
 8007032:	f000 bd53 	b.w	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 8007036:	bf00      	nop
 8007038:	f000 bd50 	b.w	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 800703c:	bf00      	nop
 800703e:	f000 bd4d 	b.w	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 8007042:	bf00      	nop
        break;
 8007044:	f000 bd4a 	b.w	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 8007048:	4b58      	ldr	r3, [pc, #352]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800704a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800704e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007052:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007056:	d13d      	bne.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007058:	4b54      	ldr	r3, [pc, #336]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007060:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007064:	f040 8539 	bne.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8007068:	4b50      	ldr	r3, [pc, #320]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007074:	f040 8531 	bne.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007078:	4b4c      	ldr	r3, [pc, #304]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	3301      	adds	r3, #1
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	fbb2 f3f3 	udiv	r3, r2, r3
 800708a:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800708c:	4b47      	ldr	r3, [pc, #284]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	0a1b      	lsrs	r3, r3, #8
 8007092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007096:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007098:	4b44      	ldr	r3, [pc, #272]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	0edb      	lsrs	r3, r3, #27
 800709e:	f003 031f 	and.w	r3, r3, #31
 80070a2:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80070aa:	4b40      	ldr	r3, [pc, #256]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
                  pllp = 17U;
 80070b6:	2311      	movs	r3, #17
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	e001      	b.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 7U;
 80070bc:	2307      	movs	r3, #7
 80070be:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	fb02 f203 	mul.w	r2, r2, r3
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ce:	61fb      	str	r3, [r7, #28]
        break;
 80070d0:	f000 bd03 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 80070d4:	4b35      	ldr	r3, [pc, #212]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 80070d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070da:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80070e6:	d016      	beq.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80070ee:	f200 809d 	bhi.w	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070f8:	d02b      	beq.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007100:	f200 8094 	bhi.w	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 8086 	beq.w	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007112:	d051      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
              break;
 8007114:	e08a      	b.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007116:	4b25      	ldr	r3, [pc, #148]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b02      	cmp	r3, #2
 8007120:	f040 8087 	bne.w	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007124:	4b21      	ldr	r3, [pc, #132]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0308 	and.w	r3, r3, #8
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8007130:	4b1e      	ldr	r3, [pc, #120]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	091b      	lsrs	r3, r3, #4
 8007136:	f003 030f 	and.w	r3, r3, #15
 800713a:	e005      	b.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800713c:	4b1b      	ldr	r3, [pc, #108]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800713e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007142:	0a1b      	lsrs	r3, r3, #8
 8007144:	f003 030f 	and.w	r3, r3, #15
 8007148:	4a19      	ldr	r2, [pc, #100]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800714a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800714e:	61fb      	str	r3, [r7, #28]
              break;
 8007150:	e06f      	b.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007152:	4b16      	ldr	r3, [pc, #88]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800715a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800715e:	d16b      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007160:	4b12      	ldr	r3, [pc, #72]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800716c:	d164      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800716e:	4b0f      	ldr	r3, [pc, #60]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	091b      	lsrs	r3, r3, #4
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	3301      	adds	r3, #1
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007180:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007182:	4b0a      	ldr	r3, [pc, #40]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	0a1b      	lsrs	r3, r3, #8
 8007188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800718c:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	fb02 f203 	mul.w	r2, r2, r3
 8007196:	4b05      	ldr	r3, [pc, #20]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	0d5b      	lsrs	r3, r3, #21
 800719c:	f003 0303 	and.w	r3, r3, #3
 80071a0:	3301      	adds	r3, #1
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a8:	61fb      	str	r3, [r7, #28]
              break;
 80071aa:	e045      	b.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80071ac:	40021000 	.word	0x40021000
 80071b0:	0800d4f8 	.word	0x0800d4f8
 80071b4:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80071b8:	4bb1      	ldr	r3, [pc, #708]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071c4:	d13b      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80071c6:	4bae      	ldr	r3, [pc, #696]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d2:	d134      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 80071d4:	f000 fe0c 	bl	8007df0 <RCCEx_PLLSAI1_GetVCOFreq>
 80071d8:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80071da:	4ba9      	ldr	r3, [pc, #676]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	091b      	lsrs	r3, r3, #4
 80071e0:	f003 030f 	and.w	r3, r3, #15
 80071e4:	3301      	adds	r3, #1
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ec:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80071ee:	4ba4      	ldr	r3, [pc, #656]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	0a1b      	lsrs	r3, r3, #8
 80071f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f8:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	fb02 f203 	mul.w	r2, r2, r3
 8007202:	4b9f      	ldr	r3, [pc, #636]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	0d5b      	lsrs	r3, r3, #21
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	3301      	adds	r3, #1
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	fbb2 f3f3 	udiv	r3, r2, r3
 8007214:	61fb      	str	r3, [r7, #28]
              break;
 8007216:	e012      	b.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007218:	4b99      	ldr	r3, [pc, #612]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800721a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b02      	cmp	r3, #2
 8007224:	d10e      	bne.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                frequency = HSI48_VALUE;
 8007226:	4b97      	ldr	r3, [pc, #604]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
 8007228:	61fb      	str	r3, [r7, #28]
              break;
 800722a:	e00b      	b.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              break;
 800722c:	bf00      	nop
 800722e:	f000 bc54 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
              break;
 8007232:	bf00      	nop
 8007234:	f000 bc51 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
              break;
 8007238:	bf00      	nop
 800723a:	f000 bc4e 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
              break;
 800723e:	bf00      	nop
 8007240:	f000 bc4b 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
              break;
 8007244:	bf00      	nop
        break;
 8007246:	f000 bc48 	b.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800724a:	4b8d      	ldr	r3, [pc, #564]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800724c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007250:	f003 0303 	and.w	r3, r3, #3
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b03      	cmp	r3, #3
 800725a:	d828      	bhi.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800725c:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>)
 800725e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007262:	bf00      	nop
 8007264:	08007275 	.word	0x08007275
 8007268:	0800727d 	.word	0x0800727d
 800726c:	08007285 	.word	0x08007285
 8007270:	08007299 	.word	0x08007299
            frequency = HAL_RCC_GetPCLK2Freq();
 8007274:	f7ff f834 	bl	80062e0 <HAL_RCC_GetPCLK2Freq>
 8007278:	61f8      	str	r0, [r7, #28]
            break;
 800727a:	e01f      	b.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x710>
            frequency = HAL_RCC_GetSysClockFreq();
 800727c:	f7fe ff6a 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 8007280:	61f8      	str	r0, [r7, #28]
            break;
 8007282:	e01b      	b.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x710>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007284:	4b7e      	ldr	r3, [pc, #504]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800728c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007290:	d110      	bne.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
              frequency = HSI_VALUE;
 8007292:	4b7d      	ldr	r3, [pc, #500]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
 8007294:	61fb      	str	r3, [r7, #28]
            break;
 8007296:	e00d      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007298:	4b79      	ldr	r3, [pc, #484]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800729a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d109      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
              frequency = LSE_VALUE;
 80072a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072aa:	61fb      	str	r3, [r7, #28]
            break;
 80072ac:	e005      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
            break;
 80072ae:	bf00      	nop
 80072b0:	f000 bc14 	b.w	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 80072b4:	bf00      	nop
 80072b6:	f000 bc11 	b.w	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 80072ba:	bf00      	nop
        break;
 80072bc:	f000 bc0e 	b.w	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80072c0:	4b6f      	ldr	r3, [pc, #444]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 80072c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c6:	f003 030c 	and.w	r3, r3, #12
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b0c      	cmp	r3, #12
 80072d0:	d839      	bhi.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	0800730d 	.word	0x0800730d
 80072dc:	08007347 	.word	0x08007347
 80072e0:	08007347 	.word	0x08007347
 80072e4:	08007347 	.word	0x08007347
 80072e8:	08007315 	.word	0x08007315
 80072ec:	08007347 	.word	0x08007347
 80072f0:	08007347 	.word	0x08007347
 80072f4:	08007347 	.word	0x08007347
 80072f8:	0800731d 	.word	0x0800731d
 80072fc:	08007347 	.word	0x08007347
 8007300:	08007347 	.word	0x08007347
 8007304:	08007347 	.word	0x08007347
 8007308:	08007331 	.word	0x08007331
            frequency = HAL_RCC_GetPCLK1Freq();
 800730c:	f7fe ffd4 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8007310:	61f8      	str	r0, [r7, #28]
            break;
 8007312:	e01d      	b.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            frequency = HAL_RCC_GetSysClockFreq();
 8007314:	f7fe ff1e 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 8007318:	61f8      	str	r0, [r7, #28]
            break;
 800731a:	e019      	b.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800731c:	4b58      	ldr	r3, [pc, #352]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007328:	d10f      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
              frequency = HSI_VALUE;
 800732a:	4b57      	ldr	r3, [pc, #348]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
 800732c:	61fb      	str	r3, [r7, #28]
            break;
 800732e:	e00c      	b.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007330:	4b53      	ldr	r3, [pc, #332]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8007332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b02      	cmp	r3, #2
 800733c:	d107      	bne.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = LSE_VALUE;
 800733e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007342:	61fb      	str	r3, [r7, #28]
            break;
 8007344:	e003      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            break;
 8007346:	bf00      	nop
 8007348:	e3c8      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 800734a:	bf00      	nop
 800734c:	e3c6      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 800734e:	bf00      	nop
        break;
 8007350:	e3c4      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007352:	4b4b      	ldr	r3, [pc, #300]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8007354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007358:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b30      	cmp	r3, #48	; 0x30
 8007362:	d021      	beq.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b30      	cmp	r3, #48	; 0x30
 8007368:	d829      	bhi.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b20      	cmp	r3, #32
 800736e:	d011      	beq.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2b20      	cmp	r3, #32
 8007374:	d823      	bhi.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b10      	cmp	r3, #16
 8007380:	d004      	beq.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
            break;
 8007382:	e01c      	b.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007384:	f7fe ff98 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8007388:	61f8      	str	r0, [r7, #28]
            break;
 800738a:	e01d      	b.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
            frequency = HAL_RCC_GetSysClockFreq();
 800738c:	f7fe fee2 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 8007390:	61f8      	str	r0, [r7, #28]
            break;
 8007392:	e019      	b.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007394:	4b3a      	ldr	r3, [pc, #232]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800739c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073a0:	d10f      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
              frequency = HSI_VALUE;
 80073a2:	4b39      	ldr	r3, [pc, #228]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
 80073a4:	61fb      	str	r3, [r7, #28]
            break;
 80073a6:	e00c      	b.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80073a8:	4b35      	ldr	r3, [pc, #212]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 80073aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d107      	bne.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = LSE_VALUE;
 80073b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ba:	61fb      	str	r3, [r7, #28]
            break;
 80073bc:	e003      	b.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            break;
 80073be:	bf00      	nop
 80073c0:	e38c      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 80073c2:	bf00      	nop
 80073c4:	e38a      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 80073c6:	bf00      	nop
        break;
 80073c8:	e388      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80073ca:	4b2d      	ldr	r3, [pc, #180]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 80073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2bc0      	cmp	r3, #192	; 0xc0
 80073da:	d021      	beq.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2bc0      	cmp	r3, #192	; 0xc0
 80073e0:	d829      	bhi.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b80      	cmp	r3, #128	; 0x80
 80073e6:	d011      	beq.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b80      	cmp	r3, #128	; 0x80
 80073ec:	d823      	bhi.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	d004      	beq.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
            break;
 80073fa:	e01c      	b.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HAL_RCC_GetPCLK1Freq();
 80073fc:	f7fe ff5c 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8007400:	61f8      	str	r0, [r7, #28]
            break;
 8007402:	e01d      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
            frequency = HAL_RCC_GetSysClockFreq();
 8007404:	f7fe fea6 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 8007408:	61f8      	str	r0, [r7, #28]
            break;
 800740a:	e019      	b.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800740c:	4b1c      	ldr	r3, [pc, #112]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007418:	d10f      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
              frequency = HSI_VALUE;
 800741a:	4b1b      	ldr	r3, [pc, #108]	; (8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
 800741c:	61fb      	str	r3, [r7, #28]
            break;
 800741e:	e00c      	b.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007420:	4b17      	ldr	r3, [pc, #92]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8007422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b02      	cmp	r3, #2
 800742c:	d107      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
              frequency = LSE_VALUE;
 800742e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007432:	61fb      	str	r3, [r7, #28]
            break;
 8007434:	e003      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 8007436:	bf00      	nop
 8007438:	e350      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 800743a:	bf00      	nop
 800743c:	e34e      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 800743e:	bf00      	nop
        break;
 8007440:	e34c      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007442:	4b0f      	ldr	r3, [pc, #60]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8007444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007454:	d02c      	beq.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800745c:	d833      	bhi.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007464:	d01a      	beq.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800746c:	d82b      	bhi.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00b      	beq.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747a:	d00b      	beq.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 800747c:	e023      	b.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 800747e:	bf00      	nop
 8007480:	40021000 	.word	0x40021000
 8007484:	02dc6c00 	.word	0x02dc6c00
 8007488:	00f42400 	.word	0x00f42400
            frequency = HAL_RCC_GetPCLK1Freq();
 800748c:	f7fe ff14 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8007490:	61f8      	str	r0, [r7, #28]
            break;
 8007492:	e01d      	b.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            frequency = HAL_RCC_GetSysClockFreq();
 8007494:	f7fe fe5e 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 8007498:	61f8      	str	r0, [r7, #28]
            break;
 800749a:	e019      	b.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800749c:	4ba4      	ldr	r3, [pc, #656]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074a8:	d10f      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
              frequency = HSI_VALUE;
 80074aa:	4ba2      	ldr	r3, [pc, #648]	; (8007734 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>)
 80074ac:	61fb      	str	r3, [r7, #28]
            break;
 80074ae:	e00c      	b.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80074b0:	4b9f      	ldr	r3, [pc, #636]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 80074b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d107      	bne.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x922>
              frequency = LSE_VALUE;
 80074be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074c2:	61fb      	str	r3, [r7, #28]
            break;
 80074c4:	e003      	b.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            break;
 80074c6:	bf00      	nop
 80074c8:	e308      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 80074ca:	bf00      	nop
 80074cc:	e306      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 80074ce:	bf00      	nop
        break;
 80074d0:	e304      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80074d2:	4b97      	ldr	r3, [pc, #604]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 80074d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074dc:	60fb      	str	r3, [r7, #12]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074e4:	d025      	beq.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074ec:	d82c      	bhi.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074f4:	d013      	beq.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074fc:	d824      	bhi.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d004      	beq.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800750a:	d004      	beq.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
            break;
 800750c:	e01c      	b.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
            frequency = HAL_RCC_GetPCLK1Freq();
 800750e:	f7fe fed3 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8007512:	61f8      	str	r0, [r7, #28]
            break;
 8007514:	e01d      	b.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            frequency = HAL_RCC_GetSysClockFreq();
 8007516:	f7fe fe1d 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 800751a:	61f8      	str	r0, [r7, #28]
            break;
 800751c:	e019      	b.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800751e:	4b84      	ldr	r3, [pc, #528]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800752a:	d10f      	bne.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
              frequency = HSI_VALUE;
 800752c:	4b81      	ldr	r3, [pc, #516]	; (8007734 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>)
 800752e:	61fb      	str	r3, [r7, #28]
            break;
 8007530:	e00c      	b.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007532:	4b7f      	ldr	r3, [pc, #508]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 8007534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b02      	cmp	r3, #2
 800753e:	d107      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
              frequency = LSE_VALUE;
 8007540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007544:	61fb      	str	r3, [r7, #28]
            break;
 8007546:	e003      	b.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
            break;
 8007548:	bf00      	nop
 800754a:	e2c7      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 800754c:	bf00      	nop
 800754e:	e2c5      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 8007550:	bf00      	nop
        break;
 8007552:	e2c3      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007554:	4b76      	ldr	r3, [pc, #472]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 8007556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800755a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007566:	d007      	beq.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x9cc>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800756e:	d12b      	bne.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
            frequency = HAL_RCC_GetSysClockFreq();
 8007570:	f7fe fdf0 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 8007574:	61f8      	str	r0, [r7, #28]
            break;
 8007576:	e02a      	b.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8007578:	4b6d      	ldr	r3, [pc, #436]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d023      	beq.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8007584:	f000 fc34 	bl	8007df0 <RCCEx_PLLSAI1_GetVCOFreq>
 8007588:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800758a:	4b69      	ldr	r3, [pc, #420]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	091b      	lsrs	r3, r3, #4
 8007590:	f003 030f 	and.w	r3, r3, #15
 8007594:	3301      	adds	r3, #1
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	fbb2 f3f3 	udiv	r3, r2, r3
 800759c:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800759e:	4b64      	ldr	r3, [pc, #400]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	0a1b      	lsrs	r3, r3, #8
 80075a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a8:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	fb02 f203 	mul.w	r2, r2, r3
 80075b2:	4b5f      	ldr	r3, [pc, #380]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	0e5b      	lsrs	r3, r3, #25
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	3301      	adds	r3, #1
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c4:	61fb      	str	r3, [r7, #28]
            break;
 80075c6:	e001      	b.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
            break;
 80075c8:	bf00      	nop
 80075ca:	e287      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 80075cc:	bf00      	nop
        break;
 80075ce:	e285      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80075d0:	4b57      	ldr	r3, [pc, #348]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 80075d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075d6:	f003 0304 	and.w	r3, r3, #4
 80075da:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d103      	bne.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
          frequency = HAL_RCC_GetPCLK2Freq();
 80075e2:	f7fe fe7d 	bl	80062e0 <HAL_RCC_GetPCLK2Freq>
 80075e6:	61f8      	str	r0, [r7, #28]
        break;
 80075e8:	e278      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
          frequency = HAL_RCC_GetSysClockFreq();
 80075ea:	f7fe fdb3 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 80075ee:	61f8      	str	r0, [r7, #28]
        break;
 80075f0:	e274      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80075f2:	4b4f      	ldr	r3, [pc, #316]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 80075f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075f8:	f003 0318 	and.w	r3, r3, #24
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b10      	cmp	r3, #16
 8007602:	d010      	beq.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b10      	cmp	r3, #16
 8007608:	d834      	bhi.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b08      	cmp	r3, #8
 8007614:	d024      	beq.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
            break;
 8007616:	e02d      	b.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007618:	69b9      	ldr	r1, [r7, #24]
 800761a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800761e:	f000 fc9b 	bl	8007f58 <RCCEx_GetSAIxPeriphCLKFreq>
 8007622:	61f8      	str	r0, [r7, #28]
            break;
 8007624:	e02b      	b.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007626:	4b42      	ldr	r3, [pc, #264]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b02      	cmp	r3, #2
 8007630:	d122      	bne.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007632:	4b3f      	ldr	r3, [pc, #252]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0308 	and.w	r3, r3, #8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d005      	beq.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 800763e:	4b3c      	ldr	r3, [pc, #240]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	091b      	lsrs	r3, r3, #4
 8007644:	f003 030f 	and.w	r3, r3, #15
 8007648:	e005      	b.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
 800764a:	4b39      	ldr	r3, [pc, #228]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 800764c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007650:	0a1b      	lsrs	r3, r3, #8
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	4a38      	ldr	r2, [pc, #224]	; (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
 8007658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800765c:	61fb      	str	r3, [r7, #28]
            break;
 800765e:	e00b      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007660:	4b33      	ldr	r3, [pc, #204]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800766c:	d106      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
              frequency = HSI_VALUE;
 800766e:	4b31      	ldr	r3, [pc, #196]	; (8007734 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>)
 8007670:	61fb      	str	r3, [r7, #28]
            break;
 8007672:	e003      	b.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
            break;
 8007674:	bf00      	nop
 8007676:	e231      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 8007678:	bf00      	nop
 800767a:	e22f      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 800767c:	bf00      	nop
        break;
 800767e:	e22d      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007680:	4b2b      	ldr	r3, [pc, #172]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 8007682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007686:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007692:	d013      	beq.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800769a:	d819      	bhi.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d004      	beq.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a8:	d004      	beq.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            break;
 80076aa:	e011      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
            frequency = HAL_RCC_GetPCLK1Freq();
 80076ac:	f7fe fe04 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 80076b0:	61f8      	str	r0, [r7, #28]
            break;
 80076b2:	e010      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
            frequency = HAL_RCC_GetSysClockFreq();
 80076b4:	f7fe fd4e 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 80076b8:	61f8      	str	r0, [r7, #28]
            break;
 80076ba:	e00c      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076bc:	4b1c      	ldr	r3, [pc, #112]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c8:	d104      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>
              frequency = HSI_VALUE;
 80076ca:	4b1a      	ldr	r3, [pc, #104]	; (8007734 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>)
 80076cc:	61fb      	str	r3, [r7, #28]
            break;
 80076ce:	e001      	b.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>
            break;
 80076d0:	bf00      	nop
 80076d2:	e203      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 80076d4:	bf00      	nop
        break;
 80076d6:	e201      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80076d8:	4b15      	ldr	r3, [pc, #84]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 80076da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ea:	d013      	beq.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f2:	d819      	bhi.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d004      	beq.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007700:	d004      	beq.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
            break;
 8007702:	e011      	b.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007704:	f7fe fdd8 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8007708:	61f8      	str	r0, [r7, #28]
            break;
 800770a:	e010      	b.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
            frequency = HAL_RCC_GetSysClockFreq();
 800770c:	f7fe fd22 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 8007710:	61f8      	str	r0, [r7, #28]
            break;
 8007712:	e00c      	b.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007714:	4b06      	ldr	r3, [pc, #24]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800771c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007720:	d104      	bne.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
              frequency = HSI_VALUE;
 8007722:	4b04      	ldr	r3, [pc, #16]	; (8007734 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>)
 8007724:	61fb      	str	r3, [r7, #28]
            break;
 8007726:	e001      	b.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
            break;
 8007728:	bf00      	nop
 800772a:	e1d7      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 800772c:	bf00      	nop
        break;
 800772e:	e1d5      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8007730:	40021000 	.word	0x40021000
 8007734:	00f42400 	.word	0x00f42400
 8007738:	0800d4f8 	.word	0x0800d4f8
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800773c:	4ba9      	ldr	r3, [pc, #676]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800773e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007742:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800774e:	d013      	beq.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007756:	d819      	bhi.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d004      	beq.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007764:	d004      	beq.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
            break;
 8007766:	e011      	b.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007768:	f7fe fda6 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 800776c:	61f8      	str	r0, [r7, #28]
            break;
 800776e:	e010      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
            frequency = HAL_RCC_GetSysClockFreq();
 8007770:	f7fe fcf0 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 8007774:	61f8      	str	r0, [r7, #28]
            break;
 8007776:	e00c      	b.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007778:	4b9a      	ldr	r3, [pc, #616]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007784:	d104      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
              frequency = HSI_VALUE;
 8007786:	4b98      	ldr	r3, [pc, #608]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007788:	61fb      	str	r3, [r7, #28]
            break;
 800778a:	e001      	b.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            break;
 800778c:	bf00      	nop
 800778e:	e1a5      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 8007790:	bf00      	nop
        break;
 8007792:	e1a3      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007794:	4b93      	ldr	r3, [pc, #588]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007796:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d011      	beq.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0xc1e>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d818      	bhi.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0xc32>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d004      	beq.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
            break;
 80077b8:	e011      	b.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0xc32>
            frequency = HAL_RCC_GetPCLK1Freq();
 80077ba:	f7fe fd7d 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 80077be:	61f8      	str	r0, [r7, #28]
            break;
 80077c0:	e010      	b.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
            frequency = HAL_RCC_GetSysClockFreq();
 80077c2:	f7fe fcc7 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 80077c6:	61f8      	str	r0, [r7, #28]
            break;
 80077c8:	e00c      	b.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077ca:	4b86      	ldr	r3, [pc, #536]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077d6:	d104      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
              frequency = HSI_VALUE;
 80077d8:	4b83      	ldr	r3, [pc, #524]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80077da:	61fb      	str	r3, [r7, #28]
            break;
 80077dc:	e001      	b.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            break;
 80077de:	bf00      	nop
 80077e0:	e17c      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 80077e2:	bf00      	nop
        break;
 80077e4:	e17a      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80077e6:	4b7f      	ldr	r3, [pc, #508]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80077e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80077f8:	d02c      	beq.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007800:	d833      	bhi.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007808:	d01a      	beq.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xc94>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007810:	d82b      	bhi.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d004      	beq.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800781e:	d004      	beq.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
            break;
 8007820:	e023      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007822:	f7fe fd49 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8007826:	61f8      	str	r0, [r7, #28]
            break;
 8007828:	e026      	b.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800782a:	4b6e      	ldr	r3, [pc, #440]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800782c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b02      	cmp	r3, #2
 8007836:	d11a      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
              frequency = LSI_VALUE;
 8007838:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800783c:	61fb      	str	r3, [r7, #28]
            break;
 800783e:	e016      	b.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007840:	4b68      	ldr	r3, [pc, #416]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800784c:	d111      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = HSI_VALUE;
 800784e:	4b66      	ldr	r3, [pc, #408]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007850:	61fb      	str	r3, [r7, #28]
            break;
 8007852:	e00e      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007854:	4b63      	ldr	r3, [pc, #396]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800785a:	f003 0302 	and.w	r3, r3, #2
 800785e:	2b02      	cmp	r3, #2
 8007860:	d109      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = LSE_VALUE;
 8007862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007866:	61fb      	str	r3, [r7, #28]
            break;
 8007868:	e005      	b.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            break;
 800786a:	bf00      	nop
 800786c:	e136      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 800786e:	bf00      	nop
 8007870:	e134      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 8007872:	bf00      	nop
 8007874:	e132      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 8007876:	bf00      	nop
        break;
 8007878:	e130      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800787a:	4b5a      	ldr	r3, [pc, #360]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800787c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007880:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800788c:	d02c      	beq.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007894:	d833      	bhi.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800789c:	d01a      	beq.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078a4:	d82b      	bhi.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d004      	beq.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd0a>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078b2:	d004      	beq.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0xd12>
            break;
 80078b4:	e023      	b.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            frequency = HAL_RCC_GetPCLK1Freq();
 80078b6:	f7fe fcff 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 80078ba:	61f8      	str	r0, [r7, #28]
            break;
 80078bc:	e026      	b.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80078be:	4b49      	ldr	r3, [pc, #292]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80078c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d11a      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
              frequency = LSI_VALUE;
 80078cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80078d0:	61fb      	str	r3, [r7, #28]
            break;
 80078d2:	e016      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078d4:	4b43      	ldr	r3, [pc, #268]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e0:	d111      	bne.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
              frequency = HSI_VALUE;
 80078e2:	4b41      	ldr	r3, [pc, #260]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80078e4:	61fb      	str	r3, [r7, #28]
            break;
 80078e6:	e00e      	b.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80078e8:	4b3e      	ldr	r3, [pc, #248]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80078ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d109      	bne.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
              frequency = LSE_VALUE;
 80078f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078fa:	61fb      	str	r3, [r7, #28]
            break;
 80078fc:	e005      	b.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            break;
 80078fe:	bf00      	nop
 8007900:	e0ec      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 8007902:	bf00      	nop
 8007904:	e0ea      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 8007906:	bf00      	nop
 8007908:	e0e8      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 800790a:	bf00      	nop
        break;
 800790c:	e0e6      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800790e:	4b35      	ldr	r3, [pc, #212]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007914:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007920:	d02c      	beq.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0xdd0>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007928:	d833      	bhi.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0xde6>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007930:	d01a      	beq.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007938:	d82b      	bhi.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0xde6>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007946:	d004      	beq.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
            break;
 8007948:	e023      	b.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0xde6>
            frequency = HAL_RCC_GetPCLK1Freq();
 800794a:	f7fe fcb5 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 800794e:	61f8      	str	r0, [r7, #28]
            break;
 8007950:	e026      	b.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007952:	4b24      	ldr	r3, [pc, #144]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b02      	cmp	r3, #2
 800795e:	d11a      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0xdea>
              frequency = LSI_VALUE;
 8007960:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007964:	61fb      	str	r3, [r7, #28]
            break;
 8007966:	e016      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0xdea>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007968:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007974:	d111      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xdee>
              frequency = HSI_VALUE;
 8007976:	4b1c      	ldr	r3, [pc, #112]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007978:	61fb      	str	r3, [r7, #28]
            break;
 800797a:	e00e      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0xdee>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800797c:	4b19      	ldr	r3, [pc, #100]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800797e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b02      	cmp	r3, #2
 8007988:	d109      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
              frequency = LSE_VALUE;
 800798a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800798e:	61fb      	str	r3, [r7, #28]
            break;
 8007990:	e005      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            break;
 8007992:	bf00      	nop
 8007994:	e0a2      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 8007996:	bf00      	nop
 8007998:	e0a0      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 800799a:	bf00      	nop
 800799c:	e09e      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 800799e:	bf00      	nop
        break;
 80079a0:	e09c      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80079a2:	4b10      	ldr	r3, [pc, #64]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80079a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a8:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079b4:	d049      	beq.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079bc:	d87b      	bhi.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d004      	beq.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079ca:	d011      	beq.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe44>
            break;
 80079cc:	e073      	b.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80079ce:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079da:	d16e      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
              frequency = HSE_VALUE;
 80079dc:	4b03      	ldr	r3, [pc, #12]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80079de:	61fb      	str	r3, [r7, #28]
            break;
 80079e0:	e06b      	b.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
 80079e2:	bf00      	nop
 80079e4:	40021000 	.word	0x40021000
 80079e8:	00f42400 	.word	0x00f42400
 80079ec:	007a1200 	.word	0x007a1200
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80079f0:	4b3d      	ldr	r3, [pc, #244]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079fc:	d15f      	bne.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80079fe:	4b3a      	ldr	r3, [pc, #232]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0a:	d158      	bne.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007a0c:	4b36      	ldr	r3, [pc, #216]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	091b      	lsrs	r3, r3, #4
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	3301      	adds	r3, #1
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a1e:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007a20:	4b31      	ldr	r3, [pc, #196]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	0a1b      	lsrs	r3, r3, #8
 8007a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a2a:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	fb02 f203 	mul.w	r2, r2, r3
 8007a34:	4b2c      	ldr	r3, [pc, #176]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	0d5b      	lsrs	r3, r3, #21
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	3301      	adds	r3, #1
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a46:	61fb      	str	r3, [r7, #28]
            break;
 8007a48:	e039      	b.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8007a4a:	4b27      	ldr	r3, [pc, #156]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d035      	beq.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xf16>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8007a56:	f000 f9cb 	bl	8007df0 <RCCEx_PLLSAI1_GetVCOFreq>
 8007a5a:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007a5c:	4b22      	ldr	r3, [pc, #136]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	091b      	lsrs	r3, r3, #4
 8007a62:	f003 030f 	and.w	r3, r3, #15
 8007a66:	3301      	adds	r3, #1
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6e:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007a70:	4b1d      	ldr	r3, [pc, #116]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	0a1b      	lsrs	r3, r3, #8
 8007a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7a:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007a7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	0edb      	lsrs	r3, r3, #27
 8007a82:	f003 031f 	and.w	r3, r3, #31
 8007a86:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10a      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007a8e:	4b16      	ldr	r3, [pc, #88]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
                  pllp = 17U;
 8007a9a:	2311      	movs	r3, #17
 8007a9c:	617b      	str	r3, [r7, #20]
 8007a9e:	e001      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
                  pllp = 7U;
 8007aa0:	2307      	movs	r3, #7
 8007aa2:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	fb02 f203 	mul.w	r2, r2, r3
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab2:	61fb      	str	r3, [r7, #28]
            break;
 8007ab4:	e005      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xf16>
            break;
 8007ab6:	bf00      	nop
 8007ab8:	e010      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 8007aba:	bf00      	nop
 8007abc:	e00e      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 8007abe:	bf00      	nop
 8007ac0:	e00c      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
            break;
 8007ac2:	bf00      	nop
        break;
 8007ac4:	e00a      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        break;
 8007ac6:	bf00      	nop
 8007ac8:	e008      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        break;
 8007aca:	bf00      	nop
 8007acc:	e006      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        break;
 8007ace:	bf00      	nop
 8007ad0:	e004      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        break;
 8007ad2:	bf00      	nop
 8007ad4:	e002      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        break;
 8007ad6:	bf00      	nop
 8007ad8:	e000      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
        break;
 8007ada:	bf00      	nop
    }
  }

  return (frequency);
 8007adc:	69fb      	ldr	r3, [r7, #28]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3720      	adds	r7, #32
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	40021000 	.word	0x40021000

08007aec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007af0:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a04      	ldr	r2, [pc, #16]	; (8007b08 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007af6:	f043 0304 	orr.w	r3, r3, #4
 8007afa:	6013      	str	r3, [r2, #0]
}
 8007afc:	bf00      	nop
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	40021000 	.word	0x40021000

08007b0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d018      	beq.n	8007b54 <RCCEx_PLLSAI1_Config+0x48>
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d81f      	bhi.n	8007b66 <RCCEx_PLLSAI1_Config+0x5a>
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d002      	beq.n	8007b30 <RCCEx_PLLSAI1_Config+0x24>
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d009      	beq.n	8007b42 <RCCEx_PLLSAI1_Config+0x36>
 8007b2e:	e01a      	b.n	8007b66 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007b30:	4b5d      	ldr	r3, [pc, #372]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d117      	bne.n	8007b6c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b40:	e014      	b.n	8007b6c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007b42:	4b59      	ldr	r3, [pc, #356]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d110      	bne.n	8007b70 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b52:	e00d      	b.n	8007b70 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8007b54:	4b54      	ldr	r3, [pc, #336]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d109      	bne.n	8007b74 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b64:	e006      	b.n	8007b74 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	73fb      	strb	r3, [r7, #15]
      break;
 8007b6a:	e004      	b.n	8007b76 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8007b6c:	bf00      	nop
 8007b6e:	e002      	b.n	8007b76 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8007b70:	bf00      	nop
 8007b72:	e000      	b.n	8007b76 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8007b74:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f040 808f 	bne.w	8007c9c <RCCEx_PLLSAI1_Config+0x190>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007b7e:	4b4a      	ldr	r3, [pc, #296]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a49      	ldr	r2, [pc, #292]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007b84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b8a:	f7fb fc91 	bl	80034b0 <HAL_GetTick>
 8007b8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b90:	e009      	b.n	8007ba6 <RCCEx_PLLSAI1_Config+0x9a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b92:	f7fb fc8d 	bl	80034b0 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d902      	bls.n	8007ba6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	73fb      	strb	r3, [r7, #15]
        break;
 8007ba4:	e005      	b.n	8007bb2 <RCCEx_PLLSAI1_Config+0xa6>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ba6:	4b40      	ldr	r3, [pc, #256]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1ef      	bne.n	8007b92 <RCCEx_PLLSAI1_Config+0x86>
      }
    }

    if (status == HAL_OK)
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d171      	bne.n	8007c9c <RCCEx_PLLSAI1_Config+0x190>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d116      	bne.n	8007bec <RCCEx_PLLSAI1_Config+0xe0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bbe:	4b3a      	ldr	r3, [pc, #232]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007bc0:	691a      	ldr	r2, [r3, #16]
 8007bc2:	4b3a      	ldr	r3, [pc, #232]	; (8007cac <RCCEx_PLLSAI1_Config+0x1a0>)
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6892      	ldr	r2, [r2, #8]
 8007bca:	0211      	lsls	r1, r2, #8
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	68d2      	ldr	r2, [r2, #12]
 8007bd0:	06d2      	lsls	r2, r2, #27
 8007bd2:	4311      	orrs	r1, r2
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	6852      	ldr	r2, [r2, #4]
 8007bd8:	3a01      	subs	r2, #1
 8007bda:	0112      	lsls	r2, r2, #4
 8007bdc:	4311      	orrs	r1, r2
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	6812      	ldr	r2, [r2, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	4930      	ldr	r1, [pc, #192]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	610b      	str	r3, [r1, #16]
 8007bea:	e033      	b.n	8007c54 <RCCEx_PLLSAI1_Config+0x148>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d118      	bne.n	8007c24 <RCCEx_PLLSAI1_Config+0x118>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bf2:	4b2d      	ldr	r3, [pc, #180]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007bf4:	691a      	ldr	r2, [r3, #16]
 8007bf6:	4b2e      	ldr	r3, [pc, #184]	; (8007cb0 <RCCEx_PLLSAI1_Config+0x1a4>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	6892      	ldr	r2, [r2, #8]
 8007bfe:	0211      	lsls	r1, r2, #8
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6912      	ldr	r2, [r2, #16]
 8007c04:	0852      	lsrs	r2, r2, #1
 8007c06:	3a01      	subs	r2, #1
 8007c08:	0552      	lsls	r2, r2, #21
 8007c0a:	4311      	orrs	r1, r2
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	6852      	ldr	r2, [r2, #4]
 8007c10:	3a01      	subs	r2, #1
 8007c12:	0112      	lsls	r2, r2, #4
 8007c14:	4311      	orrs	r1, r2
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	6812      	ldr	r2, [r2, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	4922      	ldr	r1, [pc, #136]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	610b      	str	r3, [r1, #16]
 8007c22:	e017      	b.n	8007c54 <RCCEx_PLLSAI1_Config+0x148>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c24:	4b20      	ldr	r3, [pc, #128]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007c26:	691a      	ldr	r2, [r3, #16]
 8007c28:	4b22      	ldr	r3, [pc, #136]	; (8007cb4 <RCCEx_PLLSAI1_Config+0x1a8>)
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	6892      	ldr	r2, [r2, #8]
 8007c30:	0211      	lsls	r1, r2, #8
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6952      	ldr	r2, [r2, #20]
 8007c36:	0852      	lsrs	r2, r2, #1
 8007c38:	3a01      	subs	r2, #1
 8007c3a:	0652      	lsls	r2, r2, #25
 8007c3c:	4311      	orrs	r1, r2
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6852      	ldr	r2, [r2, #4]
 8007c42:	3a01      	subs	r2, #1
 8007c44:	0112      	lsls	r2, r2, #4
 8007c46:	4311      	orrs	r1, r2
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	6812      	ldr	r2, [r2, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	4916      	ldr	r1, [pc, #88]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007c54:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a13      	ldr	r2, [pc, #76]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007c5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c60:	f7fb fc26 	bl	80034b0 <HAL_GetTick>
 8007c64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c66:	e009      	b.n	8007c7c <RCCEx_PLLSAI1_Config+0x170>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c68:	f7fb fc22 	bl	80034b0 <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d902      	bls.n	8007c7c <RCCEx_PLLSAI1_Config+0x170>
        {
          status = HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	73fb      	strb	r3, [r7, #15]
          break;
 8007c7a:	e005      	b.n	8007c88 <RCCEx_PLLSAI1_Config+0x17c>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0ef      	beq.n	8007c68 <RCCEx_PLLSAI1_Config+0x15c>
        }
      }

      if (status == HAL_OK)
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <RCCEx_PLLSAI1_Config+0x190>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8007c8e:	4b06      	ldr	r3, [pc, #24]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007c90:	691a      	ldr	r2, [r3, #16]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	4904      	ldr	r1, [pc, #16]	; (8007ca8 <RCCEx_PLLSAI1_Config+0x19c>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	40021000 	.word	0x40021000
 8007cac:	07ff800c 	.word	0x07ff800c
 8007cb0:	ff9f800c 	.word	0xff9f800c
 8007cb4:	f9ff800c 	.word	0xf9ff800c

08007cb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d018      	beq.n	8007d00 <RCCEx_PLLSAI2_Config+0x48>
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d81f      	bhi.n	8007d12 <RCCEx_PLLSAI2_Config+0x5a>
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d002      	beq.n	8007cdc <RCCEx_PLLSAI2_Config+0x24>
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d009      	beq.n	8007cee <RCCEx_PLLSAI2_Config+0x36>
 8007cda:	e01a      	b.n	8007d12 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007cdc:	4b42      	ldr	r3, [pc, #264]	; (8007de8 <RCCEx_PLLSAI2_Config+0x130>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d117      	bne.n	8007d18 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cec:	e014      	b.n	8007d18 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007cee:	4b3e      	ldr	r3, [pc, #248]	; (8007de8 <RCCEx_PLLSAI2_Config+0x130>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d110      	bne.n	8007d1c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cfe:	e00d      	b.n	8007d1c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8007d00:	4b39      	ldr	r3, [pc, #228]	; (8007de8 <RCCEx_PLLSAI2_Config+0x130>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d109      	bne.n	8007d20 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d10:	e006      	b.n	8007d20 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	73fb      	strb	r3, [r7, #15]
      break;
 8007d16:	e004      	b.n	8007d22 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8007d18:	bf00      	nop
 8007d1a:	e002      	b.n	8007d22 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8007d1c:	bf00      	nop
 8007d1e:	e000      	b.n	8007d22 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8007d20:	bf00      	nop
  }

  if (status == HAL_OK)
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d159      	bne.n	8007ddc <RCCEx_PLLSAI2_Config+0x124>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007d28:	4b2f      	ldr	r3, [pc, #188]	; (8007de8 <RCCEx_PLLSAI2_Config+0x130>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a2e      	ldr	r2, [pc, #184]	; (8007de8 <RCCEx_PLLSAI2_Config+0x130>)
 8007d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d34:	f7fb fbbc 	bl	80034b0 <HAL_GetTick>
 8007d38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d3a:	e009      	b.n	8007d50 <RCCEx_PLLSAI2_Config+0x98>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d3c:	f7fb fbb8 	bl	80034b0 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d902      	bls.n	8007d50 <RCCEx_PLLSAI2_Config+0x98>
      {
        status = HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	73fb      	strb	r3, [r7, #15]
        break;
 8007d4e:	e005      	b.n	8007d5c <RCCEx_PLLSAI2_Config+0xa4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d50:	4b25      	ldr	r3, [pc, #148]	; (8007de8 <RCCEx_PLLSAI2_Config+0x130>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1ef      	bne.n	8007d3c <RCCEx_PLLSAI2_Config+0x84>
      }
    }

    if (status == HAL_OK)
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d13c      	bne.n	8007ddc <RCCEx_PLLSAI2_Config+0x124>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d115      	bne.n	8007d94 <RCCEx_PLLSAI2_Config+0xdc>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d68:	4b1f      	ldr	r3, [pc, #124]	; (8007de8 <RCCEx_PLLSAI2_Config+0x130>)
 8007d6a:	695a      	ldr	r2, [r3, #20]
 8007d6c:	4b1f      	ldr	r3, [pc, #124]	; (8007dec <RCCEx_PLLSAI2_Config+0x134>)
 8007d6e:	4013      	ands	r3, r2
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	6892      	ldr	r2, [r2, #8]
 8007d74:	0211      	lsls	r1, r2, #8
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	68d2      	ldr	r2, [r2, #12]
 8007d7a:	06d2      	lsls	r2, r2, #27
 8007d7c:	4311      	orrs	r1, r2
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	6852      	ldr	r2, [r2, #4]
 8007d82:	3a01      	subs	r2, #1
 8007d84:	0112      	lsls	r2, r2, #4
 8007d86:	4311      	orrs	r1, r2
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6812      	ldr	r2, [r2, #0]
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	4916      	ldr	r1, [pc, #88]	; (8007de8 <RCCEx_PLLSAI2_Config+0x130>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007d94:	4b14      	ldr	r3, [pc, #80]	; (8007de8 <RCCEx_PLLSAI2_Config+0x130>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a13      	ldr	r2, [pc, #76]	; (8007de8 <RCCEx_PLLSAI2_Config+0x130>)
 8007d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da0:	f7fb fb86 	bl	80034b0 <HAL_GetTick>
 8007da4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007da6:	e009      	b.n	8007dbc <RCCEx_PLLSAI2_Config+0x104>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007da8:	f7fb fb82 	bl	80034b0 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d902      	bls.n	8007dbc <RCCEx_PLLSAI2_Config+0x104>
        {
          status = HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	73fb      	strb	r3, [r7, #15]
          break;
 8007dba:	e005      	b.n	8007dc8 <RCCEx_PLLSAI2_Config+0x110>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <RCCEx_PLLSAI2_Config+0x130>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0ef      	beq.n	8007da8 <RCCEx_PLLSAI2_Config+0xf0>
        }
      }

      if (status == HAL_OK)
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d106      	bne.n	8007ddc <RCCEx_PLLSAI2_Config+0x124>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8007dce:	4b06      	ldr	r3, [pc, #24]	; (8007de8 <RCCEx_PLLSAI2_Config+0x130>)
 8007dd0:	695a      	ldr	r2, [r3, #20]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	4904      	ldr	r1, [pc, #16]	; (8007de8 <RCCEx_PLLSAI2_Config+0x130>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	40021000 	.word	0x40021000
 8007dec:	07ff800c 	.word	0x07ff800c

08007df0 <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 8007dfa:	4b26      	ldr	r3, [pc, #152]	; (8007e94 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	f003 0303 	and.w	r3, r3, #3
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d02d      	beq.n	8007e62 <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d835      	bhi.n	8007e76 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d002      	beq.n	8007e14 <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d01d      	beq.n	8007e4e <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 8007e12:	e030      	b.n	8007e76 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007e14:	4b1f      	ldr	r3, [pc, #124]	; (8007e94 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d12c      	bne.n	8007e7a <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007e20:	4b1c      	ldr	r3, [pc, #112]	; (8007e94 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d005      	beq.n	8007e38 <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 8007e2c:	4b19      	ldr	r3, [pc, #100]	; (8007e94 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	091b      	lsrs	r3, r3, #4
 8007e32:	f003 030f 	and.w	r3, r3, #15
 8007e36:	e005      	b.n	8007e44 <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 8007e38:	4b16      	ldr	r3, [pc, #88]	; (8007e94 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8007e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e3e:	0a1b      	lsrs	r3, r3, #8
 8007e40:	f003 030f 	and.w	r3, r3, #15
 8007e44:	4a14      	ldr	r2, [pc, #80]	; (8007e98 <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 8007e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e4a:	607b      	str	r3, [r7, #4]
      break;
 8007e4c:	e015      	b.n	8007e7a <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e4e:	4b11      	ldr	r3, [pc, #68]	; (8007e94 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e5a:	d110      	bne.n	8007e7e <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8007e5c:	4b0f      	ldr	r3, [pc, #60]	; (8007e9c <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 8007e5e:	607b      	str	r3, [r7, #4]
      break;
 8007e60:	e00d      	b.n	8007e7e <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e62:	4b0c      	ldr	r3, [pc, #48]	; (8007e94 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e6e:	d108      	bne.n	8007e82 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8007e70:	4b0b      	ldr	r3, [pc, #44]	; (8007ea0 <RCCEx_PLLSAI1_GetVCOFreq+0xb0>)
 8007e72:	607b      	str	r3, [r7, #4]
      break;
 8007e74:	e005      	b.n	8007e82 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 8007e76:	bf00      	nop
 8007e78:	e004      	b.n	8007e84 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8007e7a:	bf00      	nop
 8007e7c:	e002      	b.n	8007e84 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8007e7e:	bf00      	nop
 8007e80:	e000      	b.n	8007e84 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8007e82:	bf00      	nop
  }

  return pllvco;
 8007e84:	687b      	ldr	r3, [r7, #4]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	40021000 	.word	0x40021000
 8007e98:	0800d4f8 	.word	0x0800d4f8
 8007e9c:	00f42400 	.word	0x00f42400
 8007ea0:	007a1200 	.word	0x007a1200

08007ea4 <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 8007eae:	4b26      	ldr	r3, [pc, #152]	; (8007f48 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d02d      	beq.n	8007f16 <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d835      	bhi.n	8007f2a <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d002      	beq.n	8007ec8 <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d01d      	beq.n	8007f02 <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 8007ec6:	e030      	b.n	8007f2a <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007ec8:	4b1f      	ldr	r3, [pc, #124]	; (8007f48 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d12c      	bne.n	8007f2e <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007ed4:	4b1c      	ldr	r3, [pc, #112]	; (8007f48 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0308 	and.w	r3, r3, #8
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d005      	beq.n	8007eec <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 8007ee0:	4b19      	ldr	r3, [pc, #100]	; (8007f48 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	091b      	lsrs	r3, r3, #4
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	e005      	b.n	8007ef8 <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 8007eec:	4b16      	ldr	r3, [pc, #88]	; (8007f48 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8007eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ef2:	0a1b      	lsrs	r3, r3, #8
 8007ef4:	f003 030f 	and.w	r3, r3, #15
 8007ef8:	4a14      	ldr	r2, [pc, #80]	; (8007f4c <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 8007efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007efe:	607b      	str	r3, [r7, #4]
      break;
 8007f00:	e015      	b.n	8007f2e <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f02:	4b11      	ldr	r3, [pc, #68]	; (8007f48 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f0e:	d110      	bne.n	8007f32 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8007f10:	4b0f      	ldr	r3, [pc, #60]	; (8007f50 <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 8007f12:	607b      	str	r3, [r7, #4]
      break;
 8007f14:	e00d      	b.n	8007f32 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f16:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f22:	d108      	bne.n	8007f36 <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8007f24:	4b0b      	ldr	r3, [pc, #44]	; (8007f54 <RCCEx_PLLSAI2_GetVCOFreq+0xb0>)
 8007f26:	607b      	str	r3, [r7, #4]
      break;
 8007f28:	e005      	b.n	8007f36 <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 8007f2a:	bf00      	nop
 8007f2c:	e004      	b.n	8007f38 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8007f2e:	bf00      	nop
 8007f30:	e002      	b.n	8007f38 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8007f32:	bf00      	nop
 8007f34:	e000      	b.n	8007f38 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8007f36:	bf00      	nop
  }

  return pllvco;
 8007f38:	687b      	ldr	r3, [r7, #4]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	40021000 	.word	0x40021000
 8007f4c:	0800d4f8 	.word	0x0800d4f8
 8007f50:	00f42400 	.word	0x00f42400
 8007f54:	007a1200 	.word	0x007a1200

08007f58 <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b088      	sub	sp, #32
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f6c:	d10c      	bne.n	8007f88 <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007f6e:	4b78      	ldr	r3, [pc, #480]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007f70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f74:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007f78:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	2b60      	cmp	r3, #96	; 0x60
 8007f7e:	d110      	bne.n	8007fa2 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007f80:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	e00c      	b.n	8007fa2 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007f88:	4b71      	ldr	r3, [pc, #452]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f92:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f9a:	d102      	bne.n	8007fa2 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007f9c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007fa0:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f040 80cd 	bne.w	8008144 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	2b40      	cmp	r3, #64	; 0x40
 8007fb2:	d003      	beq.n	8007fbc <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fba:	d13b      	bne.n	8008034 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007fbc:	4b64      	ldr	r3, [pc, #400]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fc8:	f040 80bb 	bne.w	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8007fcc:	4b60      	ldr	r3, [pc, #384]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 80b4 	beq.w	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007fda:	4b5d      	ldr	r3, [pc, #372]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	091b      	lsrs	r3, r3, #4
 8007fe0:	f003 030f 	and.w	r3, r3, #15
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fec:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007fee:	4b58      	ldr	r3, [pc, #352]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	0a1b      	lsrs	r3, r3, #8
 8007ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff8:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007ffa:	4b55      	ldr	r3, [pc, #340]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	0edb      	lsrs	r3, r3, #27
 8008000:	f003 031f 	and.w	r3, r3, #31
 8008004:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10a      	bne.n	8008022 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800800c:	4b50      	ldr	r3, [pc, #320]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 8008018:	2311      	movs	r3, #17
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	e001      	b.n	8008022 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 800801e:	2307      	movs	r3, #7
 8008020:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	fb02 f203 	mul.w	r2, r2, r3
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008030:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008032:	e086      	b.n	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	2b80      	cmp	r3, #128	; 0x80
 8008038:	d003      	beq.n	8008042 <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008040:	d109      	bne.n	8008056 <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008042:	4b43      	ldr	r3, [pc, #268]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800804a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800804e:	d179      	bne.n	8008144 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 8008050:	4b40      	ldr	r3, [pc, #256]	; (8008154 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008052:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008054:	e076      	b.n	8008144 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d135      	bne.n	80080c8 <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 800805c:	4b3c      	ldr	r3, [pc, #240]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d06d      	beq.n	8008144 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8008068:	f7ff fec2 	bl	8007df0 <RCCEx_PLLSAI1_GetVCOFreq>
 800806c:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800806e:	4b38      	ldr	r3, [pc, #224]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	091b      	lsrs	r3, r3, #4
 8008074:	f003 030f 	and.w	r3, r3, #15
 8008078:	3301      	adds	r3, #1
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008080:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008082:	4b33      	ldr	r3, [pc, #204]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	0a1b      	lsrs	r3, r3, #8
 8008088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800808c:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800808e:	4b30      	ldr	r3, [pc, #192]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	0edb      	lsrs	r3, r3, #27
 8008094:	f003 031f 	and.w	r3, r3, #31
 8008098:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10a      	bne.n	80080b6 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80080a0:	4b2b      	ldr	r3, [pc, #172]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 80080ac:	2311      	movs	r3, #17
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	e001      	b.n	80080b6 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 80080b2:	2307      	movs	r3, #7
 80080b4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	fb02 f203 	mul.w	r2, r2, r3
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c4:	61fb      	str	r3, [r7, #28]
 80080c6:	e03d      	b.n	8008144 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	d003      	beq.n	80080d6 <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d4:	d136      	bne.n	8008144 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 80080d6:	4b1e      	ldr	r3, [pc, #120]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d030      	beq.n	8008144 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 80080e2:	f7ff fedf 	bl	8007ea4 <RCCEx_PLLSAI2_GetVCOFreq>
 80080e6:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80080e8:	4b19      	ldr	r3, [pc, #100]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	091b      	lsrs	r3, r3, #4
 80080ee:	f003 030f 	and.w	r3, r3, #15
 80080f2:	3301      	adds	r3, #1
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fa:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80080fc:	4b14      	ldr	r3, [pc, #80]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	0a1b      	lsrs	r3, r3, #8
 8008102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008106:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8008108:	4b11      	ldr	r3, [pc, #68]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	0edb      	lsrs	r3, r3, #27
 800810e:	f003 031f 	and.w	r3, r3, #31
 8008112:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800811a:	4b0d      	ldr	r3, [pc, #52]	; (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8008126:	2311      	movs	r3, #17
 8008128:	617b      	str	r3, [r7, #20]
 800812a:	e001      	b.n	8008130 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800812c:	2307      	movs	r3, #7
 800812e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	fb02 f203 	mul.w	r2, r2, r3
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	fbb2 f3f3 	udiv	r3, r2, r3
 800813e:	61fb      	str	r3, [r7, #28]
 8008140:	e000      	b.n	8008144 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008142:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 8008144:	69fb      	ldr	r3, [r7, #28]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3720      	adds	r7, #32
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	40021000 	.word	0x40021000
 8008154:	00f42400 	.word	0x00f42400

08008158 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08a      	sub	sp, #40	; 0x28
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e1da      	b.n	8008520 <HAL_SAI_Init+0x3c8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008170:	2b01      	cmp	r3, #1
 8008172:	d10e      	bne.n	8008192 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a87      	ldr	r2, [pc, #540]	; (8008398 <HAL_SAI_Init+0x240>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d107      	bne.n	800818e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8008182:	2b01      	cmp	r3, #1
 8008184:	d103      	bne.n	800818e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e1c6      	b.n	8008520 <HAL_SAI_Init+0x3c8>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d106      	bne.n	80081ac <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7fa fdde 	bl	8002d68 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f9c3 	bl	8008538 <SAI_Disable>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e1b1      	b.n	8008520 <HAL_SAI_Init+0x3c8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d00c      	beq.n	80081e6 <HAL_SAI_Init+0x8e>
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d80d      	bhi.n	80081ec <HAL_SAI_Init+0x94>
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <HAL_SAI_Init+0x82>
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d003      	beq.n	80081e0 <HAL_SAI_Init+0x88>
 80081d8:	e008      	b.n	80081ec <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80081de:	e008      	b.n	80081f2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80081e0:	2310      	movs	r3, #16
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80081e4:	e005      	b.n	80081f2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80081e6:	2320      	movs	r3, #32
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80081ea:	e002      	b.n	80081f2 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 80081ec:	2300      	movs	r3, #0
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80081f0:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d81d      	bhi.n	8008236 <HAL_SAI_Init+0xde>
 80081fa:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <HAL_SAI_Init+0xa8>)
 80081fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008200:	08008211 	.word	0x08008211
 8008204:	08008217 	.word	0x08008217
 8008208:	0800821f 	.word	0x0800821f
 800820c:	08008227 	.word	0x08008227
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	61fb      	str	r3, [r7, #28]
      break;
 8008214:	e012      	b.n	800823c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800821a:	61fb      	str	r3, [r7, #28]
      break;
 800821c:	e00e      	b.n	800823c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800821e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008222:	61fb      	str	r3, [r7, #28]
      break;
 8008224:	e00a      	b.n	800823c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008226:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800822a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	f043 0301 	orr.w	r3, r3, #1
 8008232:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008234:	e002      	b.n	800823c <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 8008236:	2300      	movs	r3, #0
 8008238:	61fb      	str	r3, [r7, #28]
      break;
 800823a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a55      	ldr	r2, [pc, #340]	; (8008398 <HAL_SAI_Init+0x240>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d004      	beq.n	8008250 <HAL_SAI_Init+0xf8>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a54      	ldr	r2, [pc, #336]	; (800839c <HAL_SAI_Init+0x244>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d103      	bne.n	8008258 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8008250:	4a53      	ldr	r2, [pc, #332]	; (80083a0 <HAL_SAI_Init+0x248>)
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	e002      	b.n	800825e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008258:	4a52      	ldr	r2, [pc, #328]	; (80083a4 <HAL_SAI_Init+0x24c>)
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d07e      	beq.n	8008364 <HAL_SAI_Init+0x20c>
  {
    uint32_t freq = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a4a      	ldr	r2, [pc, #296]	; (8008398 <HAL_SAI_Init+0x240>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d004      	beq.n	800827e <HAL_SAI_Init+0x126>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a48      	ldr	r2, [pc, #288]	; (800839c <HAL_SAI_Init+0x244>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d104      	bne.n	8008288 <HAL_SAI_Init+0x130>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800827e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008282:	f7fe fc93 	bl	8006bac <HAL_RCCEx_GetPeriphCLKFreq>
 8008286:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a46      	ldr	r2, [pc, #280]	; (80083a8 <HAL_SAI_Init+0x250>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d004      	beq.n	800829c <HAL_SAI_Init+0x144>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a45      	ldr	r2, [pc, #276]	; (80083ac <HAL_SAI_Init+0x254>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d104      	bne.n	80082a6 <HAL_SAI_Init+0x14e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800829c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80082a0:	f7fe fc84 	bl	8006bac <HAL_RCCEx_GetPeriphCLKFreq>
 80082a4:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082ae:	d120      	bne.n	80082f2 <HAL_SAI_Init+0x19a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d102      	bne.n	80082be <HAL_SAI_Init+0x166>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80082b8:	2340      	movs	r3, #64	; 0x40
 80082ba:	613b      	str	r3, [r7, #16]
 80082bc:	e00a      	b.n	80082d4 <HAL_SAI_Init+0x17c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c2:	2b08      	cmp	r3, #8
 80082c4:	d103      	bne.n	80082ce <HAL_SAI_Init+0x176>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80082c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082ca:	613b      	str	r3, [r7, #16]
 80082cc:	e002      	b.n	80082d4 <HAL_SAI_Init+0x17c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d2:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	4613      	mov	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4413      	add	r3, r2
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	4619      	mov	r1, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	fb02 f303 	mul.w	r3, r2, r3
 80082ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80082ee:	617b      	str	r3, [r7, #20]
 80082f0:	e017      	b.n	8008322 <HAL_SAI_Init+0x1ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082fa:	d101      	bne.n	8008300 <HAL_SAI_Init+0x1a8>
 80082fc:	2302      	movs	r3, #2
 80082fe:	e000      	b.n	8008302 <HAL_SAI_Init+0x1aa>
 8008300:	2301      	movs	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	4619      	mov	r1, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	fb02 f303 	mul.w	r3, r2, r3
 800831a:	021b      	lsls	r3, r3, #8
 800831c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008320:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	4a22      	ldr	r2, [pc, #136]	; (80083b0 <HAL_SAI_Init+0x258>)
 8008326:	fba2 2303 	umull	r2, r3, r2, r3
 800832a:	08da      	lsrs	r2, r3, #3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008330:	6979      	ldr	r1, [r7, #20]
 8008332:	4b1f      	ldr	r3, [pc, #124]	; (80083b0 <HAL_SAI_Init+0x258>)
 8008334:	fba3 2301 	umull	r2, r3, r3, r1
 8008338:	08da      	lsrs	r2, r3, #3
 800833a:	4613      	mov	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	005b      	lsls	r3, r3, #1
 8008342:	1aca      	subs	r2, r1, r3
 8008344:	2a08      	cmp	r2, #8
 8008346:	d904      	bls.n	8008352 <HAL_SAI_Init+0x1fa>
    {
      hsai->Init.Mckdiv += 1U;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	1c5a      	adds	r2, r3, #1
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008356:	2b04      	cmp	r3, #4
 8008358:	d104      	bne.n	8008364 <HAL_SAI_Init+0x20c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	085a      	lsrs	r2, r3, #1
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <HAL_SAI_Init+0x21c>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	2b02      	cmp	r3, #2
 8008372:	d109      	bne.n	8008388 <HAL_SAI_Init+0x230>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008378:	2b01      	cmp	r3, #1
 800837a:	d101      	bne.n	8008380 <HAL_SAI_Init+0x228>
 800837c:	2300      	movs	r3, #0
 800837e:	e001      	b.n	8008384 <HAL_SAI_Init+0x22c>
 8008380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008384:	623b      	str	r3, [r7, #32]
 8008386:	e017      	b.n	80083b8 <HAL_SAI_Init+0x260>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800838c:	2b01      	cmp	r3, #1
 800838e:	d111      	bne.n	80083b4 <HAL_SAI_Init+0x25c>
 8008390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008394:	e00f      	b.n	80083b6 <HAL_SAI_Init+0x25e>
 8008396:	bf00      	nop
 8008398:	40015404 	.word	0x40015404
 800839c:	40015424 	.word	0x40015424
 80083a0:	40015400 	.word	0x40015400
 80083a4:	40015800 	.word	0x40015800
 80083a8:	40015804 	.word	0x40015804
 80083ac:	40015824 	.word	0x40015824
 80083b0:	cccccccd 	.word	0xcccccccd
 80083b4:	2300      	movs	r3, #0
 80083b6:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6819      	ldr	r1, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	4b59      	ldr	r3, [pc, #356]	; (8008528 <HAL_SAI_Init+0x3d0>)
 80083c4:	400b      	ands	r3, r1
 80083c6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6819      	ldr	r1, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685a      	ldr	r2, [r3, #4]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80083dc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e2:	431a      	orrs	r2, r3
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 80083f0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80083fc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	051b      	lsls	r3, r3, #20
 8008404:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800840a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	6812      	ldr	r2, [r2, #0]
 8008424:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008428:	f023 030f 	bic.w	r3, r3, #15
 800842c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6859      	ldr	r1, [r3, #4]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	69da      	ldr	r2, [r3, #28]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843c:	431a      	orrs	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6899      	ldr	r1, [r3, #8]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	4b35      	ldr	r3, [pc, #212]	; (800852c <HAL_SAI_Init+0x3d4>)
 8008458:	400b      	ands	r3, r1
 800845a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6899      	ldr	r1, [r3, #8]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008466:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800846c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8008472:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008478:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800847e:	3b01      	subs	r3, #1
 8008480:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008482:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68d9      	ldr	r1, [r3, #12]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	f24f 0320 	movw	r3, #61472	; 0xf020
 800849a:	400b      	ands	r3, r1
 800849c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68d9      	ldr	r1, [r3, #12]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ac:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084b2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80084b4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ba:	3b01      	subs	r3, #1
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a18      	ldr	r2, [pc, #96]	; (8008530 <HAL_SAI_Init+0x3d8>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d119      	bne.n	8008506 <HAL_SAI_Init+0x3ae>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80084d2:	4b18      	ldr	r3, [pc, #96]	; (8008534 <HAL_SAI_Init+0x3dc>)
 80084d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084d6:	4a17      	ldr	r2, [pc, #92]	; (8008534 <HAL_SAI_Init+0x3dc>)
 80084d8:	f023 0301 	bic.w	r3, r3, #1
 80084dc:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d10e      	bne.n	8008506 <HAL_SAI_Init+0x3ae>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f0:	3b01      	subs	r3, #1
 80084f2:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80084f4:	490f      	ldr	r1, [pc, #60]	; (8008534 <HAL_SAI_Init+0x3dc>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80084fa:	4b0e      	ldr	r3, [pc, #56]	; (8008534 <HAL_SAI_Init+0x3dc>)
 80084fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fe:	4a0d      	ldr	r2, [pc, #52]	; (8008534 <HAL_SAI_Init+0x3dc>)
 8008500:	f043 0301 	orr.w	r3, r3, #1
 8008504:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3728      	adds	r7, #40	; 0x28
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	f005c010 	.word	0xf005c010
 800852c:	fff88000 	.word	0xfff88000
 8008530:	40015404 	.word	0x40015404
 8008534:	40015400 	.word	0x40015400

08008538 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008540:	4b18      	ldr	r3, [pc, #96]	; (80085a4 <SAI_Disable+0x6c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a18      	ldr	r2, [pc, #96]	; (80085a8 <SAI_Disable+0x70>)
 8008546:	fba2 2303 	umull	r2, r3, r2, r3
 800854a:	0b1b      	lsrs	r3, r3, #12
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008562:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008570:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	72fb      	strb	r3, [r7, #11]
      break;
 800857e:	e009      	b.n	8008594 <SAI_Disable+0x5c>
    }
    count--;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3b01      	subs	r3, #1
 8008584:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e7      	bne.n	8008564 <SAI_Disable+0x2c>

  return status;
 8008594:	7afb      	ldrb	r3, [r7, #11]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	20000000 	.word	0x20000000
 80085a8:	95cbec1b 	.word	0x95cbec1b

080085ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e095      	b.n	80086ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d108      	bne.n	80085d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085ce:	d009      	beq.n	80085e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	61da      	str	r2, [r3, #28]
 80085d6:	e005      	b.n	80085e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d106      	bne.n	8008604 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f877 	bl	80086f2 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800861a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008624:	d902      	bls.n	800862c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	e002      	b.n	8008632 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800862c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008630:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800863a:	d007      	beq.n	800864c <HAL_SPI_Init+0xa0>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008644:	d002      	beq.n	800864c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800865c:	431a      	orrs	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	431a      	orrs	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	431a      	orrs	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800867a:	431a      	orrs	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	69db      	ldr	r3, [r3, #28]
 8008680:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008684:	431a      	orrs	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868e:	ea42 0103 	orr.w	r1, r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008696:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	0c1b      	lsrs	r3, r3, #16
 80086a8:	f003 0204 	and.w	r2, r3, #4
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	f003 0310 	and.w	r3, r3, #16
 80086b4:	431a      	orrs	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ba:	f003 0308 	and.w	r3, r3, #8
 80086be:	431a      	orrs	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80086c8:	ea42 0103 	orr.w	r1, r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	430a      	orrs	r2, r1
 80086d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80086fa:	bf00      	nop
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b08a      	sub	sp, #40	; 0x28
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
 8008712:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008714:	2301      	movs	r3, #1
 8008716:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008724:	2b01      	cmp	r3, #1
 8008726:	d101      	bne.n	800872c <HAL_SPI_TransmitReceive+0x26>
 8008728:	2302      	movs	r3, #2
 800872a:	e1fb      	b.n	8008b24 <HAL_SPI_TransmitReceive+0x41e>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008734:	f7fa febc 	bl	80034b0 <HAL_GetTick>
 8008738:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008740:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008748:	887b      	ldrh	r3, [r7, #2]
 800874a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800874c:	887b      	ldrh	r3, [r7, #2]
 800874e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008750:	7efb      	ldrb	r3, [r7, #27]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d00e      	beq.n	8008774 <HAL_SPI_TransmitReceive+0x6e>
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800875c:	d106      	bne.n	800876c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d102      	bne.n	800876c <HAL_SPI_TransmitReceive+0x66>
 8008766:	7efb      	ldrb	r3, [r7, #27]
 8008768:	2b04      	cmp	r3, #4
 800876a:	d003      	beq.n	8008774 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800876c:	2302      	movs	r3, #2
 800876e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008772:	e1cd      	b.n	8008b10 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d005      	beq.n	8008786 <HAL_SPI_TransmitReceive+0x80>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <HAL_SPI_TransmitReceive+0x80>
 8008780:	887b      	ldrh	r3, [r7, #2]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d103      	bne.n	800878e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800878c:	e1c0      	b.n	8008b10 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b04      	cmp	r3, #4
 8008798:	d003      	beq.n	80087a2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2205      	movs	r2, #5
 800879e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	887a      	ldrh	r2, [r7, #2]
 80087b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	887a      	ldrh	r2, [r7, #2]
 80087ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	887a      	ldrh	r2, [r7, #2]
 80087c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	887a      	ldrh	r2, [r7, #2]
 80087ce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087e4:	d802      	bhi.n	80087ec <HAL_SPI_TransmitReceive+0xe6>
 80087e6:	8a3b      	ldrh	r3, [r7, #16]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d908      	bls.n	80087fe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	685a      	ldr	r2, [r3, #4]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087fa:	605a      	str	r2, [r3, #4]
 80087fc:	e007      	b.n	800880e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800880c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008818:	2b40      	cmp	r3, #64	; 0x40
 800881a:	d007      	beq.n	800882c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800882a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008834:	d97c      	bls.n	8008930 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <HAL_SPI_TransmitReceive+0x13e>
 800883e:	8a7b      	ldrh	r3, [r7, #18]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d169      	bne.n	8008918 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	881a      	ldrh	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	1c9a      	adds	r2, r3, #2
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008868:	e056      	b.n	8008918 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b02      	cmp	r3, #2
 8008876:	d11b      	bne.n	80088b0 <HAL_SPI_TransmitReceive+0x1aa>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800887c:	b29b      	uxth	r3, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d016      	beq.n	80088b0 <HAL_SPI_TransmitReceive+0x1aa>
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	2b01      	cmp	r3, #1
 8008886:	d113      	bne.n	80088b0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888c:	881a      	ldrh	r2, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008898:	1c9a      	adds	r2, r3, #2
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	3b01      	subs	r3, #1
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d11c      	bne.n	80088f8 <HAL_SPI_TransmitReceive+0x1f2>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d016      	beq.n	80088f8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68da      	ldr	r2, [r3, #12]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d4:	b292      	uxth	r2, r2
 80088d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088dc:	1c9a      	adds	r2, r3, #2
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	3b01      	subs	r3, #1
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088f4:	2301      	movs	r3, #1
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80088f8:	f7fa fdda 	bl	80034b0 <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008904:	429a      	cmp	r2, r3
 8008906:	d807      	bhi.n	8008918 <HAL_SPI_TransmitReceive+0x212>
 8008908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890e:	d003      	beq.n	8008918 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008916:	e0fb      	b.n	8008b10 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800891c:	b29b      	uxth	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1a3      	bne.n	800886a <HAL_SPI_TransmitReceive+0x164>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008928:	b29b      	uxth	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d19d      	bne.n	800886a <HAL_SPI_TransmitReceive+0x164>
 800892e:	e0df      	b.n	8008af0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <HAL_SPI_TransmitReceive+0x23a>
 8008938:	8a7b      	ldrh	r3, [r7, #18]
 800893a:	2b01      	cmp	r3, #1
 800893c:	f040 80cb 	bne.w	8008ad6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008944:	b29b      	uxth	r3, r3
 8008946:	2b01      	cmp	r3, #1
 8008948:	d912      	bls.n	8008970 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	881a      	ldrh	r2, [r3, #0]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895a:	1c9a      	adds	r2, r3, #2
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008964:	b29b      	uxth	r3, r3
 8008966:	3b02      	subs	r3, #2
 8008968:	b29a      	uxth	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800896e:	e0b2      	b.n	8008ad6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	330c      	adds	r3, #12
 800897a:	7812      	ldrb	r2, [r2, #0]
 800897c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008982:	1c5a      	adds	r2, r3, #1
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800898c:	b29b      	uxth	r3, r3
 800898e:	3b01      	subs	r3, #1
 8008990:	b29a      	uxth	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008996:	e09e      	b.n	8008ad6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d134      	bne.n	8008a10 <HAL_SPI_TransmitReceive+0x30a>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d02f      	beq.n	8008a10 <HAL_SPI_TransmitReceive+0x30a>
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d12c      	bne.n	8008a10 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d912      	bls.n	80089e6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c4:	881a      	ldrh	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d0:	1c9a      	adds	r2, r3, #2
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089da:	b29b      	uxth	r3, r3
 80089dc:	3b02      	subs	r3, #2
 80089de:	b29a      	uxth	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089e4:	e012      	b.n	8008a0c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	330c      	adds	r3, #12
 80089f0:	7812      	ldrb	r2, [r2, #0]
 80089f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	1c5a      	adds	r2, r3, #1
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	3b01      	subs	r3, #1
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d148      	bne.n	8008ab0 <HAL_SPI_TransmitReceive+0x3aa>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d042      	beq.n	8008ab0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d923      	bls.n	8008a7e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a40:	b292      	uxth	r2, r2
 8008a42:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a48:	1c9a      	adds	r2, r3, #2
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	3b02      	subs	r3, #2
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d81f      	bhi.n	8008aac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a7a:	605a      	str	r2, [r3, #4]
 8008a7c:	e016      	b.n	8008aac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f103 020c 	add.w	r2, r3, #12
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8a:	7812      	ldrb	r2, [r2, #0]
 8008a8c:	b2d2      	uxtb	r2, r2
 8008a8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008aac:	2301      	movs	r3, #1
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ab0:	f7fa fcfe 	bl	80034b0 <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d803      	bhi.n	8008ac8 <HAL_SPI_TransmitReceive+0x3c2>
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac6:	d102      	bne.n	8008ace <HAL_SPI_TransmitReceive+0x3c8>
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d103      	bne.n	8008ad6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008ad4:	e01c      	b.n	8008b10 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f47f af5b 	bne.w	8008998 <HAL_SPI_TransmitReceive+0x292>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f47f af54 	bne.w	8008998 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008af0:	69fa      	ldr	r2, [r7, #28]
 8008af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 f93d 	bl	8008d74 <SPI_EndRxTxTransaction>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d006      	beq.n	8008b0e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	661a      	str	r2, [r3, #96]	; 0x60
 8008b0c:	e000      	b.n	8008b10 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008b0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008b20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3728      	adds	r7, #40	; 0x28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b3a:	b2db      	uxtb	r3, r3
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b088      	sub	sp, #32
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	603b      	str	r3, [r7, #0]
 8008b54:	4613      	mov	r3, r2
 8008b56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008b58:	f7fa fcaa 	bl	80034b0 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	1a9b      	subs	r3, r3, r2
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	4413      	add	r3, r2
 8008b66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008b68:	f7fa fca2 	bl	80034b0 <HAL_GetTick>
 8008b6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008b6e:	4b39      	ldr	r3, [pc, #228]	; (8008c54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	015b      	lsls	r3, r3, #5
 8008b74:	0d1b      	lsrs	r3, r3, #20
 8008b76:	69fa      	ldr	r2, [r7, #28]
 8008b78:	fb02 f303 	mul.w	r3, r2, r3
 8008b7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b7e:	e054      	b.n	8008c2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b86:	d050      	beq.n	8008c2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b88:	f7fa fc92 	bl	80034b0 <HAL_GetTick>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	69fa      	ldr	r2, [r7, #28]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d902      	bls.n	8008b9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d13d      	bne.n	8008c1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008bac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bb6:	d111      	bne.n	8008bdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bc0:	d004      	beq.n	8008bcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bca:	d107      	bne.n	8008bdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008be4:	d10f      	bne.n	8008c06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e017      	b.n	8008c4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008c20:	2300      	movs	r3, #0
 8008c22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	689a      	ldr	r2, [r3, #8]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	4013      	ands	r3, r2
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	bf0c      	ite	eq
 8008c3a:	2301      	moveq	r3, #1
 8008c3c:	2300      	movne	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	461a      	mov	r2, r3
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d19b      	bne.n	8008b80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3720      	adds	r7, #32
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	20000000 	.word	0x20000000

08008c58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008c66:	f7fa fc23 	bl	80034b0 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	1a9b      	subs	r3, r3, r2
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	4413      	add	r3, r2
 8008c74:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c76:	f7fa fc1b 	bl	80034b0 <HAL_GetTick>
 8008c7a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008c7c:	4b3c      	ldr	r3, [pc, #240]	; (8008d70 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	4613      	mov	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	00da      	lsls	r2, r3, #3
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	0d1b      	lsrs	r3, r3, #20
 8008c8c:	69fa      	ldr	r2, [r7, #28]
 8008c8e:	fb02 f303 	mul.w	r3, r2, r3
 8008c92:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8008c94:	e05f      	b.n	8008d56 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008c9c:	d106      	bne.n	8008cac <SPI_WaitFifoStateUntilTimeout+0x54>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d103      	bne.n	8008cac <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	330c      	adds	r3, #12
 8008caa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb2:	d050      	beq.n	8008d56 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008cb4:	f7fa fbfc 	bl	80034b0 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	69fa      	ldr	r2, [r7, #28]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d902      	bls.n	8008cca <SPI_WaitFifoStateUntilTimeout+0x72>
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d13d      	bne.n	8008d46 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008cd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ce2:	d111      	bne.n	8008d08 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cec:	d004      	beq.n	8008cf8 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cf6:	d107      	bne.n	8008d08 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d10:	d10f      	bne.n	8008d32 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e010      	b.n	8008d68 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	3b01      	subs	r3, #1
 8008d54:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d197      	bne.n	8008c96 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3720      	adds	r7, #32
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	20000000 	.word	0x20000000

08008d74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f7ff ff63 	bl	8008c58 <SPI_WaitFifoStateUntilTimeout>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d007      	beq.n	8008da8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d9c:	f043 0220 	orr.w	r2, r3, #32
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e027      	b.n	8008df8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2200      	movs	r2, #0
 8008db0:	2180      	movs	r1, #128	; 0x80
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f7ff fec8 	bl	8008b48 <SPI_WaitFlagStateUntilTimeout>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d007      	beq.n	8008dce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc2:	f043 0220 	orr.w	r2, r3, #32
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e014      	b.n	8008df8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f7ff ff3c 	bl	8008c58 <SPI_WaitFifoStateUntilTimeout>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d007      	beq.n	8008df6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dea:	f043 0220 	orr.w	r2, r3, #32
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e000      	b.n	8008df8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e038      	b.n	8008e88 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d106      	bne.n	8008e30 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f7f9 ff92 	bl	8002d54 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3308      	adds	r3, #8
 8008e38:	4619      	mov	r1, r3
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	f001 fd8a 	bl	800a954 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6818      	ldr	r0, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	68b9      	ldr	r1, [r7, #8]
 8008e4c:	f001 fe5e 	bl	800ab0c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6858      	ldr	r0, [r3, #4]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	689a      	ldr	r2, [r3, #8]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	6879      	ldr	r1, [r7, #4]
 8008e5e:	f001 fea7 	bl	800abb0 <FMC_NORSRAM_Extended_Timing_Init>
                                                  hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	6892      	ldr	r2, [r2, #8]
 8008e6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	6892      	ldr	r2, [r2, #8]
 8008e76:	f041 0101 	orr.w	r1, r1, #1
 8008e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e049      	b.n	8008f36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d106      	bne.n	8008ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7f9 fe0e 	bl	8002ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	f000 f9e8 	bl	80092a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b082      	sub	sp, #8
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e049      	b.n	8008fe4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d106      	bne.n	8008f6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f841 	bl	8008fec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3304      	adds	r3, #4
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	f000 f991 	bl	80092a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2201      	movs	r2, #1
 8008f86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009012:	2b01      	cmp	r3, #1
 8009014:	d101      	bne.n	800901a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009016:	2302      	movs	r3, #2
 8009018:	e0fd      	b.n	8009216 <HAL_TIM_PWM_ConfigChannel+0x216>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b14      	cmp	r3, #20
 8009026:	f200 80f0 	bhi.w	800920a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800902a:	a201      	add	r2, pc, #4	; (adr r2, 8009030 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800902c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009030:	08009085 	.word	0x08009085
 8009034:	0800920b 	.word	0x0800920b
 8009038:	0800920b 	.word	0x0800920b
 800903c:	0800920b 	.word	0x0800920b
 8009040:	080090c5 	.word	0x080090c5
 8009044:	0800920b 	.word	0x0800920b
 8009048:	0800920b 	.word	0x0800920b
 800904c:	0800920b 	.word	0x0800920b
 8009050:	08009107 	.word	0x08009107
 8009054:	0800920b 	.word	0x0800920b
 8009058:	0800920b 	.word	0x0800920b
 800905c:	0800920b 	.word	0x0800920b
 8009060:	08009147 	.word	0x08009147
 8009064:	0800920b 	.word	0x0800920b
 8009068:	0800920b 	.word	0x0800920b
 800906c:	0800920b 	.word	0x0800920b
 8009070:	08009189 	.word	0x08009189
 8009074:	0800920b 	.word	0x0800920b
 8009078:	0800920b 	.word	0x0800920b
 800907c:	0800920b 	.word	0x0800920b
 8009080:	080091c9 	.word	0x080091c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68b9      	ldr	r1, [r7, #8]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 f9a4 	bl	80093d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	699a      	ldr	r2, [r3, #24]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f042 0208 	orr.w	r2, r2, #8
 800909e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	699a      	ldr	r2, [r3, #24]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f022 0204 	bic.w	r2, r2, #4
 80090ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6999      	ldr	r1, [r3, #24]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	691a      	ldr	r2, [r3, #16]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	619a      	str	r2, [r3, #24]
      break;
 80090c2:	e0a3      	b.n	800920c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68b9      	ldr	r1, [r7, #8]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 fa14 	bl	80094f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	699a      	ldr	r2, [r3, #24]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	699a      	ldr	r2, [r3, #24]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6999      	ldr	r1, [r3, #24]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	021a      	lsls	r2, r3, #8
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	619a      	str	r2, [r3, #24]
      break;
 8009104:	e082      	b.n	800920c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	4618      	mov	r0, r3
 800910e:	f000 fa7d 	bl	800960c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	69da      	ldr	r2, [r3, #28]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f042 0208 	orr.w	r2, r2, #8
 8009120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	69da      	ldr	r2, [r3, #28]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 0204 	bic.w	r2, r2, #4
 8009130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69d9      	ldr	r1, [r3, #28]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	691a      	ldr	r2, [r3, #16]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	61da      	str	r2, [r3, #28]
      break;
 8009144:	e062      	b.n	800920c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68b9      	ldr	r1, [r7, #8]
 800914c:	4618      	mov	r0, r3
 800914e:	f000 fae5 	bl	800971c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69da      	ldr	r2, [r3, #28]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	69da      	ldr	r2, [r3, #28]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	69d9      	ldr	r1, [r3, #28]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	021a      	lsls	r2, r3, #8
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	430a      	orrs	r2, r1
 8009184:	61da      	str	r2, [r3, #28]
      break;
 8009186:	e041      	b.n	800920c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68b9      	ldr	r1, [r7, #8]
 800918e:	4618      	mov	r0, r3
 8009190:	f000 fb2e 	bl	80097f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f042 0208 	orr.w	r2, r2, #8
 80091a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f022 0204 	bic.w	r2, r2, #4
 80091b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	691a      	ldr	r2, [r3, #16]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	430a      	orrs	r2, r1
 80091c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80091c6:	e021      	b.n	800920c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fb72 	bl	80098b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	021a      	lsls	r2, r3, #8
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	430a      	orrs	r2, r1
 8009206:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009208:	e000      	b.n	800920c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800920a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop

08009220 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009230:	2b01      	cmp	r3, #1
 8009232:	d101      	bne.n	8009238 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009234:	2302      	movs	r3, #2
 8009236:	e031      	b.n	800929c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2202      	movs	r2, #2
 8009244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fb9a 	bl	8009984 <TIM_SlaveTimer_SetConfig>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d009      	beq.n	800926a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e018      	b.n	800929c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68da      	ldr	r2, [r3, #12]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009278:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68da      	ldr	r2, [r3, #12]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009288:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a40      	ldr	r2, [pc, #256]	; (80093b8 <TIM_Base_SetConfig+0x114>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d013      	beq.n	80092e4 <TIM_Base_SetConfig+0x40>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092c2:	d00f      	beq.n	80092e4 <TIM_Base_SetConfig+0x40>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a3d      	ldr	r2, [pc, #244]	; (80093bc <TIM_Base_SetConfig+0x118>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d00b      	beq.n	80092e4 <TIM_Base_SetConfig+0x40>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a3c      	ldr	r2, [pc, #240]	; (80093c0 <TIM_Base_SetConfig+0x11c>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d007      	beq.n	80092e4 <TIM_Base_SetConfig+0x40>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a3b      	ldr	r2, [pc, #236]	; (80093c4 <TIM_Base_SetConfig+0x120>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d003      	beq.n	80092e4 <TIM_Base_SetConfig+0x40>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a3a      	ldr	r2, [pc, #232]	; (80093c8 <TIM_Base_SetConfig+0x124>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d108      	bne.n	80092f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a2f      	ldr	r2, [pc, #188]	; (80093b8 <TIM_Base_SetConfig+0x114>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d01f      	beq.n	800933e <TIM_Base_SetConfig+0x9a>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009304:	d01b      	beq.n	800933e <TIM_Base_SetConfig+0x9a>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a2c      	ldr	r2, [pc, #176]	; (80093bc <TIM_Base_SetConfig+0x118>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d017      	beq.n	800933e <TIM_Base_SetConfig+0x9a>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a2b      	ldr	r2, [pc, #172]	; (80093c0 <TIM_Base_SetConfig+0x11c>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d013      	beq.n	800933e <TIM_Base_SetConfig+0x9a>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a2a      	ldr	r2, [pc, #168]	; (80093c4 <TIM_Base_SetConfig+0x120>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d00f      	beq.n	800933e <TIM_Base_SetConfig+0x9a>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a29      	ldr	r2, [pc, #164]	; (80093c8 <TIM_Base_SetConfig+0x124>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d00b      	beq.n	800933e <TIM_Base_SetConfig+0x9a>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a28      	ldr	r2, [pc, #160]	; (80093cc <TIM_Base_SetConfig+0x128>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d007      	beq.n	800933e <TIM_Base_SetConfig+0x9a>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a27      	ldr	r2, [pc, #156]	; (80093d0 <TIM_Base_SetConfig+0x12c>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d003      	beq.n	800933e <TIM_Base_SetConfig+0x9a>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a26      	ldr	r2, [pc, #152]	; (80093d4 <TIM_Base_SetConfig+0x130>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d108      	bne.n	8009350 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	4313      	orrs	r3, r2
 800934e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	4313      	orrs	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	689a      	ldr	r2, [r3, #8]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a10      	ldr	r2, [pc, #64]	; (80093b8 <TIM_Base_SetConfig+0x114>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d00f      	beq.n	800939c <TIM_Base_SetConfig+0xf8>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a12      	ldr	r2, [pc, #72]	; (80093c8 <TIM_Base_SetConfig+0x124>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d00b      	beq.n	800939c <TIM_Base_SetConfig+0xf8>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a11      	ldr	r2, [pc, #68]	; (80093cc <TIM_Base_SetConfig+0x128>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d007      	beq.n	800939c <TIM_Base_SetConfig+0xf8>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a10      	ldr	r2, [pc, #64]	; (80093d0 <TIM_Base_SetConfig+0x12c>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d003      	beq.n	800939c <TIM_Base_SetConfig+0xf8>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a0f      	ldr	r2, [pc, #60]	; (80093d4 <TIM_Base_SetConfig+0x130>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d103      	bne.n	80093a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	691a      	ldr	r2, [r3, #16]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	615a      	str	r2, [r3, #20]
}
 80093aa:	bf00      	nop
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	40012c00 	.word	0x40012c00
 80093bc:	40000400 	.word	0x40000400
 80093c0:	40000800 	.word	0x40000800
 80093c4:	40000c00 	.word	0x40000c00
 80093c8:	40013400 	.word	0x40013400
 80093cc:	40014000 	.word	0x40014000
 80093d0:	40014400 	.word	0x40014400
 80093d4:	40014800 	.word	0x40014800

080093d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093d8:	b480      	push	{r7}
 80093da:	b087      	sub	sp, #28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	f023 0201 	bic.w	r2, r3, #1
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800940a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 0303 	bic.w	r3, r3, #3
 8009412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f023 0302 	bic.w	r3, r3, #2
 8009424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	4313      	orrs	r3, r2
 800942e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a2c      	ldr	r2, [pc, #176]	; (80094e4 <TIM_OC1_SetConfig+0x10c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d00f      	beq.n	8009458 <TIM_OC1_SetConfig+0x80>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a2b      	ldr	r2, [pc, #172]	; (80094e8 <TIM_OC1_SetConfig+0x110>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d00b      	beq.n	8009458 <TIM_OC1_SetConfig+0x80>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a2a      	ldr	r2, [pc, #168]	; (80094ec <TIM_OC1_SetConfig+0x114>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d007      	beq.n	8009458 <TIM_OC1_SetConfig+0x80>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a29      	ldr	r2, [pc, #164]	; (80094f0 <TIM_OC1_SetConfig+0x118>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d003      	beq.n	8009458 <TIM_OC1_SetConfig+0x80>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a28      	ldr	r2, [pc, #160]	; (80094f4 <TIM_OC1_SetConfig+0x11c>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d10c      	bne.n	8009472 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f023 0308 	bic.w	r3, r3, #8
 800945e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	4313      	orrs	r3, r2
 8009468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f023 0304 	bic.w	r3, r3, #4
 8009470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a1b      	ldr	r2, [pc, #108]	; (80094e4 <TIM_OC1_SetConfig+0x10c>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d00f      	beq.n	800949a <TIM_OC1_SetConfig+0xc2>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a1a      	ldr	r2, [pc, #104]	; (80094e8 <TIM_OC1_SetConfig+0x110>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00b      	beq.n	800949a <TIM_OC1_SetConfig+0xc2>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a19      	ldr	r2, [pc, #100]	; (80094ec <TIM_OC1_SetConfig+0x114>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d007      	beq.n	800949a <TIM_OC1_SetConfig+0xc2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a18      	ldr	r2, [pc, #96]	; (80094f0 <TIM_OC1_SetConfig+0x118>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d003      	beq.n	800949a <TIM_OC1_SetConfig+0xc2>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a17      	ldr	r2, [pc, #92]	; (80094f4 <TIM_OC1_SetConfig+0x11c>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d111      	bne.n	80094be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	621a      	str	r2, [r3, #32]
}
 80094d8:	bf00      	nop
 80094da:	371c      	adds	r7, #28
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	40012c00 	.word	0x40012c00
 80094e8:	40013400 	.word	0x40013400
 80094ec:	40014000 	.word	0x40014000
 80094f0:	40014400 	.word	0x40014400
 80094f4:	40014800 	.word	0x40014800

080094f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b087      	sub	sp, #28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	f023 0210 	bic.w	r2, r3, #16
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800952a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	021b      	lsls	r3, r3, #8
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	4313      	orrs	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f023 0320 	bic.w	r3, r3, #32
 8009546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	011b      	lsls	r3, r3, #4
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4313      	orrs	r3, r2
 8009552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a28      	ldr	r2, [pc, #160]	; (80095f8 <TIM_OC2_SetConfig+0x100>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d003      	beq.n	8009564 <TIM_OC2_SetConfig+0x6c>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a27      	ldr	r2, [pc, #156]	; (80095fc <TIM_OC2_SetConfig+0x104>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d10d      	bne.n	8009580 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800956a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	011b      	lsls	r3, r3, #4
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	4313      	orrs	r3, r2
 8009576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800957e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a1d      	ldr	r2, [pc, #116]	; (80095f8 <TIM_OC2_SetConfig+0x100>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d00f      	beq.n	80095a8 <TIM_OC2_SetConfig+0xb0>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a1c      	ldr	r2, [pc, #112]	; (80095fc <TIM_OC2_SetConfig+0x104>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d00b      	beq.n	80095a8 <TIM_OC2_SetConfig+0xb0>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a1b      	ldr	r2, [pc, #108]	; (8009600 <TIM_OC2_SetConfig+0x108>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d007      	beq.n	80095a8 <TIM_OC2_SetConfig+0xb0>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a1a      	ldr	r2, [pc, #104]	; (8009604 <TIM_OC2_SetConfig+0x10c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d003      	beq.n	80095a8 <TIM_OC2_SetConfig+0xb0>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a19      	ldr	r2, [pc, #100]	; (8009608 <TIM_OC2_SetConfig+0x110>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d113      	bne.n	80095d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	621a      	str	r2, [r3, #32]
}
 80095ea:	bf00      	nop
 80095ec:	371c      	adds	r7, #28
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	40012c00 	.word	0x40012c00
 80095fc:	40013400 	.word	0x40013400
 8009600:	40014000 	.word	0x40014000
 8009604:	40014400 	.word	0x40014400
 8009608:	40014800 	.word	0x40014800

0800960c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a1b      	ldr	r3, [r3, #32]
 800961a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800963a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800963e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f023 0303 	bic.w	r3, r3, #3
 8009646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	021b      	lsls	r3, r3, #8
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	4313      	orrs	r3, r2
 8009664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a27      	ldr	r2, [pc, #156]	; (8009708 <TIM_OC3_SetConfig+0xfc>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d003      	beq.n	8009676 <TIM_OC3_SetConfig+0x6a>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a26      	ldr	r2, [pc, #152]	; (800970c <TIM_OC3_SetConfig+0x100>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d10d      	bne.n	8009692 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800967c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	4313      	orrs	r3, r2
 8009688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a1c      	ldr	r2, [pc, #112]	; (8009708 <TIM_OC3_SetConfig+0xfc>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d00f      	beq.n	80096ba <TIM_OC3_SetConfig+0xae>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a1b      	ldr	r2, [pc, #108]	; (800970c <TIM_OC3_SetConfig+0x100>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d00b      	beq.n	80096ba <TIM_OC3_SetConfig+0xae>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a1a      	ldr	r2, [pc, #104]	; (8009710 <TIM_OC3_SetConfig+0x104>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d007      	beq.n	80096ba <TIM_OC3_SetConfig+0xae>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a19      	ldr	r2, [pc, #100]	; (8009714 <TIM_OC3_SetConfig+0x108>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d003      	beq.n	80096ba <TIM_OC3_SetConfig+0xae>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a18      	ldr	r2, [pc, #96]	; (8009718 <TIM_OC3_SetConfig+0x10c>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d113      	bne.n	80096e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	011b      	lsls	r3, r3, #4
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	011b      	lsls	r3, r3, #4
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	4313      	orrs	r3, r2
 80096e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	621a      	str	r2, [r3, #32]
}
 80096fc:	bf00      	nop
 80096fe:	371c      	adds	r7, #28
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	40012c00 	.word	0x40012c00
 800970c:	40013400 	.word	0x40013400
 8009710:	40014000 	.word	0x40014000
 8009714:	40014400 	.word	0x40014400
 8009718:	40014800 	.word	0x40014800

0800971c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800974a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800974e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	021b      	lsls	r3, r3, #8
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	4313      	orrs	r3, r2
 8009762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800976a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	031b      	lsls	r3, r3, #12
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	4313      	orrs	r3, r2
 8009776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a18      	ldr	r2, [pc, #96]	; (80097dc <TIM_OC4_SetConfig+0xc0>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d00f      	beq.n	80097a0 <TIM_OC4_SetConfig+0x84>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a17      	ldr	r2, [pc, #92]	; (80097e0 <TIM_OC4_SetConfig+0xc4>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d00b      	beq.n	80097a0 <TIM_OC4_SetConfig+0x84>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a16      	ldr	r2, [pc, #88]	; (80097e4 <TIM_OC4_SetConfig+0xc8>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d007      	beq.n	80097a0 <TIM_OC4_SetConfig+0x84>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a15      	ldr	r2, [pc, #84]	; (80097e8 <TIM_OC4_SetConfig+0xcc>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d003      	beq.n	80097a0 <TIM_OC4_SetConfig+0x84>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a14      	ldr	r2, [pc, #80]	; (80097ec <TIM_OC4_SetConfig+0xd0>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d109      	bne.n	80097b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	695b      	ldr	r3, [r3, #20]
 80097ac:	019b      	lsls	r3, r3, #6
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	621a      	str	r2, [r3, #32]
}
 80097ce:	bf00      	nop
 80097d0:	371c      	adds	r7, #28
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	40012c00 	.word	0x40012c00
 80097e0:	40013400 	.word	0x40013400
 80097e4:	40014000 	.word	0x40014000
 80097e8:	40014400 	.word	0x40014400
 80097ec:	40014800 	.word	0x40014800

080097f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b087      	sub	sp, #28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a1b      	ldr	r3, [r3, #32]
 80097fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800981e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	4313      	orrs	r3, r2
 800982c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009834:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	041b      	lsls	r3, r3, #16
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	4313      	orrs	r3, r2
 8009840:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a17      	ldr	r2, [pc, #92]	; (80098a4 <TIM_OC5_SetConfig+0xb4>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d00f      	beq.n	800986a <TIM_OC5_SetConfig+0x7a>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a16      	ldr	r2, [pc, #88]	; (80098a8 <TIM_OC5_SetConfig+0xb8>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d00b      	beq.n	800986a <TIM_OC5_SetConfig+0x7a>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a15      	ldr	r2, [pc, #84]	; (80098ac <TIM_OC5_SetConfig+0xbc>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d007      	beq.n	800986a <TIM_OC5_SetConfig+0x7a>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a14      	ldr	r2, [pc, #80]	; (80098b0 <TIM_OC5_SetConfig+0xc0>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d003      	beq.n	800986a <TIM_OC5_SetConfig+0x7a>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a13      	ldr	r2, [pc, #76]	; (80098b4 <TIM_OC5_SetConfig+0xc4>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d109      	bne.n	800987e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009870:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	021b      	lsls	r3, r3, #8
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	4313      	orrs	r3, r2
 800987c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	621a      	str	r2, [r3, #32]
}
 8009898:	bf00      	nop
 800989a:	371c      	adds	r7, #28
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr
 80098a4:	40012c00 	.word	0x40012c00
 80098a8:	40013400 	.word	0x40013400
 80098ac:	40014000 	.word	0x40014000
 80098b0:	40014400 	.word	0x40014400
 80098b4:	40014800 	.word	0x40014800

080098b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b087      	sub	sp, #28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	021b      	lsls	r3, r3, #8
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	051b      	lsls	r3, r3, #20
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	4313      	orrs	r3, r2
 800990a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a18      	ldr	r2, [pc, #96]	; (8009970 <TIM_OC6_SetConfig+0xb8>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d00f      	beq.n	8009934 <TIM_OC6_SetConfig+0x7c>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a17      	ldr	r2, [pc, #92]	; (8009974 <TIM_OC6_SetConfig+0xbc>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d00b      	beq.n	8009934 <TIM_OC6_SetConfig+0x7c>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a16      	ldr	r2, [pc, #88]	; (8009978 <TIM_OC6_SetConfig+0xc0>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d007      	beq.n	8009934 <TIM_OC6_SetConfig+0x7c>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a15      	ldr	r2, [pc, #84]	; (800997c <TIM_OC6_SetConfig+0xc4>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d003      	beq.n	8009934 <TIM_OC6_SetConfig+0x7c>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a14      	ldr	r2, [pc, #80]	; (8009980 <TIM_OC6_SetConfig+0xc8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d109      	bne.n	8009948 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800993a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	029b      	lsls	r3, r3, #10
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	4313      	orrs	r3, r2
 8009946:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	621a      	str	r2, [r3, #32]
}
 8009962:	bf00      	nop
 8009964:	371c      	adds	r7, #28
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	40012c00 	.word	0x40012c00
 8009974:	40013400 	.word	0x40013400
 8009978:	40014000 	.word	0x40014000
 800997c:	40014400 	.word	0x40014400
 8009980:	40014800 	.word	0x40014800

08009984 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800999c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099a0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099b2:	f023 0307 	bic.w	r3, r3, #7
 80099b6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	4313      	orrs	r3, r2
 80099c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	2b70      	cmp	r3, #112	; 0x70
 80099d0:	d01a      	beq.n	8009a08 <TIM_SlaveTimer_SetConfig+0x84>
 80099d2:	2b70      	cmp	r3, #112	; 0x70
 80099d4:	d860      	bhi.n	8009a98 <TIM_SlaveTimer_SetConfig+0x114>
 80099d6:	2b60      	cmp	r3, #96	; 0x60
 80099d8:	d054      	beq.n	8009a84 <TIM_SlaveTimer_SetConfig+0x100>
 80099da:	2b60      	cmp	r3, #96	; 0x60
 80099dc:	d85c      	bhi.n	8009a98 <TIM_SlaveTimer_SetConfig+0x114>
 80099de:	2b50      	cmp	r3, #80	; 0x50
 80099e0:	d046      	beq.n	8009a70 <TIM_SlaveTimer_SetConfig+0xec>
 80099e2:	2b50      	cmp	r3, #80	; 0x50
 80099e4:	d858      	bhi.n	8009a98 <TIM_SlaveTimer_SetConfig+0x114>
 80099e6:	2b40      	cmp	r3, #64	; 0x40
 80099e8:	d019      	beq.n	8009a1e <TIM_SlaveTimer_SetConfig+0x9a>
 80099ea:	2b40      	cmp	r3, #64	; 0x40
 80099ec:	d854      	bhi.n	8009a98 <TIM_SlaveTimer_SetConfig+0x114>
 80099ee:	2b30      	cmp	r3, #48	; 0x30
 80099f0:	d054      	beq.n	8009a9c <TIM_SlaveTimer_SetConfig+0x118>
 80099f2:	2b30      	cmp	r3, #48	; 0x30
 80099f4:	d850      	bhi.n	8009a98 <TIM_SlaveTimer_SetConfig+0x114>
 80099f6:	2b20      	cmp	r3, #32
 80099f8:	d050      	beq.n	8009a9c <TIM_SlaveTimer_SetConfig+0x118>
 80099fa:	2b20      	cmp	r3, #32
 80099fc:	d84c      	bhi.n	8009a98 <TIM_SlaveTimer_SetConfig+0x114>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d04c      	beq.n	8009a9c <TIM_SlaveTimer_SetConfig+0x118>
 8009a02:	2b10      	cmp	r3, #16
 8009a04:	d04a      	beq.n	8009a9c <TIM_SlaveTimer_SetConfig+0x118>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8009a06:	e047      	b.n	8009a98 <TIM_SlaveTimer_SetConfig+0x114>
      TIM_ETR_SetConfig(htim->Instance,
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6818      	ldr	r0, [r3, #0]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	68d9      	ldr	r1, [r3, #12]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	689a      	ldr	r2, [r3, #8]
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	f000 f8a5 	bl	8009b66 <TIM_ETR_SetConfig>
      break;
 8009a1c:	e03f      	b.n	8009a9e <TIM_SlaveTimer_SetConfig+0x11a>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b05      	cmp	r3, #5
 8009a24:	d101      	bne.n	8009a2a <TIM_SlaveTimer_SetConfig+0xa6>
        return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e03a      	b.n	8009aa0 <TIM_SlaveTimer_SetConfig+0x11c>
      tmpccer = htim->Instance->CCER;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6a1b      	ldr	r3, [r3, #32]
 8009a30:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6a1a      	ldr	r2, [r3, #32]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f022 0201 	bic.w	r2, r2, #1
 8009a40:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a50:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	011b      	lsls	r3, r3, #4
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	621a      	str	r2, [r3, #32]
      break;
 8009a6e:	e016      	b.n	8009a9e <TIM_SlaveTimer_SetConfig+0x11a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6818      	ldr	r0, [r3, #0]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	6899      	ldr	r1, [r3, #8]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	f000 f813 	bl	8009aa8 <TIM_TI1_ConfigInputStage>
      break;
 8009a82:	e00c      	b.n	8009a9e <TIM_SlaveTimer_SetConfig+0x11a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6818      	ldr	r0, [r3, #0]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	6899      	ldr	r1, [r3, #8]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	461a      	mov	r2, r3
 8009a92:	f000 f838 	bl	8009b06 <TIM_TI2_ConfigInputStage>
      break;
 8009a96:	e002      	b.n	8009a9e <TIM_SlaveTimer_SetConfig+0x11a>
      break;
 8009a98:	bf00      	nop
 8009a9a:	e000      	b.n	8009a9e <TIM_SlaveTimer_SetConfig+0x11a>
        break;
 8009a9c:	bf00      	nop
  }
  return HAL_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3718      	adds	r7, #24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b087      	sub	sp, #28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6a1b      	ldr	r3, [r3, #32]
 8009ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	f023 0201 	bic.w	r2, r3, #1
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	011b      	lsls	r3, r3, #4
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	f023 030a 	bic.w	r3, r3, #10
 8009ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	621a      	str	r2, [r3, #32]
}
 8009afa:	bf00      	nop
 8009afc:	371c      	adds	r7, #28
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b06:	b480      	push	{r7}
 8009b08:	b087      	sub	sp, #28
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	60f8      	str	r0, [r7, #12]
 8009b0e:	60b9      	str	r1, [r7, #8]
 8009b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	f023 0210 	bic.w	r2, r3, #16
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6a1b      	ldr	r3, [r3, #32]
 8009b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	031b      	lsls	r3, r3, #12
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	011b      	lsls	r3, r3, #4
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	621a      	str	r2, [r3, #32]
}
 8009b5a:	bf00      	nop
 8009b5c:	371c      	adds	r7, #28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b66:	b480      	push	{r7}
 8009b68:	b087      	sub	sp, #28
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	60f8      	str	r0, [r7, #12]
 8009b6e:	60b9      	str	r1, [r7, #8]
 8009b70:	607a      	str	r2, [r7, #4]
 8009b72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	021a      	lsls	r2, r3, #8
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	431a      	orrs	r2, r3
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	609a      	str	r2, [r3, #8]
}
 8009b9a:	bf00      	nop
 8009b9c:	371c      	adds	r7, #28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
	...

08009ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d101      	bne.n	8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	e068      	b.n	8009c92 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2202      	movs	r2, #2
 8009bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a2e      	ldr	r2, [pc, #184]	; (8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d004      	beq.n	8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a2d      	ldr	r2, [pc, #180]	; (8009ca4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d108      	bne.n	8009c06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009bfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a1e      	ldr	r2, [pc, #120]	; (8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d01d      	beq.n	8009c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c32:	d018      	beq.n	8009c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a1b      	ldr	r2, [pc, #108]	; (8009ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d013      	beq.n	8009c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a1a      	ldr	r2, [pc, #104]	; (8009cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d00e      	beq.n	8009c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a18      	ldr	r2, [pc, #96]	; (8009cb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d009      	beq.n	8009c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a13      	ldr	r2, [pc, #76]	; (8009ca4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d004      	beq.n	8009c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a14      	ldr	r2, [pc, #80]	; (8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d10c      	bne.n	8009c80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3714      	adds	r7, #20
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	40012c00 	.word	0x40012c00
 8009ca4:	40013400 	.word	0x40013400
 8009ca8:	40000400 	.word	0x40000400
 8009cac:	40000800 	.word	0x40000800
 8009cb0:	40000c00 	.word	0x40000c00
 8009cb4:	40014000 	.word	0x40014000

08009cb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d101      	bne.n	8009cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	e087      	b.n	8009de4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	695b      	ldr	r3, [r3, #20]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	041b      	lsls	r3, r3, #16
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a27      	ldr	r2, [pc, #156]	; (8009df0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d004      	beq.n	8009d62 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a25      	ldr	r2, [pc, #148]	; (8009df4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d106      	bne.n	8009d70 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a1e      	ldr	r2, [pc, #120]	; (8009df0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d004      	beq.n	8009d84 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a1d      	ldr	r2, [pc, #116]	; (8009df4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d126      	bne.n	8009dd2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d8e:	051b      	lsls	r3, r3, #20
 8009d90:	4313      	orrs	r3, r2
 8009d92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dac:	4313      	orrs	r3, r2
 8009dae:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a0e      	ldr	r2, [pc, #56]	; (8009df0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d004      	beq.n	8009dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a0d      	ldr	r2, [pc, #52]	; (8009df4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d106      	bne.n	8009dd2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	40012c00 	.word	0x40012c00
 8009df4:	40013400 	.word	0x40013400

08009df8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e042      	b.n	8009e90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d106      	bne.n	8009e22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7f8 fcfb 	bl	8002818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2224      	movs	r2, #36	; 0x24
 8009e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f022 0201 	bic.w	r2, r2, #1
 8009e38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f82c 	bl	8009e98 <UART_SetConfig>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d101      	bne.n	8009e4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e022      	b.n	8009e90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 faf4 	bl	800a440 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685a      	ldr	r2, [r3, #4]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	689a      	ldr	r2, [r3, #8]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f042 0201 	orr.w	r2, r2, #1
 8009e86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fb7b 	bl	800a584 <UART_CheckIdleState>
 8009e8e:	4603      	mov	r3, r0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e98:	b5b0      	push	{r4, r5, r7, lr}
 8009e9a:	b088      	sub	sp, #32
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	689a      	ldr	r2, [r3, #8]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	431a      	orrs	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	695b      	ldr	r3, [r3, #20]
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ec0:	69fa      	ldr	r2, [r7, #28]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	4bb1      	ldr	r3, [pc, #708]	; (800a194 <UART_SetConfig+0x2fc>)
 8009ece:	4013      	ands	r3, r2
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	6812      	ldr	r2, [r2, #0]
 8009ed4:	69f9      	ldr	r1, [r7, #28]
 8009ed6:	430b      	orrs	r3, r1
 8009ed8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	68da      	ldr	r2, [r3, #12]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	430a      	orrs	r2, r1
 8009eee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4aa7      	ldr	r2, [pc, #668]	; (800a198 <UART_SetConfig+0x300>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d004      	beq.n	8009f0a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a1b      	ldr	r3, [r3, #32]
 8009f04:	69fa      	ldr	r2, [r7, #28]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009f14:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	6812      	ldr	r2, [r2, #0]
 8009f1c:	69f9      	ldr	r1, [r7, #28]
 8009f1e:	430b      	orrs	r3, r1
 8009f20:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	f023 010f 	bic.w	r1, r3, #15
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	430a      	orrs	r2, r1
 8009f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a97      	ldr	r2, [pc, #604]	; (800a19c <UART_SetConfig+0x304>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d121      	bne.n	8009f86 <UART_SetConfig+0xee>
 8009f42:	4b97      	ldr	r3, [pc, #604]	; (800a1a0 <UART_SetConfig+0x308>)
 8009f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f48:	f003 0303 	and.w	r3, r3, #3
 8009f4c:	2b03      	cmp	r3, #3
 8009f4e:	d817      	bhi.n	8009f80 <UART_SetConfig+0xe8>
 8009f50:	a201      	add	r2, pc, #4	; (adr r2, 8009f58 <UART_SetConfig+0xc0>)
 8009f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f56:	bf00      	nop
 8009f58:	08009f69 	.word	0x08009f69
 8009f5c:	08009f75 	.word	0x08009f75
 8009f60:	08009f6f 	.word	0x08009f6f
 8009f64:	08009f7b 	.word	0x08009f7b
 8009f68:	2301      	movs	r3, #1
 8009f6a:	76fb      	strb	r3, [r7, #27]
 8009f6c:	e0e7      	b.n	800a13e <UART_SetConfig+0x2a6>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	76fb      	strb	r3, [r7, #27]
 8009f72:	e0e4      	b.n	800a13e <UART_SetConfig+0x2a6>
 8009f74:	2304      	movs	r3, #4
 8009f76:	76fb      	strb	r3, [r7, #27]
 8009f78:	e0e1      	b.n	800a13e <UART_SetConfig+0x2a6>
 8009f7a:	2308      	movs	r3, #8
 8009f7c:	76fb      	strb	r3, [r7, #27]
 8009f7e:	e0de      	b.n	800a13e <UART_SetConfig+0x2a6>
 8009f80:	2310      	movs	r3, #16
 8009f82:	76fb      	strb	r3, [r7, #27]
 8009f84:	e0db      	b.n	800a13e <UART_SetConfig+0x2a6>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a86      	ldr	r2, [pc, #536]	; (800a1a4 <UART_SetConfig+0x30c>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d132      	bne.n	8009ff6 <UART_SetConfig+0x15e>
 8009f90:	4b83      	ldr	r3, [pc, #524]	; (800a1a0 <UART_SetConfig+0x308>)
 8009f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f96:	f003 030c 	and.w	r3, r3, #12
 8009f9a:	2b0c      	cmp	r3, #12
 8009f9c:	d828      	bhi.n	8009ff0 <UART_SetConfig+0x158>
 8009f9e:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <UART_SetConfig+0x10c>)
 8009fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa4:	08009fd9 	.word	0x08009fd9
 8009fa8:	08009ff1 	.word	0x08009ff1
 8009fac:	08009ff1 	.word	0x08009ff1
 8009fb0:	08009ff1 	.word	0x08009ff1
 8009fb4:	08009fe5 	.word	0x08009fe5
 8009fb8:	08009ff1 	.word	0x08009ff1
 8009fbc:	08009ff1 	.word	0x08009ff1
 8009fc0:	08009ff1 	.word	0x08009ff1
 8009fc4:	08009fdf 	.word	0x08009fdf
 8009fc8:	08009ff1 	.word	0x08009ff1
 8009fcc:	08009ff1 	.word	0x08009ff1
 8009fd0:	08009ff1 	.word	0x08009ff1
 8009fd4:	08009feb 	.word	0x08009feb
 8009fd8:	2300      	movs	r3, #0
 8009fda:	76fb      	strb	r3, [r7, #27]
 8009fdc:	e0af      	b.n	800a13e <UART_SetConfig+0x2a6>
 8009fde:	2302      	movs	r3, #2
 8009fe0:	76fb      	strb	r3, [r7, #27]
 8009fe2:	e0ac      	b.n	800a13e <UART_SetConfig+0x2a6>
 8009fe4:	2304      	movs	r3, #4
 8009fe6:	76fb      	strb	r3, [r7, #27]
 8009fe8:	e0a9      	b.n	800a13e <UART_SetConfig+0x2a6>
 8009fea:	2308      	movs	r3, #8
 8009fec:	76fb      	strb	r3, [r7, #27]
 8009fee:	e0a6      	b.n	800a13e <UART_SetConfig+0x2a6>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	76fb      	strb	r3, [r7, #27]
 8009ff4:	e0a3      	b.n	800a13e <UART_SetConfig+0x2a6>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a6b      	ldr	r2, [pc, #428]	; (800a1a8 <UART_SetConfig+0x310>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d120      	bne.n	800a042 <UART_SetConfig+0x1aa>
 800a000:	4b67      	ldr	r3, [pc, #412]	; (800a1a0 <UART_SetConfig+0x308>)
 800a002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a006:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a00a:	2b30      	cmp	r3, #48	; 0x30
 800a00c:	d013      	beq.n	800a036 <UART_SetConfig+0x19e>
 800a00e:	2b30      	cmp	r3, #48	; 0x30
 800a010:	d814      	bhi.n	800a03c <UART_SetConfig+0x1a4>
 800a012:	2b20      	cmp	r3, #32
 800a014:	d009      	beq.n	800a02a <UART_SetConfig+0x192>
 800a016:	2b20      	cmp	r3, #32
 800a018:	d810      	bhi.n	800a03c <UART_SetConfig+0x1a4>
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <UART_SetConfig+0x18c>
 800a01e:	2b10      	cmp	r3, #16
 800a020:	d006      	beq.n	800a030 <UART_SetConfig+0x198>
 800a022:	e00b      	b.n	800a03c <UART_SetConfig+0x1a4>
 800a024:	2300      	movs	r3, #0
 800a026:	76fb      	strb	r3, [r7, #27]
 800a028:	e089      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a02a:	2302      	movs	r3, #2
 800a02c:	76fb      	strb	r3, [r7, #27]
 800a02e:	e086      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a030:	2304      	movs	r3, #4
 800a032:	76fb      	strb	r3, [r7, #27]
 800a034:	e083      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a036:	2308      	movs	r3, #8
 800a038:	76fb      	strb	r3, [r7, #27]
 800a03a:	e080      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a03c:	2310      	movs	r3, #16
 800a03e:	76fb      	strb	r3, [r7, #27]
 800a040:	e07d      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a59      	ldr	r2, [pc, #356]	; (800a1ac <UART_SetConfig+0x314>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d120      	bne.n	800a08e <UART_SetConfig+0x1f6>
 800a04c:	4b54      	ldr	r3, [pc, #336]	; (800a1a0 <UART_SetConfig+0x308>)
 800a04e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a052:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a056:	2bc0      	cmp	r3, #192	; 0xc0
 800a058:	d013      	beq.n	800a082 <UART_SetConfig+0x1ea>
 800a05a:	2bc0      	cmp	r3, #192	; 0xc0
 800a05c:	d814      	bhi.n	800a088 <UART_SetConfig+0x1f0>
 800a05e:	2b80      	cmp	r3, #128	; 0x80
 800a060:	d009      	beq.n	800a076 <UART_SetConfig+0x1de>
 800a062:	2b80      	cmp	r3, #128	; 0x80
 800a064:	d810      	bhi.n	800a088 <UART_SetConfig+0x1f0>
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <UART_SetConfig+0x1d8>
 800a06a:	2b40      	cmp	r3, #64	; 0x40
 800a06c:	d006      	beq.n	800a07c <UART_SetConfig+0x1e4>
 800a06e:	e00b      	b.n	800a088 <UART_SetConfig+0x1f0>
 800a070:	2300      	movs	r3, #0
 800a072:	76fb      	strb	r3, [r7, #27]
 800a074:	e063      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a076:	2302      	movs	r3, #2
 800a078:	76fb      	strb	r3, [r7, #27]
 800a07a:	e060      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a07c:	2304      	movs	r3, #4
 800a07e:	76fb      	strb	r3, [r7, #27]
 800a080:	e05d      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a082:	2308      	movs	r3, #8
 800a084:	76fb      	strb	r3, [r7, #27]
 800a086:	e05a      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a088:	2310      	movs	r3, #16
 800a08a:	76fb      	strb	r3, [r7, #27]
 800a08c:	e057      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a47      	ldr	r2, [pc, #284]	; (800a1b0 <UART_SetConfig+0x318>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d125      	bne.n	800a0e4 <UART_SetConfig+0x24c>
 800a098:	4b41      	ldr	r3, [pc, #260]	; (800a1a0 <UART_SetConfig+0x308>)
 800a09a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a09e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0a6:	d017      	beq.n	800a0d8 <UART_SetConfig+0x240>
 800a0a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0ac:	d817      	bhi.n	800a0de <UART_SetConfig+0x246>
 800a0ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0b2:	d00b      	beq.n	800a0cc <UART_SetConfig+0x234>
 800a0b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0b8:	d811      	bhi.n	800a0de <UART_SetConfig+0x246>
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d003      	beq.n	800a0c6 <UART_SetConfig+0x22e>
 800a0be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0c2:	d006      	beq.n	800a0d2 <UART_SetConfig+0x23a>
 800a0c4:	e00b      	b.n	800a0de <UART_SetConfig+0x246>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	76fb      	strb	r3, [r7, #27]
 800a0ca:	e038      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	76fb      	strb	r3, [r7, #27]
 800a0d0:	e035      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a0d2:	2304      	movs	r3, #4
 800a0d4:	76fb      	strb	r3, [r7, #27]
 800a0d6:	e032      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a0d8:	2308      	movs	r3, #8
 800a0da:	76fb      	strb	r3, [r7, #27]
 800a0dc:	e02f      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a0de:	2310      	movs	r3, #16
 800a0e0:	76fb      	strb	r3, [r7, #27]
 800a0e2:	e02c      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a2b      	ldr	r2, [pc, #172]	; (800a198 <UART_SetConfig+0x300>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d125      	bne.n	800a13a <UART_SetConfig+0x2a2>
 800a0ee:	4b2c      	ldr	r3, [pc, #176]	; (800a1a0 <UART_SetConfig+0x308>)
 800a0f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a0f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0fc:	d017      	beq.n	800a12e <UART_SetConfig+0x296>
 800a0fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a102:	d817      	bhi.n	800a134 <UART_SetConfig+0x29c>
 800a104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a108:	d00b      	beq.n	800a122 <UART_SetConfig+0x28a>
 800a10a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a10e:	d811      	bhi.n	800a134 <UART_SetConfig+0x29c>
 800a110:	2b00      	cmp	r3, #0
 800a112:	d003      	beq.n	800a11c <UART_SetConfig+0x284>
 800a114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a118:	d006      	beq.n	800a128 <UART_SetConfig+0x290>
 800a11a:	e00b      	b.n	800a134 <UART_SetConfig+0x29c>
 800a11c:	2300      	movs	r3, #0
 800a11e:	76fb      	strb	r3, [r7, #27]
 800a120:	e00d      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a122:	2302      	movs	r3, #2
 800a124:	76fb      	strb	r3, [r7, #27]
 800a126:	e00a      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a128:	2304      	movs	r3, #4
 800a12a:	76fb      	strb	r3, [r7, #27]
 800a12c:	e007      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a12e:	2308      	movs	r3, #8
 800a130:	76fb      	strb	r3, [r7, #27]
 800a132:	e004      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a134:	2310      	movs	r3, #16
 800a136:	76fb      	strb	r3, [r7, #27]
 800a138:	e001      	b.n	800a13e <UART_SetConfig+0x2a6>
 800a13a:	2310      	movs	r3, #16
 800a13c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a15      	ldr	r2, [pc, #84]	; (800a198 <UART_SetConfig+0x300>)
 800a144:	4293      	cmp	r3, r2
 800a146:	f040 80a3 	bne.w	800a290 <UART_SetConfig+0x3f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a14a:	7efb      	ldrb	r3, [r7, #27]
 800a14c:	2b08      	cmp	r3, #8
 800a14e:	d83b      	bhi.n	800a1c8 <UART_SetConfig+0x330>
 800a150:	a201      	add	r2, pc, #4	; (adr r2, 800a158 <UART_SetConfig+0x2c0>)
 800a152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a156:	bf00      	nop
 800a158:	0800a17d 	.word	0x0800a17d
 800a15c:	0800a185 	.word	0x0800a185
 800a160:	0800a18d 	.word	0x0800a18d
 800a164:	0800a1c9 	.word	0x0800a1c9
 800a168:	0800a1b9 	.word	0x0800a1b9
 800a16c:	0800a1c9 	.word	0x0800a1c9
 800a170:	0800a1c9 	.word	0x0800a1c9
 800a174:	0800a1c9 	.word	0x0800a1c9
 800a178:	0800a1c1 	.word	0x0800a1c1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a17c:	f7fc f89c 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 800a180:	6178      	str	r0, [r7, #20]
        break;
 800a182:	e026      	b.n	800a1d2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a184:	f7fc f8ac 	bl	80062e0 <HAL_RCC_GetPCLK2Freq>
 800a188:	6178      	str	r0, [r7, #20]
        break;
 800a18a:	e022      	b.n	800a1d2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a18c:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <UART_SetConfig+0x31c>)
 800a18e:	617b      	str	r3, [r7, #20]
        break;
 800a190:	e01f      	b.n	800a1d2 <UART_SetConfig+0x33a>
 800a192:	bf00      	nop
 800a194:	cfff69f3 	.word	0xcfff69f3
 800a198:	40008000 	.word	0x40008000
 800a19c:	40013800 	.word	0x40013800
 800a1a0:	40021000 	.word	0x40021000
 800a1a4:	40004400 	.word	0x40004400
 800a1a8:	40004800 	.word	0x40004800
 800a1ac:	40004c00 	.word	0x40004c00
 800a1b0:	40005000 	.word	0x40005000
 800a1b4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1b8:	f7fb ffcc 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 800a1bc:	6178      	str	r0, [r7, #20]
        break;
 800a1be:	e008      	b.n	800a1d2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1c4:	617b      	str	r3, [r7, #20]
        break;
 800a1c6:	e004      	b.n	800a1d2 <UART_SetConfig+0x33a>
      default:
        pclk = 0U;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	76bb      	strb	r3, [r7, #26]
        break;
 800a1d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f000 811b 	beq.w	800a410 <UART_SetConfig+0x578>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	4a96      	ldr	r2, [pc, #600]	; (800a438 <UART_SetConfig+0x5a0>)
 800a1e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1ec:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	005b      	lsls	r3, r3, #1
 800a1f6:	4413      	add	r3, r2
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d305      	bcc.n	800a20a <UART_SetConfig+0x372>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	429a      	cmp	r2, r3
 800a208:	d902      	bls.n	800a210 <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	76bb      	strb	r3, [r7, #26]
 800a20e:	e0ff      	b.n	800a410 <UART_SetConfig+0x578>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	4618      	mov	r0, r3
 800a214:	f04f 0100 	mov.w	r1, #0
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	4a86      	ldr	r2, [pc, #536]	; (800a438 <UART_SetConfig+0x5a0>)
 800a21e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a222:	b29a      	uxth	r2, r3
 800a224:	f04f 0300 	mov.w	r3, #0
 800a228:	f7f6 f80c 	bl	8000244 <__aeabi_uldivmod>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4610      	mov	r0, r2
 800a232:	4619      	mov	r1, r3
 800a234:	f04f 0200 	mov.w	r2, #0
 800a238:	f04f 0300 	mov.w	r3, #0
 800a23c:	020b      	lsls	r3, r1, #8
 800a23e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a242:	0202      	lsls	r2, r0, #8
 800a244:	6879      	ldr	r1, [r7, #4]
 800a246:	6849      	ldr	r1, [r1, #4]
 800a248:	0849      	lsrs	r1, r1, #1
 800a24a:	4608      	mov	r0, r1
 800a24c:	f04f 0100 	mov.w	r1, #0
 800a250:	1814      	adds	r4, r2, r0
 800a252:	eb43 0501 	adc.w	r5, r3, r1
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	461a      	mov	r2, r3
 800a25c:	f04f 0300 	mov.w	r3, #0
 800a260:	4620      	mov	r0, r4
 800a262:	4629      	mov	r1, r5
 800a264:	f7f5 ffee 	bl	8000244 <__aeabi_uldivmod>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4613      	mov	r3, r2
 800a26e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a276:	d308      	bcc.n	800a28a <UART_SetConfig+0x3f2>
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a27e:	d204      	bcs.n	800a28a <UART_SetConfig+0x3f2>
        {
          huart->Instance->BRR = usartdiv;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	60da      	str	r2, [r3, #12]
 800a288:	e0c2      	b.n	800a410 <UART_SetConfig+0x578>
        }
        else
        {
          ret = HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	76bb      	strb	r3, [r7, #26]
 800a28e:	e0bf      	b.n	800a410 <UART_SetConfig+0x578>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a298:	d165      	bne.n	800a366 <UART_SetConfig+0x4ce>
  {
    switch (clocksource)
 800a29a:	7efb      	ldrb	r3, [r7, #27]
 800a29c:	2b08      	cmp	r3, #8
 800a29e:	d828      	bhi.n	800a2f2 <UART_SetConfig+0x45a>
 800a2a0:	a201      	add	r2, pc, #4	; (adr r2, 800a2a8 <UART_SetConfig+0x410>)
 800a2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a6:	bf00      	nop
 800a2a8:	0800a2cd 	.word	0x0800a2cd
 800a2ac:	0800a2d5 	.word	0x0800a2d5
 800a2b0:	0800a2dd 	.word	0x0800a2dd
 800a2b4:	0800a2f3 	.word	0x0800a2f3
 800a2b8:	0800a2e3 	.word	0x0800a2e3
 800a2bc:	0800a2f3 	.word	0x0800a2f3
 800a2c0:	0800a2f3 	.word	0x0800a2f3
 800a2c4:	0800a2f3 	.word	0x0800a2f3
 800a2c8:	0800a2eb 	.word	0x0800a2eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2cc:	f7fb fff4 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 800a2d0:	6178      	str	r0, [r7, #20]
        break;
 800a2d2:	e013      	b.n	800a2fc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2d4:	f7fc f804 	bl	80062e0 <HAL_RCC_GetPCLK2Freq>
 800a2d8:	6178      	str	r0, [r7, #20]
        break;
 800a2da:	e00f      	b.n	800a2fc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2dc:	4b57      	ldr	r3, [pc, #348]	; (800a43c <UART_SetConfig+0x5a4>)
 800a2de:	617b      	str	r3, [r7, #20]
        break;
 800a2e0:	e00c      	b.n	800a2fc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2e2:	f7fb ff37 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 800a2e6:	6178      	str	r0, [r7, #20]
        break;
 800a2e8:	e008      	b.n	800a2fc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ee:	617b      	str	r3, [r7, #20]
        break;
 800a2f0:	e004      	b.n	800a2fc <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	76bb      	strb	r3, [r7, #26]
        break;
 800a2fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 8086 	beq.w	800a410 <UART_SetConfig+0x578>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a308:	4a4b      	ldr	r2, [pc, #300]	; (800a438 <UART_SetConfig+0x5a0>)
 800a30a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a30e:	461a      	mov	r2, r3
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	fbb3 f3f2 	udiv	r3, r3, r2
 800a316:	005a      	lsls	r2, r3, #1
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	085b      	lsrs	r3, r3, #1
 800a31e:	441a      	add	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	fbb2 f3f3 	udiv	r3, r2, r3
 800a328:	b29b      	uxth	r3, r3
 800a32a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	2b0f      	cmp	r3, #15
 800a330:	d916      	bls.n	800a360 <UART_SetConfig+0x4c8>
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a338:	d212      	bcs.n	800a360 <UART_SetConfig+0x4c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	f023 030f 	bic.w	r3, r3, #15
 800a342:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	085b      	lsrs	r3, r3, #1
 800a348:	b29b      	uxth	r3, r3
 800a34a:	f003 0307 	and.w	r3, r3, #7
 800a34e:	b29a      	uxth	r2, r3
 800a350:	89fb      	ldrh	r3, [r7, #14]
 800a352:	4313      	orrs	r3, r2
 800a354:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	89fa      	ldrh	r2, [r7, #14]
 800a35c:	60da      	str	r2, [r3, #12]
 800a35e:	e057      	b.n	800a410 <UART_SetConfig+0x578>
      }
      else
      {
        ret = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	76bb      	strb	r3, [r7, #26]
 800a364:	e054      	b.n	800a410 <UART_SetConfig+0x578>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a366:	7efb      	ldrb	r3, [r7, #27]
 800a368:	2b08      	cmp	r3, #8
 800a36a:	d828      	bhi.n	800a3be <UART_SetConfig+0x526>
 800a36c:	a201      	add	r2, pc, #4	; (adr r2, 800a374 <UART_SetConfig+0x4dc>)
 800a36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a372:	bf00      	nop
 800a374:	0800a399 	.word	0x0800a399
 800a378:	0800a3a1 	.word	0x0800a3a1
 800a37c:	0800a3a9 	.word	0x0800a3a9
 800a380:	0800a3bf 	.word	0x0800a3bf
 800a384:	0800a3af 	.word	0x0800a3af
 800a388:	0800a3bf 	.word	0x0800a3bf
 800a38c:	0800a3bf 	.word	0x0800a3bf
 800a390:	0800a3bf 	.word	0x0800a3bf
 800a394:	0800a3b7 	.word	0x0800a3b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a398:	f7fb ff8e 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 800a39c:	6178      	str	r0, [r7, #20]
        break;
 800a39e:	e013      	b.n	800a3c8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3a0:	f7fb ff9e 	bl	80062e0 <HAL_RCC_GetPCLK2Freq>
 800a3a4:	6178      	str	r0, [r7, #20]
        break;
 800a3a6:	e00f      	b.n	800a3c8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3a8:	4b24      	ldr	r3, [pc, #144]	; (800a43c <UART_SetConfig+0x5a4>)
 800a3aa:	617b      	str	r3, [r7, #20]
        break;
 800a3ac:	e00c      	b.n	800a3c8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3ae:	f7fb fed1 	bl	8006154 <HAL_RCC_GetSysClockFreq>
 800a3b2:	6178      	str	r0, [r7, #20]
        break;
 800a3b4:	e008      	b.n	800a3c8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3ba:	617b      	str	r3, [r7, #20]
        break;
 800a3bc:	e004      	b.n	800a3c8 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	76bb      	strb	r3, [r7, #26]
        break;
 800a3c6:	bf00      	nop
    }

    if (pclk != 0U)
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d020      	beq.n	800a410 <UART_SetConfig+0x578>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d2:	4a19      	ldr	r2, [pc, #100]	; (800a438 <UART_SetConfig+0x5a0>)
 800a3d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	fbb3 f2f2 	udiv	r2, r3, r2
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	085b      	lsrs	r3, r3, #1
 800a3e6:	441a      	add	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	2b0f      	cmp	r3, #15
 800a3f8:	d908      	bls.n	800a40c <UART_SetConfig+0x574>
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a400:	d204      	bcs.n	800a40c <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	60da      	str	r2, [r3, #12]
 800a40a:	e001      	b.n	800a410 <UART_SetConfig+0x578>
      }
      else
      {
        ret = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a42c:	7ebb      	ldrb	r3, [r7, #26]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3720      	adds	r7, #32
 800a432:	46bd      	mov	sp, r7
 800a434:	bdb0      	pop	{r4, r5, r7, pc}
 800a436:	bf00      	nop
 800a438:	0800d538 	.word	0x0800d538
 800a43c:	00f42400 	.word	0x00f42400

0800a440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00a      	beq.n	800a46a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	430a      	orrs	r2, r1
 800a468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00a      	beq.n	800a48c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	430a      	orrs	r2, r1
 800a48a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a490:	f003 0304 	and.w	r3, r3, #4
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00a      	beq.n	800a4ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	430a      	orrs	r2, r1
 800a4ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b2:	f003 0308 	and.w	r3, r3, #8
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00a      	beq.n	800a4d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	430a      	orrs	r2, r1
 800a4ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d4:	f003 0310 	and.w	r3, r3, #16
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00a      	beq.n	800a4f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f6:	f003 0320 	and.w	r3, r3, #32
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d01a      	beq.n	800a556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a53a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a53e:	d10a      	bne.n	800a556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	430a      	orrs	r2, r1
 800a554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00a      	beq.n	800a578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	430a      	orrs	r2, r1
 800a576:	605a      	str	r2, [r3, #4]
  }
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af02      	add	r7, sp, #8
 800a58a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a594:	f7f8 ff8c 	bl	80034b0 <HAL_GetTick>
 800a598:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 0308 	and.w	r3, r3, #8
 800a5a4:	2b08      	cmp	r3, #8
 800a5a6:	d10e      	bne.n	800a5c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f82f 	bl	800a61a <UART_WaitOnFlagUntilTimeout>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	e025      	b.n	800a612 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	d10e      	bne.n	800a5f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f819 	bl	800a61a <UART_WaitOnFlagUntilTimeout>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e00f      	b.n	800a612 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2220      	movs	r2, #32
 800a5f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2220      	movs	r2, #32
 800a5fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	603b      	str	r3, [r7, #0]
 800a626:	4613      	mov	r3, r2
 800a628:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a62a:	e062      	b.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a632:	d05e      	beq.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a634:	f7f8 ff3c 	bl	80034b0 <HAL_GetTick>
 800a638:	4602      	mov	r2, r0
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	429a      	cmp	r2, r3
 800a642:	d302      	bcc.n	800a64a <UART_WaitOnFlagUntilTimeout+0x30>
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d11d      	bne.n	800a686 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a658:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689a      	ldr	r2, [r3, #8]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f022 0201 	bic.w	r2, r2, #1
 800a668:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2220      	movs	r2, #32
 800a66e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2220      	movs	r2, #32
 800a676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e045      	b.n	800a712 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0304 	and.w	r3, r3, #4
 800a690:	2b00      	cmp	r3, #0
 800a692:	d02e      	beq.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a69e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6a2:	d126      	bne.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a6bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689a      	ldr	r2, [r3, #8]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f022 0201 	bic.w	r2, r2, #1
 800a6cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2220      	movs	r2, #32
 800a6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2220      	movs	r2, #32
 800a6e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e00f      	b.n	800a712 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	69da      	ldr	r2, [r3, #28]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	bf0c      	ite	eq
 800a702:	2301      	moveq	r3, #1
 800a704:	2300      	movne	r3, #0
 800a706:	b2db      	uxtb	r3, r3
 800a708:	461a      	mov	r2, r3
 800a70a:	79fb      	ldrb	r3, [r7, #7]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d08d      	beq.n	800a62c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b085      	sub	sp, #20
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d101      	bne.n	800a730 <HAL_UARTEx_DisableFifoMode+0x16>
 800a72c:	2302      	movs	r3, #2
 800a72e:	e027      	b.n	800a780 <HAL_UARTEx_DisableFifoMode+0x66>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2224      	movs	r2, #36	; 0x24
 800a73c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f022 0201 	bic.w	r2, r2, #1
 800a756:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a75e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2220      	movs	r2, #32
 800a772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d101      	bne.n	800a7a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	e02d      	b.n	800a800 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2224      	movs	r2, #36	; 0x24
 800a7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f022 0201 	bic.w	r2, r2, #1
 800a7ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 f84f 	bl	800a884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2220      	movs	r2, #32
 800a7f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d101      	bne.n	800a820 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a81c:	2302      	movs	r3, #2
 800a81e:	e02d      	b.n	800a87c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2224      	movs	r2, #36	; 0x24
 800a82c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f022 0201 	bic.w	r2, r2, #1
 800a846:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	430a      	orrs	r2, r1
 800a85a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f811 	bl	800a884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2220      	movs	r2, #32
 800a86e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a884:	b480      	push	{r7}
 800a886:	b089      	sub	sp, #36	; 0x24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a88c:	4a2f      	ldr	r2, [pc, #188]	; (800a94c <UARTEx_SetNbDataToProcess+0xc8>)
 800a88e:	f107 0314 	add.w	r3, r7, #20
 800a892:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a896:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a89a:	4a2d      	ldr	r2, [pc, #180]	; (800a950 <UARTEx_SetNbDataToProcess+0xcc>)
 800a89c:	f107 030c 	add.w	r3, r7, #12
 800a8a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8a4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d108      	bne.n	800a8c2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8c0:	e03d      	b.n	800a93e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8c2:	2308      	movs	r3, #8
 800a8c4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8c6:	2308      	movs	r3, #8
 800a8c8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	0e5b      	lsrs	r3, r3, #25
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	f003 0307 	and.w	r3, r3, #7
 800a8d8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	0f5b      	lsrs	r3, r3, #29
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	f003 0307 	and.w	r3, r3, #7
 800a8e8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a8ea:	7fbb      	ldrb	r3, [r7, #30]
 800a8ec:	7f3a      	ldrb	r2, [r7, #28]
 800a8ee:	f107 0120 	add.w	r1, r7, #32
 800a8f2:	440a      	add	r2, r1
 800a8f4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a8f8:	fb02 f303 	mul.w	r3, r2, r3
 800a8fc:	7f3a      	ldrb	r2, [r7, #28]
 800a8fe:	f107 0120 	add.w	r1, r7, #32
 800a902:	440a      	add	r2, r1
 800a904:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a908:	fb93 f3f2 	sdiv	r3, r3, r2
 800a90c:	b29a      	uxth	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a914:	7ffb      	ldrb	r3, [r7, #31]
 800a916:	7f7a      	ldrb	r2, [r7, #29]
 800a918:	f107 0120 	add.w	r1, r7, #32
 800a91c:	440a      	add	r2, r1
 800a91e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a922:	fb02 f303 	mul.w	r3, r2, r3
 800a926:	7f7a      	ldrb	r2, [r7, #29]
 800a928:	f107 0120 	add.w	r1, r7, #32
 800a92c:	440a      	add	r2, r1
 800a92e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a932:	fb93 f3f2 	sdiv	r3, r3, r2
 800a936:	b29a      	uxth	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a93e:	bf00      	nop
 800a940:	3724      	adds	r7, #36	; 0x24
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	0800d4d0 	.word	0x0800d4d0
 800a950:	0800d4d8 	.word	0x0800d4d8

0800a954 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                             FMC_NORSRAM_InitTypeDef *Init)
{
 800a954:	b480      	push	{r7}
 800a956:	b087      	sub	sp, #28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a968:	683a      	ldr	r2, [r7, #0]
 800a96a:	6812      	ldr	r2, [r2, #0]
 800a96c:	f023 0101 	bic.w	r1, r3, #1
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	2b08      	cmp	r3, #8
 800a97c:	d102      	bne.n	800a984 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a97e:	2340      	movs	r3, #64	; 0x40
 800a980:	617b      	str	r3, [r7, #20]
 800a982:	e001      	b.n	800a988 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a984:	2300      	movs	r3, #0
 800a986:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a994:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a99a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a9a0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a9a6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800a9ac:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800a9b2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800a9b8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800a9be:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800a9c4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9dc:	693a      	ldr	r2, [r7, #16]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800a9f6:	4b44      	ldr	r3, [pc, #272]	; (800ab08 <FMC_NORSRAM_Init+0x1b4>)
 800a9f8:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa00:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa08:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800aa10:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800aa18:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	43db      	mvns	r3, r3
 800aa28:	ea02 0103 	and.w	r1, r2, r3
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	4319      	orrs	r1, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa42:	d10c      	bne.n	800aa5e <FMC_NORSRAM_Init+0x10a>
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d008      	beq.n	800aa5e <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa58:	431a      	orrs	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d006      	beq.n	800aa74 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa6e:	431a      	orrs	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d13a      	bne.n	800aaf4 <FMC_NORSRAM_Init+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	0c1b      	lsrs	r3, r3, #16
 800aa84:	041b      	lsls	r3, r3, #16
 800aa86:	683a      	ldr	r2, [r7, #0]
 800aa88:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800aa8a:	431a      	orrs	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b06      	cmp	r3, #6
 800aa96:	d82f      	bhi.n	800aaf8 <FMC_NORSRAM_Init+0x1a4>
 800aa98:	a201      	add	r2, pc, #4	; (adr r2, 800aaa0 <FMC_NORSRAM_Init+0x14c>)
 800aa9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9e:	bf00      	nop
 800aaa0:	0800aabd 	.word	0x0800aabd
 800aaa4:	0800aaf9 	.word	0x0800aaf9
 800aaa8:	0800aacb 	.word	0x0800aacb
 800aaac:	0800aaf9 	.word	0x0800aaf9
 800aab0:	0800aad9 	.word	0x0800aad9
 800aab4:	0800aaf9 	.word	0x0800aaf9
 800aab8:	0800aae7 	.word	0x0800aae7
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	621a      	str	r2, [r3, #32]
        break;
 800aac8:	e017      	b.n	800aafa <FMC_NORSRAM_Init+0x1a6>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	621a      	str	r2, [r3, #32]
        break;
 800aad6:	e010      	b.n	800aafa <FMC_NORSRAM_Init+0x1a6>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a1b      	ldr	r3, [r3, #32]
 800aadc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	621a      	str	r2, [r3, #32]
        break;
 800aae4:	e009      	b.n	800aafa <FMC_NORSRAM_Init+0x1a6>

      case FMC_NORSRAM_BANK4 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	621a      	str	r2, [r3, #32]
        break;
 800aaf2:	e002      	b.n	800aafa <FMC_NORSRAM_Init+0x1a6>

      default :
        break;
    }
  }
 800aaf4:	bf00      	nop
 800aaf6:	e000      	b.n	800aafa <FMC_NORSRAM_Init+0x1a6>
        break;
 800aaf8:	bf00      	nop

  return HAL_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	371c      	adds	r7, #28
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr
 800ab08:	0008fb7f 	.word	0x0008fb7f

0800ab0c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	1c5a      	adds	r2, r3, #1
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	011b      	lsls	r3, r3, #4
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	021b      	lsls	r3, r3, #8
 800ab34:	431a      	orrs	r2, r3
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	079b      	lsls	r3, r3, #30
 800ab3c:	431a      	orrs	r2, r3
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	041b      	lsls	r3, r3, #16
 800ab44:	431a      	orrs	r2, r3
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	695b      	ldr	r3, [r3, #20]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	051b      	lsls	r3, r3, #20
 800ab4e:	431a      	orrs	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	3b02      	subs	r3, #2
 800ab56:	061b      	lsls	r3, r3, #24
 800ab58:	ea42 0103 	orr.w	r1, r2, r3
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	69db      	ldr	r3, [r3, #28]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	3201      	adds	r2, #1
 800ab64:	4319      	orrs	r1, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab78:	d113      	bne.n	800aba2 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab82:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	051b      	lsls	r3, r3, #20
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	431a      	orrs	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	371c      	adds	r7, #28
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                            FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
 800abbc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abc4:	d121      	bne.n	800ac0a <FMC_NORSRAM_Extended_Timing_Init+0x5a>
#endif /* FMC_BWTRx_BUSTURN */
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abce:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	6819      	ldr	r1, [r3, #0]
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	011b      	lsls	r3, r3, #4
 800abdc:	4319      	orrs	r1, r3
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	021b      	lsls	r3, r3, #8
 800abe4:	4319      	orrs	r1, r3
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	079b      	lsls	r3, r3, #30
 800abec:	4319      	orrs	r1, r3
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	4319      	orrs	r1, r3
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	691b      	ldr	r3, [r3, #16]
 800abf8:	041b      	lsls	r3, r3, #16
 800abfa:	430b      	orrs	r3, r1
 800abfc:	ea42 0103 	orr.w	r1, r2, r3
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ac08:	e005      	b.n	800ac16 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode));
#endif /* FMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ac12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b08b      	sub	sp, #44	; 0x2c
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	fa93 f3a3 	rbit	r3, r3
 800ac3e:	613b      	str	r3, [r7, #16]
  return result;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800ac4a:	2320      	movs	r3, #32
 800ac4c:	e003      	b.n	800ac56 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	fab3 f383 	clz	r3, r3
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	005b      	lsls	r3, r3, #1
 800ac58:	2103      	movs	r1, #3
 800ac5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac5e:	43db      	mvns	r3, r3
 800ac60:	401a      	ands	r2, r3
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	fa93 f3a3 	rbit	r3, r3
 800ac6c:	61fb      	str	r3, [r7, #28]
  return result;
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ac72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d101      	bne.n	800ac7c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800ac78:	2320      	movs	r3, #32
 800ac7a:	e003      	b.n	800ac84 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	fab3 f383 	clz	r3, r3
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	fa01 f303 	lsl.w	r3, r1, r3
 800ac8c:	431a      	orrs	r2, r3
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	601a      	str	r2, [r3, #0]
}
 800ac92:	bf00      	nop
 800ac94:	372c      	adds	r7, #44	; 0x2c
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b085      	sub	sp, #20
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	60f8      	str	r0, [r7, #12]
 800aca6:	60b9      	str	r1, [r7, #8]
 800aca8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	43db      	mvns	r3, r3
 800acb2:	401a      	ands	r2, r3
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	6879      	ldr	r1, [r7, #4]
 800acb8:	fb01 f303 	mul.w	r3, r1, r3
 800acbc:	431a      	orrs	r2, r3
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	605a      	str	r2, [r3, #4]
}
 800acc2:	bf00      	nop
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800acce:	b480      	push	{r7}
 800acd0:	b08b      	sub	sp, #44	; 0x2c
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	60f8      	str	r0, [r7, #12]
 800acd6:	60b9      	str	r1, [r7, #8]
 800acd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	689a      	ldr	r2, [r3, #8]
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	fa93 f3a3 	rbit	r3, r3
 800ace8:	613b      	str	r3, [r7, #16]
  return result;
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d101      	bne.n	800acf8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800acf4:	2320      	movs	r3, #32
 800acf6:	e003      	b.n	800ad00 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	fab3 f383 	clz	r3, r3
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	005b      	lsls	r3, r3, #1
 800ad02:	2103      	movs	r1, #3
 800ad04:	fa01 f303 	lsl.w	r3, r1, r3
 800ad08:	43db      	mvns	r3, r3
 800ad0a:	401a      	ands	r2, r3
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad10:	6a3b      	ldr	r3, [r7, #32]
 800ad12:	fa93 f3a3 	rbit	r3, r3
 800ad16:	61fb      	str	r3, [r7, #28]
  return result;
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d101      	bne.n	800ad26 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800ad22:	2320      	movs	r3, #32
 800ad24:	e003      	b.n	800ad2e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800ad26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad28:	fab3 f383 	clz	r3, r3
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	005b      	lsls	r3, r3, #1
 800ad30:	6879      	ldr	r1, [r7, #4]
 800ad32:	fa01 f303 	lsl.w	r3, r1, r3
 800ad36:	431a      	orrs	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800ad3c:	bf00      	nop
 800ad3e:	372c      	adds	r7, #44	; 0x2c
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b08b      	sub	sp, #44	; 0x2c
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	68da      	ldr	r2, [r3, #12]
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	fa93 f3a3 	rbit	r3, r3
 800ad62:	613b      	str	r3, [r7, #16]
  return result;
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d101      	bne.n	800ad72 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800ad6e:	2320      	movs	r3, #32
 800ad70:	e003      	b.n	800ad7a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	fab3 f383 	clz	r3, r3
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	005b      	lsls	r3, r3, #1
 800ad7c:	2103      	movs	r1, #3
 800ad7e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad82:	43db      	mvns	r3, r3
 800ad84:	401a      	ands	r2, r3
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	fa93 f3a3 	rbit	r3, r3
 800ad90:	61fb      	str	r3, [r7, #28]
  return result;
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ad96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d101      	bne.n	800ada0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800ad9c:	2320      	movs	r3, #32
 800ad9e:	e003      	b.n	800ada8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800ada0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada2:	fab3 f383 	clz	r3, r3
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	005b      	lsls	r3, r3, #1
 800adaa:	6879      	ldr	r1, [r7, #4]
 800adac:	fa01 f303 	lsl.w	r3, r1, r3
 800adb0:	431a      	orrs	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	60da      	str	r2, [r3, #12]
}
 800adb6:	bf00      	nop
 800adb8:	372c      	adds	r7, #44	; 0x2c
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b08b      	sub	sp, #44	; 0x2c
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	60f8      	str	r0, [r7, #12]
 800adca:	60b9      	str	r1, [r7, #8]
 800adcc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6a1a      	ldr	r2, [r3, #32]
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	fa93 f3a3 	rbit	r3, r3
 800addc:	613b      	str	r3, [r7, #16]
  return result;
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800ade8:	2320      	movs	r3, #32
 800adea:	e003      	b.n	800adf4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	fab3 f383 	clz	r3, r3
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	210f      	movs	r1, #15
 800adf8:	fa01 f303 	lsl.w	r3, r1, r3
 800adfc:	43db      	mvns	r3, r3
 800adfe:	401a      	ands	r2, r3
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	fa93 f3a3 	rbit	r3, r3
 800ae0a:	61fb      	str	r3, [r7, #28]
  return result;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ae10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800ae16:	2320      	movs	r3, #32
 800ae18:	e003      	b.n	800ae22 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1c:	fab3 f383 	clz	r3, r3
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	6879      	ldr	r1, [r7, #4]
 800ae26:	fa01 f303 	lsl.w	r3, r1, r3
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800ae30:	bf00      	nop
 800ae32:	372c      	adds	r7, #44	; 0x2c
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b08b      	sub	sp, #44	; 0x2c
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	0a1b      	lsrs	r3, r3, #8
 800ae50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	fa93 f3a3 	rbit	r3, r3
 800ae58:	613b      	str	r3, [r7, #16]
  return result;
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d101      	bne.n	800ae68 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800ae64:	2320      	movs	r3, #32
 800ae66:	e003      	b.n	800ae70 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	fab3 f383 	clz	r3, r3
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	210f      	movs	r1, #15
 800ae74:	fa01 f303 	lsl.w	r3, r1, r3
 800ae78:	43db      	mvns	r3, r3
 800ae7a:	401a      	ands	r2, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	0a1b      	lsrs	r3, r3, #8
 800ae80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae82:	6a3b      	ldr	r3, [r7, #32]
 800ae84:	fa93 f3a3 	rbit	r3, r3
 800ae88:	61fb      	str	r3, [r7, #28]
  return result;
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ae8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d101      	bne.n	800ae98 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800ae94:	2320      	movs	r3, #32
 800ae96:	e003      	b.n	800aea0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	fab3 f383 	clz	r3, r3
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	6879      	ldr	r1, [r7, #4]
 800aea4:	fa01 f303 	lsl.w	r3, r1, r3
 800aea8:	431a      	orrs	r2, r3
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800aeae:	bf00      	nop
 800aeb0:	372c      	adds	r7, #44	; 0x2c
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr

0800aeba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b088      	sub	sp, #32
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
 800aec2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	fa93 f3a3 	rbit	r3, r3
 800aed0:	60fb      	str	r3, [r7, #12]
  return result;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <LL_GPIO_Init+0x26>
    return 32U;
 800aedc:	2320      	movs	r3, #32
 800aede:	e003      	b.n	800aee8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	fab3 f383 	clz	r3, r3
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800aeea:	e047      	b.n	800af7c <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	2101      	movs	r1, #1
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	fa01 f303 	lsl.w	r3, r1, r3
 800aef8:	4013      	ands	r3, r2
 800aefa:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d039      	beq.n	800af76 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	2b01      	cmp	r3, #1
 800af08:	d003      	beq.n	800af12 <LL_GPIO_Init+0x58>
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d10d      	bne.n	800af2e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	461a      	mov	r2, r3
 800af18:	69b9      	ldr	r1, [r7, #24]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff fed7 	bl	800acce <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	461a      	mov	r2, r3
 800af26:	69b9      	ldr	r1, [r7, #24]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7ff feb8 	bl	800ac9e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	461a      	mov	r2, r3
 800af34:	69b9      	ldr	r1, [r7, #24]
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f7ff ff06 	bl	800ad48 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	2b02      	cmp	r3, #2
 800af42:	d111      	bne.n	800af68 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	2bff      	cmp	r3, #255	; 0xff
 800af48:	d807      	bhi.n	800af5a <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	695b      	ldr	r3, [r3, #20]
 800af4e:	461a      	mov	r2, r3
 800af50:	69b9      	ldr	r1, [r7, #24]
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f7ff ff35 	bl	800adc2 <LL_GPIO_SetAFPin_0_7>
 800af58:	e006      	b.n	800af68 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	695b      	ldr	r3, [r3, #20]
 800af5e:	461a      	mov	r2, r3
 800af60:	69b9      	ldr	r1, [r7, #24]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff ff6a 	bl	800ae3c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	461a      	mov	r2, r3
 800af6e:	69b9      	ldr	r1, [r7, #24]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f7ff fe57 	bl	800ac24 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	3301      	adds	r3, #1
 800af7a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	fa22 f303 	lsr.w	r3, r2, r3
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1b0      	bne.n	800aeec <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3720      	adds	r7, #32
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800af9c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800afa0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	b29b      	uxth	r3, r3
 800afae:	43db      	mvns	r3, r3
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	4013      	ands	r3, r2
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr

0800afca <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800afca:	b084      	sub	sp, #16
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	f107 0014 	add.w	r0, r7, #20
 800afd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	b004      	add	sp, #16
 800b00a:	4770      	bx	lr

0800b00c <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b08c      	sub	sp, #48	; 0x30
 800b010:	af00      	add	r7, sp, #0
 800b012:	603b      	str	r3, [r7, #0]
 800b014:	4603      	mov	r3, r0
 800b016:	71fb      	strb	r3, [r7, #7]
 800b018:	460b      	mov	r3, r1
 800b01a:	71bb      	strb	r3, [r7, #6]
 800b01c:	4613      	mov	r3, r2
 800b01e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800b020:	79fb      	ldrb	r3, [r7, #7]
 800b022:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800b024:	79bb      	ldrb	r3, [r7, #6]
 800b026:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800b028:	797b      	ldrb	r3, [r7, #5]
 800b02a:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b02c:	f107 030c 	add.w	r3, r7, #12
 800b030:	2207      	movs	r2, #7
 800b032:	2100      	movs	r1, #0
 800b034:	4618      	mov	r0, r3
 800b036:	f000 ff9c 	bl	800bf72 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b03a:	f107 0318 	add.w	r3, r7, #24
 800b03e:	2218      	movs	r2, #24
 800b040:	2100      	movs	r1, #0
 800b042:	4618      	mov	r0, r3
 800b044:	f000 ff95 	bl	800bf72 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800b048:	233f      	movs	r3, #63	; 0x3f
 800b04a:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800b04c:	238a      	movs	r3, #138	; 0x8a
 800b04e:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800b050:	f107 0314 	add.w	r3, r7, #20
 800b054:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800b056:	2303      	movs	r3, #3
 800b058:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800b05a:	f107 030c 	add.w	r3, r7, #12
 800b05e:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800b060:	2307      	movs	r3, #7
 800b062:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b064:	f107 0318 	add.w	r3, r7, #24
 800b068:	2100      	movs	r1, #0
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 fc56 	bl	800b91c <hci_send_req>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	da01      	bge.n	800b07a <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800b076:	23ff      	movs	r3, #255	; 0xff
 800b078:	e014      	b.n	800b0a4 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800b07a:	7b3b      	ldrb	r3, [r7, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d001      	beq.n	800b084 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800b080:	7b3b      	ldrb	r3, [r7, #12]
 800b082:	e00f      	b.n	800b0a4 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800b084:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800b088:	b29a      	uxth	r2, r3
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800b08e:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800b092:	b29a      	uxth	r2, r3
 800b094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b096:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800b098:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0a0:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3730      	adds	r7, #48	; 0x30
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b08e      	sub	sp, #56	; 0x38
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60b9      	str	r1, [r7, #8]
 800b0b4:	607a      	str	r2, [r7, #4]
 800b0b6:	603b      	str	r3, [r7, #0]
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
 800b0be:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b0c0:	f107 0314 	add.w	r3, r7, #20
 800b0c4:	2207      	movs	r2, #7
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 ff52 	bl	800bf72 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b0ce:	f107 0320 	add.w	r3, r7, #32
 800b0d2:	2218      	movs	r2, #24
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f000 ff4b 	bl	800bf72 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800b0dc:	233f      	movs	r3, #63	; 0x3f
 800b0de:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800b0e0:	238a      	movs	r3, #138	; 0x8a
 800b0e2:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 800b0e4:	f107 031c 	add.w	r3, r7, #28
 800b0e8:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800b0ee:	f107 0314 	add.w	r3, r7, #20
 800b0f2:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 800b0f4:	2307      	movs	r3, #7
 800b0f6:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b0f8:	f107 0320 	add.w	r3, r7, #32
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 fc0c 	bl	800b91c <hci_send_req>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	da01      	bge.n	800b10e <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 800b10a:	23ff      	movs	r3, #255	; 0xff
 800b10c:	e014      	b.n	800b138 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800b10e:	7d3b      	ldrb	r3, [r7, #20]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d001      	beq.n	800b118 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 800b114:	7d3b      	ldrb	r3, [r7, #20]
 800b116:	e00f      	b.n	800b138 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 800b118:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800b122:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 800b126:	b29a      	uxth	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800b12c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800b130:	b29a      	uxth	r2, r3
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3738      	adds	r7, #56	; 0x38
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800b140:	b590      	push	{r4, r7, lr}
 800b142:	b095      	sub	sp, #84	; 0x54
 800b144:	af00      	add	r7, sp, #0
 800b146:	4604      	mov	r4, r0
 800b148:	4608      	mov	r0, r1
 800b14a:	4611      	mov	r1, r2
 800b14c:	461a      	mov	r2, r3
 800b14e:	4623      	mov	r3, r4
 800b150:	71fb      	strb	r3, [r7, #7]
 800b152:	4603      	mov	r3, r0
 800b154:	80bb      	strh	r3, [r7, #4]
 800b156:	460b      	mov	r3, r1
 800b158:	807b      	strh	r3, [r7, #2]
 800b15a:	4613      	mov	r3, r2
 800b15c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800b15e:	2300      	movs	r3, #0
 800b160:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800b164:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800b168:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800b16c:	4413      	add	r3, r2
 800b16e:	330e      	adds	r3, #14
 800b170:	2b28      	cmp	r3, #40	; 0x28
 800b172:	d901      	bls.n	800b178 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800b174:	2342      	movs	r3, #66	; 0x42
 800b176:	e0ce      	b.n	800b316 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 800b178:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b17c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b180:	4413      	add	r3, r2
 800b182:	79fa      	ldrb	r2, [r7, #7]
 800b184:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800b188:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b18c:	3301      	adds	r3, #1
 800b18e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800b192:	88bb      	ldrh	r3, [r7, #4]
 800b194:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800b196:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b19a:	f107 0208 	add.w	r2, r7, #8
 800b19e:	4413      	add	r3, r2
 800b1a0:	88ba      	ldrh	r2, [r7, #4]
 800b1a2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800b1a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b1a8:	3302      	adds	r3, #2
 800b1aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800b1ae:	887b      	ldrh	r3, [r7, #2]
 800b1b0:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800b1b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b1b6:	f107 0208 	add.w	r2, r7, #8
 800b1ba:	4413      	add	r3, r2
 800b1bc:	887a      	ldrh	r2, [r7, #2]
 800b1be:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800b1c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b1c4:	3302      	adds	r3, #2
 800b1c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800b1ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b1ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b1d2:	4413      	add	r3, r2
 800b1d4:	79ba      	ldrb	r2, [r7, #6]
 800b1d6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800b1da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b1de:	3301      	adds	r3, #1
 800b1e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800b1e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b1e8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800b1f2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800b1f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800b200:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b204:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b208:	4413      	add	r3, r2
 800b20a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800b20e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800b212:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b216:	3301      	adds	r3, #1
 800b218:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800b21c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b220:	f107 0208 	add.w	r2, r7, #8
 800b224:	4413      	add	r3, r2
 800b226:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800b22a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 fe79 	bl	800bf24 <memcpy>
  indx +=  LocalNameLen;
 800b232:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800b236:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800b23a:	4413      	add	r3, r2
 800b23c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800b240:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b244:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b248:	4413      	add	r3, r2
 800b24a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800b24e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800b252:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b256:	3301      	adds	r3, #1
 800b258:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800b25c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b260:	f107 0208 	add.w	r2, r7, #8
 800b264:	4413      	add	r3, r2
 800b266:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800b26a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b26c:	4618      	mov	r0, r3
 800b26e:	f000 fe59 	bl	800bf24 <memcpy>
  indx +=  ServiceUUIDLen;  
 800b272:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800b276:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800b27a:	4413      	add	r3, r2
 800b27c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800b280:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800b284:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800b288:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b28c:	f107 0208 	add.w	r2, r7, #8
 800b290:	4413      	add	r3, r2
 800b292:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800b296:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800b298:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b29c:	3302      	adds	r3, #2
 800b29e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800b2a2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800b2a6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800b2aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b2ae:	f107 0208 	add.w	r2, r7, #8
 800b2b2:	4413      	add	r3, r2
 800b2b4:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800b2b8:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800b2ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b2be:	3302      	adds	r3, #2
 800b2c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b2c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b2c8:	2218      	movs	r2, #24
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f000 fe50 	bl	800bf72 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800b2d2:	233f      	movs	r3, #63	; 0x3f
 800b2d4:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800b2d6:	2383      	movs	r3, #131	; 0x83
 800b2d8:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800b2da:	f107 0308 	add.w	r3, r7, #8
 800b2de:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800b2e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b2e4:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800b2e6:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800b2ea:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800b2f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 fb10 	bl	800b91c <hci_send_req>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	da01      	bge.n	800b306 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 800b302:	23ff      	movs	r3, #255	; 0xff
 800b304:	e007      	b.n	800b316 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 800b306:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d002      	beq.n	800b314 <aci_gap_set_discoverable+0x1d4>
    return status;
 800b30e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b312:	e000      	b.n	800b316 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3754      	adds	r7, #84	; 0x54
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd90      	pop	{r4, r7, pc}

0800b31e <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800b31e:	b590      	push	{r4, r7, lr}
 800b320:	b091      	sub	sp, #68	; 0x44
 800b322:	af00      	add	r7, sp, #0
 800b324:	603a      	str	r2, [r7, #0]
 800b326:	461a      	mov	r2, r3
 800b328:	4603      	mov	r3, r0
 800b32a:	71fb      	strb	r3, [r7, #7]
 800b32c:	460b      	mov	r3, r1
 800b32e:	71bb      	strb	r3, [r7, #6]
 800b330:	4613      	mov	r3, r2
 800b332:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800b334:	79fb      	ldrb	r3, [r7, #7]
 800b336:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800b338:	79bb      	ldrb	r3, [r7, #6]
 800b33a:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800b33c:	79bb      	ldrb	r3, [r7, #6]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00a      	beq.n	800b358 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	f107 030e 	add.w	r3, r7, #14
 800b348:	6814      	ldr	r4, [r2, #0]
 800b34a:	6850      	ldr	r0, [r2, #4]
 800b34c:	6891      	ldr	r1, [r2, #8]
 800b34e:	68d2      	ldr	r2, [r2, #12]
 800b350:	601c      	str	r4, [r3, #0]
 800b352:	6058      	str	r0, [r3, #4]
 800b354:	6099      	str	r1, [r3, #8]
 800b356:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800b358:	797b      	ldrb	r3, [r7, #5]
 800b35a:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800b35c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800b360:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800b362:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800b366:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800b36a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b36c:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800b370:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800b374:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b37c:	2218      	movs	r2, #24
 800b37e:	2100      	movs	r1, #0
 800b380:	4618      	mov	r0, r3
 800b382:	f000 fdf6 	bl	800bf72 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800b386:	233f      	movs	r3, #63	; 0x3f
 800b388:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800b38a:	2386      	movs	r3, #134	; 0x86
 800b38c:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800b38e:	f107 030c 	add.w	r3, r7, #12
 800b392:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800b394:	231a      	movs	r3, #26
 800b396:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800b398:	f107 030b 	add.w	r3, r7, #11
 800b39c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800b3a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f000 fab7 	bl	800b91c <hci_send_req>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	da01      	bge.n	800b3b8 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800b3b4:	23ff      	movs	r3, #255	; 0xff
 800b3b6:	e005      	b.n	800b3c4 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800b3b8:	7afb      	ldrb	r3, [r7, #11]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <aci_gap_set_auth_requirement+0xa4>
    return status;
 800b3be:	7afb      	ldrb	r3, [r7, #11]
 800b3c0:	e000      	b.n	800b3c4 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3744      	adds	r7, #68	; 0x44
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd90      	pop	{r4, r7, pc}

0800b3cc <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b088      	sub	sp, #32
 800b3d0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b3d2:	f107 0308 	add.w	r3, r7, #8
 800b3d6:	2218      	movs	r2, #24
 800b3d8:	2100      	movs	r1, #0
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f000 fdc9 	bl	800bf72 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800b3e0:	233f      	movs	r3, #63	; 0x3f
 800b3e2:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800b3e4:	f240 1301 	movw	r3, #257	; 0x101
 800b3e8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b3ea:	1dfb      	adds	r3, r7, #7
 800b3ec:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800b3f2:	f107 0308 	add.w	r3, r7, #8
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f000 fa8f 	bl	800b91c <hci_send_req>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	da01      	bge.n	800b408 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800b404:	23ff      	movs	r3, #255	; 0xff
 800b406:	e000      	b.n	800b40a <aci_gatt_init+0x3e>

  return status;
 800b408:	79fb      	ldrb	r3, [r7, #7]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3720      	adds	r7, #32
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b0aa      	sub	sp, #168	; 0xa8
 800b416:	af00      	add	r7, sp, #0
 800b418:	4603      	mov	r3, r0
 800b41a:	603a      	str	r2, [r7, #0]
 800b41c:	71fb      	strb	r3, [r7, #7]
 800b41e:	460b      	mov	r3, r1
 800b420:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800b428:	79bb      	ldrb	r3, [r7, #6]
 800b42a:	2b7e      	cmp	r3, #126	; 0x7e
 800b42c:	d901      	bls.n	800b432 <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 800b42e:	2342      	movs	r3, #66	; 0x42
 800b430:	e052      	b.n	800b4d8 <aci_hal_write_config_data+0xc6>

  buffer[indx] = offset;
 800b432:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800b436:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800b43a:	4413      	add	r3, r2
 800b43c:	79fa      	ldrb	r2, [r7, #7]
 800b43e:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800b442:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800b446:	3301      	adds	r3, #1
 800b448:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 800b44c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800b450:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800b454:	4413      	add	r3, r2
 800b456:	79ba      	ldrb	r2, [r7, #6]
 800b458:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800b45c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800b460:	3301      	adds	r3, #1
 800b462:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800b466:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800b46a:	f107 0208 	add.w	r2, r7, #8
 800b46e:	4413      	add	r3, r2
 800b470:	79ba      	ldrb	r2, [r7, #6]
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	4618      	mov	r0, r3
 800b476:	f000 fd55 	bl	800bf24 <memcpy>
  indx +=  len;
 800b47a:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800b47e:	79bb      	ldrb	r3, [r7, #6]
 800b480:	4413      	add	r3, r2
 800b482:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b486:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b48a:	2218      	movs	r2, #24
 800b48c:	2100      	movs	r1, #0
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 fd6f 	bl	800bf72 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800b494:	233f      	movs	r3, #63	; 0x3f
 800b496:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800b49a:	230c      	movs	r3, #12
 800b49c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800b4a0:	f107 0308 	add.w	r3, r7, #8
 800b4a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800b4a8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800b4ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800b4b0:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800b4b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800b4be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f000 fa29 	bl	800b91c <hci_send_req>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	da01      	bge.n	800b4d4 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800b4d0:	23ff      	movs	r3, #255	; 0xff
 800b4d2:	e001      	b.n	800b4d8 <aci_hal_write_config_data+0xc6>

  return status;
 800b4d4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	37a8      	adds	r7, #168	; 0xa8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b08a      	sub	sp, #40	; 0x28
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	460a      	mov	r2, r1
 800b4ea:	71fb      	strb	r3, [r7, #7]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800b4f0:	79fb      	ldrb	r3, [r7, #7]
 800b4f2:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800b4f4:	79bb      	ldrb	r3, [r7, #6]
 800b4f6:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b4f8:	f107 0310 	add.w	r3, r7, #16
 800b4fc:	2218      	movs	r2, #24
 800b4fe:	2100      	movs	r1, #0
 800b500:	4618      	mov	r0, r3
 800b502:	f000 fd36 	bl	800bf72 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800b506:	233f      	movs	r3, #63	; 0x3f
 800b508:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800b50a:	230f      	movs	r3, #15
 800b50c:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800b50e:	f107 030c 	add.w	r3, r7, #12
 800b512:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800b514:	2302      	movs	r3, #2
 800b516:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800b518:	f107 030b 	add.w	r3, r7, #11
 800b51c:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800b51e:	2301      	movs	r3, #1
 800b520:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800b522:	f107 0310 	add.w	r3, r7, #16
 800b526:	2100      	movs	r1, #0
 800b528:	4618      	mov	r0, r3
 800b52a:	f000 f9f7 	bl	800b91c <hci_send_req>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	da01      	bge.n	800b538 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800b534:	23ff      	movs	r3, #255	; 0xff
 800b536:	e000      	b.n	800b53a <aci_hal_set_tx_power_level+0x5a>

  return status;
 800b538:	7afb      	ldrb	r3, [r7, #11]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3728      	adds	r7, #40	; 0x28
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800b542:	b590      	push	{r4, r7, lr}
 800b544:	b089      	sub	sp, #36	; 0x24
 800b546:	af02      	add	r7, sp, #8
 800b548:	6078      	str	r0, [r7, #4]
 800b54a:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800b54c:	f107 0410 	add.w	r4, r7, #16
 800b550:	f107 0215 	add.w	r2, r7, #21
 800b554:	f107 0112 	add.w	r1, r7, #18
 800b558:	f107 0016 	add.w	r0, r7, #22
 800b55c:	f107 030e 	add.w	r3, r7, #14
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	4623      	mov	r3, r4
 800b564:	f000 f853 	bl	800b60e <hci_le_read_local_version>
 800b568:	4603      	mov	r3, r0
 800b56a:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800b56c:	7dfb      	ldrb	r3, [r7, #23]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d126      	bne.n	800b5c0 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800b572:	8a7b      	ldrh	r3, [r7, #18]
 800b574:	0a1b      	lsrs	r3, r3, #8
 800b576:	b29b      	uxth	r3, r3
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800b57e:	8a7b      	ldrh	r3, [r7, #18]
 800b580:	021b      	lsls	r3, r3, #8
 800b582:	b29a      	uxth	r2, r3
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	881b      	ldrh	r3, [r3, #0]
 800b58c:	b21a      	sxth	r2, r3
 800b58e:	89fb      	ldrh	r3, [r7, #14]
 800b590:	091b      	lsrs	r3, r3, #4
 800b592:	b29b      	uxth	r3, r3
 800b594:	011b      	lsls	r3, r3, #4
 800b596:	b21b      	sxth	r3, r3
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	b21b      	sxth	r3, r3
 800b59c:	4313      	orrs	r3, r2
 800b59e:	b21b      	sxth	r3, r3
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	b21a      	sxth	r2, r3
 800b5ac:	89fb      	ldrh	r3, [r7, #14]
 800b5ae:	b21b      	sxth	r3, r3
 800b5b0:	f003 030f 	and.w	r3, r3, #15
 800b5b4:	b21b      	sxth	r3, r3
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	b21b      	sxth	r3, r3
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800b5c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	371c      	adds	r7, #28
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd90      	pop	{r4, r7, pc}

0800b5ca <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b088      	sub	sp, #32
 800b5ce:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b5d0:	f107 0308 	add.w	r3, r7, #8
 800b5d4:	2218      	movs	r2, #24
 800b5d6:	2100      	movs	r1, #0
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f000 fcca 	bl	800bf72 <memset>
  rq.ogf = OGF_HOST_CTL;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800b5e2:	2303      	movs	r3, #3
 800b5e4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b5e6:	1dfb      	adds	r3, r7, #7
 800b5e8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b5ee:	f107 0308 	add.w	r3, r7, #8
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f000 f991 	bl	800b91c <hci_send_req>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	da01      	bge.n	800b604 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800b600:	23ff      	movs	r3, #255	; 0xff
 800b602:	e000      	b.n	800b606 <hci_reset+0x3c>
  
  return status;  
 800b604:	79fb      	ldrb	r3, [r7, #7]
}
 800b606:	4618      	mov	r0, r3
 800b608:	3720      	adds	r7, #32
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b08e      	sub	sp, #56	; 0x38
 800b612:	af00      	add	r7, sp, #0
 800b614:	60f8      	str	r0, [r7, #12]
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
 800b61a:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b61c:	f107 0314 	add.w	r3, r7, #20
 800b620:	2209      	movs	r2, #9
 800b622:	2100      	movs	r1, #0
 800b624:	4618      	mov	r0, r3
 800b626:	f000 fca4 	bl	800bf72 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b62a:	f107 0320 	add.w	r3, r7, #32
 800b62e:	2218      	movs	r2, #24
 800b630:	2100      	movs	r1, #0
 800b632:	4618      	mov	r0, r3
 800b634:	f000 fc9d 	bl	800bf72 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800b638:	2304      	movs	r3, #4
 800b63a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800b63c:	2301      	movs	r3, #1
 800b63e:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800b640:	2300      	movs	r3, #0
 800b642:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800b648:	f107 0314 	add.w	r3, r7, #20
 800b64c:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800b64e:	2309      	movs	r3, #9
 800b650:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b652:	f107 0320 	add.w	r3, r7, #32
 800b656:	2100      	movs	r1, #0
 800b658:	4618      	mov	r0, r3
 800b65a:	f000 f95f 	bl	800b91c <hci_send_req>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	da01      	bge.n	800b668 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800b664:	23ff      	movs	r3, #255	; 0xff
 800b666:	e018      	b.n	800b69a <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800b668:	7d3b      	ldrb	r3, [r7, #20]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d001      	beq.n	800b672 <hci_le_read_local_version+0x64>
    return resp.status;
 800b66e:	7d3b      	ldrb	r3, [r7, #20]
 800b670:	e013      	b.n	800b69a <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800b672:	7d7a      	ldrb	r2, [r7, #21]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800b678:	8afa      	ldrh	r2, [r7, #22]
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800b67e:	7e3a      	ldrb	r2, [r7, #24]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800b684:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800b688:	b29a      	uxth	r2, r3
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800b68e:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800b692:	b29a      	uxth	r2, r3
 800b694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b696:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3738      	adds	r7, #56	; 0x38
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b092      	sub	sp, #72	; 0x48
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	6039      	str	r1, [r7, #0]
 800b6ac:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800b6ae:	f107 0310 	add.w	r3, r7, #16
 800b6b2:	2220      	movs	r2, #32
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f000 fc5b 	bl	800bf72 <memset>
  scan_resp_cp.length = length;
 800b6bc:	79fb      	ldrb	r3, [r7, #7]
 800b6be:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	2b1f      	cmp	r3, #31
 800b6c4:	bf28      	it	cs
 800b6c6:	231f      	movcs	r3, #31
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	f107 0310 	add.w	r3, r7, #16
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f000 fc25 	bl	800bf24 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b6da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b6de:	2218      	movs	r2, #24
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f000 fc45 	bl	800bf72 <memset>
  rq.ogf = OGF_LE_CTL;
 800b6e8:	2308      	movs	r3, #8
 800b6ea:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800b6ec:	2309      	movs	r3, #9
 800b6ee:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800b6f0:	f107 0310 	add.w	r3, r7, #16
 800b6f4:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800b6f6:	2320      	movs	r3, #32
 800b6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800b6fa:	f107 030f 	add.w	r3, r7, #15
 800b6fe:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800b700:	2301      	movs	r3, #1
 800b702:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b708:	2100      	movs	r1, #0
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 f906 	bl	800b91c <hci_send_req>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	da01      	bge.n	800b71a <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800b716:	23ff      	movs	r3, #255	; 0xff
 800b718:	e000      	b.n	800b71c <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3748      	adds	r7, #72	; 0x48
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	3308      	adds	r3, #8
 800b730:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	2b04      	cmp	r3, #4
 800b738:	d001      	beq.n	800b73e <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800b73a:	2301      	movs	r3, #1
 800b73c:	e00c      	b.n	800b758 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3302      	adds	r3, #2
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	461a      	mov	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b74c:	3b03      	subs	r3, #3
 800b74e:	429a      	cmp	r2, r3
 800b750:	d001      	beq.n	800b756 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800b752:	2302      	movs	r3, #2
 800b754:	e000      	b.n	800b758 <verify_packet+0x34>
  
  return 0;      
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b0a6      	sub	sp, #152	; 0x98
 800b768:	af00      	add	r7, sp, #0
 800b76a:	607b      	str	r3, [r7, #4]
 800b76c:	4603      	mov	r3, r0
 800b76e:	81fb      	strh	r3, [r7, #14]
 800b770:	460b      	mov	r3, r1
 800b772:	81bb      	strh	r3, [r7, #12]
 800b774:	4613      	mov	r3, r2
 800b776:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800b778:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b77c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b780:	b21a      	sxth	r2, r3
 800b782:	89fb      	ldrh	r3, [r7, #14]
 800b784:	029b      	lsls	r3, r3, #10
 800b786:	b21b      	sxth	r3, r3
 800b788:	4313      	orrs	r3, r2
 800b78a:	b21b      	sxth	r3, r3
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800b790:	7afb      	ldrb	r3, [r7, #11]
 800b792:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800b794:	2301      	movs	r3, #1
 800b796:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800b798:	f107 0318 	add.w	r3, r7, #24
 800b79c:	3301      	adds	r3, #1
 800b79e:	461a      	mov	r2, r3
 800b7a0:	f107 0314 	add.w	r3, r7, #20
 800b7a4:	8819      	ldrh	r1, [r3, #0]
 800b7a6:	789b      	ldrb	r3, [r3, #2]
 800b7a8:	8011      	strh	r1, [r2, #0]
 800b7aa:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800b7ac:	f107 0318 	add.w	r3, r7, #24
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	7afa      	ldrb	r2, [r7, #11]
 800b7b4:	6879      	ldr	r1, [r7, #4]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f000 fbb4 	bl	800bf24 <memcpy>
  
  if (hciContext.io.Send)
 800b7bc:	4b08      	ldr	r3, [pc, #32]	; (800b7e0 <send_cmd+0x7c>)
 800b7be:	691b      	ldr	r3, [r3, #16]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d009      	beq.n	800b7d8 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800b7c4:	4b06      	ldr	r3, [pc, #24]	; (800b7e0 <send_cmd+0x7c>)
 800b7c6:	691b      	ldr	r3, [r3, #16]
 800b7c8:	7afa      	ldrb	r2, [r7, #11]
 800b7ca:	b292      	uxth	r2, r2
 800b7cc:	3204      	adds	r2, #4
 800b7ce:	b291      	uxth	r1, r2
 800b7d0:	f107 0218 	add.w	r2, r7, #24
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	4798      	blx	r3
  }
}
 800b7d8:	bf00      	nop
 800b7da:	3798      	adds	r7, #152	; 0x98
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	20000528 	.word	0x20000528

0800b7e4 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800b7ee:	e00a      	b.n	800b806 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800b7f0:	f107 030c 	add.w	r3, r7, #12
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6838      	ldr	r0, [r7, #0]
 800b7f8:	f000 faea 	bl	800bdd0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 fa51 	bl	800bca8 <list_insert_head>
  while (!list_is_empty(src_list))
 800b806:	6838      	ldr	r0, [r7, #0]
 800b808:	f000 fa2c 	bl	800bc64 <list_is_empty>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d0ee      	beq.n	800b7f0 <move_list+0xc>
  }
}
 800b812:	bf00      	nop
 800b814:	bf00      	nop
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800b822:	e009      	b.n	800b838 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800b824:	1d3b      	adds	r3, r7, #4
 800b826:	4619      	mov	r1, r3
 800b828:	4809      	ldr	r0, [pc, #36]	; (800b850 <free_event_list+0x34>)
 800b82a:	f000 faaa 	bl	800bd82 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4619      	mov	r1, r3
 800b832:	4808      	ldr	r0, [pc, #32]	; (800b854 <free_event_list+0x38>)
 800b834:	f000 fa5e 	bl	800bcf4 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800b838:	4806      	ldr	r0, [pc, #24]	; (800b854 <free_event_list+0x38>)
 800b83a:	f000 faf0 	bl	800be1e <list_get_size>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b01      	cmp	r3, #1
 800b842:	ddef      	ble.n	800b824 <free_event_list+0x8>
  }
}
 800b844:	bf00      	nop
 800b846:	bf00      	nop
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	20000e00 	.word	0x20000e00
 800b854:	20000df8 	.word	0x20000df8

0800b858 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800b868:	4a18      	ldr	r2, [pc, #96]	; (800b8cc <hci_init+0x74>)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800b86e:	4818      	ldr	r0, [pc, #96]	; (800b8d0 <hci_init+0x78>)
 800b870:	f000 f9e8 	bl	800bc44 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800b874:	4817      	ldr	r0, [pc, #92]	; (800b8d4 <hci_init+0x7c>)
 800b876:	f000 f9e5 	bl	800bc44 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800b87a:	f7f4 ffa7 	bl	80007cc <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800b87e:	2300      	movs	r3, #0
 800b880:	73fb      	strb	r3, [r7, #15]
 800b882:	e00c      	b.n	800b89e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800b884:	7bfb      	ldrb	r3, [r7, #15]
 800b886:	228c      	movs	r2, #140	; 0x8c
 800b888:	fb02 f303 	mul.w	r3, r2, r3
 800b88c:	4a12      	ldr	r2, [pc, #72]	; (800b8d8 <hci_init+0x80>)
 800b88e:	4413      	add	r3, r2
 800b890:	4619      	mov	r1, r3
 800b892:	480f      	ldr	r0, [pc, #60]	; (800b8d0 <hci_init+0x78>)
 800b894:	f000 fa2e 	bl	800bcf4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800b898:	7bfb      	ldrb	r3, [r7, #15]
 800b89a:	3301      	adds	r3, #1
 800b89c:	73fb      	strb	r3, [r7, #15]
 800b89e:	7bfb      	ldrb	r3, [r7, #15]
 800b8a0:	2b04      	cmp	r3, #4
 800b8a2:	d9ef      	bls.n	800b884 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800b8a4:	4b09      	ldr	r3, [pc, #36]	; (800b8cc <hci_init+0x74>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d003      	beq.n	800b8b4 <hci_init+0x5c>
 800b8ac:	4b07      	ldr	r3, [pc, #28]	; (800b8cc <hci_init+0x74>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800b8b4:	4b05      	ldr	r3, [pc, #20]	; (800b8cc <hci_init+0x74>)
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d002      	beq.n	800b8c2 <hci_init+0x6a>
 800b8bc:	4b03      	ldr	r3, [pc, #12]	; (800b8cc <hci_init+0x74>)
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	4798      	blx	r3
}
 800b8c2:	bf00      	nop
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	20000528 	.word	0x20000528
 800b8d0:	20000df8 	.word	0x20000df8
 800b8d4:	20000e00 	.word	0x20000e00
 800b8d8:	2000026c 	.word	0x2000026c

0800b8dc <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a0b      	ldr	r2, [pc, #44]	; (800b918 <hci_register_io_bus+0x3c>)
 800b8ea:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	4a09      	ldr	r2, [pc, #36]	; (800b918 <hci_register_io_bus+0x3c>)
 800b8f2:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	691b      	ldr	r3, [r3, #16]
 800b8f8:	4a07      	ldr	r2, [pc, #28]	; (800b918 <hci_register_io_bus+0x3c>)
 800b8fa:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	4a05      	ldr	r2, [pc, #20]	; (800b918 <hci_register_io_bus+0x3c>)
 800b902:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	4a03      	ldr	r2, [pc, #12]	; (800b918 <hci_register_io_bus+0x3c>)
 800b90a:	6093      	str	r3, [r2, #8]
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr
 800b918:	20000528 	.word	0x20000528

0800b91c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b08e      	sub	sp, #56	; 0x38
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	460b      	mov	r3, r1
 800b926:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	885b      	ldrh	r3, [r3, #2]
 800b92c:	b21b      	sxth	r3, r3
 800b92e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b932:	b21a      	sxth	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	881b      	ldrh	r3, [r3, #0]
 800b938:	029b      	lsls	r3, r3, #10
 800b93a:	b21b      	sxth	r3, r3
 800b93c:	4313      	orrs	r3, r2
 800b93e:	b21b      	sxth	r3, r3
 800b940:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800b942:	2300      	movs	r3, #0
 800b944:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800b946:	f107 0308 	add.w	r3, r7, #8
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 f97a 	bl	800bc44 <list_init_head>

  free_event_list();
 800b950:	f7ff ff64 	bl	800b81c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	8818      	ldrh	r0, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	8859      	ldrh	r1, [r3, #2]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	b2da      	uxtb	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	f7ff fefd 	bl	800b764 <send_cmd>
  
  if (async)
 800b96a:	78fb      	ldrb	r3, [r7, #3]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d001      	beq.n	800b974 <hci_send_req+0x58>
  {
    return 0;
 800b970:	2300      	movs	r3, #0
 800b972:	e0e5      	b.n	800bb40 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800b974:	f7f7 fd9c 	bl	80034b0 <HAL_GetTick>
 800b978:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800b97a:	f7f7 fd99 	bl	80034b0 <HAL_GetTick>
 800b97e:	4602      	mov	r2, r0
 800b980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b988:	f200 80b6 	bhi.w	800baf8 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800b98c:	486e      	ldr	r0, [pc, #440]	; (800bb48 <hci_send_req+0x22c>)
 800b98e:	f000 f969 	bl	800bc64 <list_is_empty>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d000      	beq.n	800b99a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800b998:	e7ef      	b.n	800b97a <hci_send_req+0x5e>
      {
        break;
 800b99a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800b99c:	f107 0310 	add.w	r3, r7, #16
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4869      	ldr	r0, [pc, #420]	; (800bb48 <hci_send_req+0x22c>)
 800b9a4:	f000 f9ed 	bl	800bd82 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	3308      	adds	r3, #8
 800b9ac:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	2b04      	cmp	r3, #4
 800b9b4:	d17b      	bne.n	800baae <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800b9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	3308      	adds	r3, #8
 800b9c0:	3303      	adds	r3, #3
 800b9c2:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b9ca:	3b03      	subs	r3, #3
 800b9cc:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800b9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	2b3e      	cmp	r3, #62	; 0x3e
 800b9d4:	d04d      	beq.n	800ba72 <hci_send_req+0x156>
 800b9d6:	2b3e      	cmp	r3, #62	; 0x3e
 800b9d8:	dc6b      	bgt.n	800bab2 <hci_send_req+0x196>
 800b9da:	2b10      	cmp	r3, #16
 800b9dc:	f000 808e 	beq.w	800bafc <hci_send_req+0x1e0>
 800b9e0:	2b10      	cmp	r3, #16
 800b9e2:	dc66      	bgt.n	800bab2 <hci_send_req+0x196>
 800b9e4:	2b0e      	cmp	r3, #14
 800b9e6:	d024      	beq.n	800ba32 <hci_send_req+0x116>
 800b9e8:	2b0f      	cmp	r3, #15
 800b9ea:	d162      	bne.n	800bab2 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	885b      	ldrh	r3, [r3, #2]
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	f040 8081 	bne.w	800bb00 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	2b0f      	cmp	r3, #15
 800ba04:	d004      	beq.n	800ba10 <hci_send_req+0xf4>
          if (cs->status) {
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d053      	beq.n	800bab6 <hci_send_req+0x19a>
            goto failed;
 800ba0e:	e07a      	b.n	800bb06 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	695a      	ldr	r2, [r3, #20]
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	bf28      	it	cs
 800ba1a:	461a      	movcs	r2, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6918      	ldr	r0, [r3, #16]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	695b      	ldr	r3, [r3, #20]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba2c:	f000 fa7a 	bl	800bf24 <memcpy>
        goto done;
 800ba30:	e07a      	b.n	800bb28 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba34:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d15f      	bne.n	800bb04 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba46:	3303      	adds	r3, #3
 800ba48:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	3b03      	subs	r3, #3
 800ba4e:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	695a      	ldr	r2, [r3, #20]
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	bf28      	it	cs
 800ba5a:	461a      	movcs	r2, r3
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6918      	ldr	r0, [r3, #16]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	695b      	ldr	r3, [r3, #20]
 800ba68:	461a      	mov	r2, r3
 800ba6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba6c:	f000 fa5a 	bl	800bf24 <memcpy>
        goto done;
 800ba70:	e05a      	b.n	800bb28 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba74:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d11a      	bne.n	800baba <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800ba84:	6a3b      	ldr	r3, [r7, #32]
 800ba86:	3b01      	subs	r3, #1
 800ba88:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	695a      	ldr	r2, [r3, #20]
 800ba8e:	6a3b      	ldr	r3, [r7, #32]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	bf28      	it	cs
 800ba94:	461a      	movcs	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6918      	ldr	r0, [r3, #16]
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	1c59      	adds	r1, r3, #1
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	695b      	ldr	r3, [r3, #20]
 800baa6:	461a      	mov	r2, r3
 800baa8:	f000 fa3c 	bl	800bf24 <memcpy>
        goto done;
 800baac:	e03c      	b.n	800bb28 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800baae:	bf00      	nop
 800bab0:	e004      	b.n	800babc <hci_send_req+0x1a0>
        break;
 800bab2:	bf00      	nop
 800bab4:	e002      	b.n	800babc <hci_send_req+0x1a0>
          break;
 800bab6:	bf00      	nop
 800bab8:	e000      	b.n	800babc <hci_send_req+0x1a0>
          break;
 800baba:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800babc:	4823      	ldr	r0, [pc, #140]	; (800bb4c <hci_send_req+0x230>)
 800babe:	f000 f8d1 	bl	800bc64 <list_is_empty>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00d      	beq.n	800bae4 <hci_send_req+0x1c8>
 800bac8:	481f      	ldr	r0, [pc, #124]	; (800bb48 <hci_send_req+0x22c>)
 800baca:	f000 f8cb 	bl	800bc64 <list_is_empty>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d007      	beq.n	800bae4 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	4619      	mov	r1, r3
 800bad8:	481c      	ldr	r0, [pc, #112]	; (800bb4c <hci_send_req+0x230>)
 800bada:	f000 f90b 	bl	800bcf4 <list_insert_tail>
      hciReadPacket=NULL;
 800bade:	2300      	movs	r3, #0
 800bae0:	613b      	str	r3, [r7, #16]
 800bae2:	e008      	b.n	800baf6 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	f107 0308 	add.w	r3, r7, #8
 800baea:	4611      	mov	r1, r2
 800baec:	4618      	mov	r0, r3
 800baee:	f000 f901 	bl	800bcf4 <list_insert_tail>
      hciReadPacket=NULL;
 800baf2:	2300      	movs	r3, #0
 800baf4:	613b      	str	r3, [r7, #16]
  {
 800baf6:	e73d      	b.n	800b974 <hci_send_req+0x58>
        goto failed;
 800baf8:	bf00      	nop
 800bafa:	e004      	b.n	800bb06 <hci_send_req+0x1ea>
        goto failed;
 800bafc:	bf00      	nop
 800bafe:	e002      	b.n	800bb06 <hci_send_req+0x1ea>
          goto failed;
 800bb00:	bf00      	nop
 800bb02:	e000      	b.n	800bb06 <hci_send_req+0x1ea>
          goto failed;
 800bb04:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d004      	beq.n	800bb16 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	4619      	mov	r1, r3
 800bb10:	480e      	ldr	r0, [pc, #56]	; (800bb4c <hci_send_req+0x230>)
 800bb12:	f000 f8c9 	bl	800bca8 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800bb16:	f107 0308 	add.w	r3, r7, #8
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	480a      	ldr	r0, [pc, #40]	; (800bb48 <hci_send_req+0x22c>)
 800bb1e:	f7ff fe61 	bl	800b7e4 <move_list>

  return -1;
 800bb22:	f04f 33ff 	mov.w	r3, #4294967295
 800bb26:	e00b      	b.n	800bb40 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4807      	ldr	r0, [pc, #28]	; (800bb4c <hci_send_req+0x230>)
 800bb2e:	f000 f8bb 	bl	800bca8 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800bb32:	f107 0308 	add.w	r3, r7, #8
 800bb36:	4619      	mov	r1, r3
 800bb38:	4803      	ldr	r0, [pc, #12]	; (800bb48 <hci_send_req+0x22c>)
 800bb3a:	f7ff fe53 	bl	800b7e4 <move_list>

  return 0;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3738      	adds	r7, #56	; 0x38
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20000e00 	.word	0x20000e00
 800bb4c:	20000df8 	.word	0x20000df8

0800bb50 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800bb56:	2300      	movs	r3, #0
 800bb58:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800bb5a:	e013      	b.n	800bb84 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800bb5c:	1d3b      	adds	r3, r7, #4
 800bb5e:	4619      	mov	r1, r3
 800bb60:	480e      	ldr	r0, [pc, #56]	; (800bb9c <hci_user_evt_proc+0x4c>)
 800bb62:	f000 f90e 	bl	800bd82 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800bb66:	4b0e      	ldr	r3, [pc, #56]	; (800bba0 <hci_user_evt_proc+0x50>)
 800bb68:	69db      	ldr	r3, [r3, #28]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d005      	beq.n	800bb7a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800bb6e:	4b0c      	ldr	r3, [pc, #48]	; (800bba0 <hci_user_evt_proc+0x50>)
 800bb70:	69db      	ldr	r3, [r3, #28]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	3208      	adds	r2, #8
 800bb76:	4610      	mov	r0, r2
 800bb78:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	4809      	ldr	r0, [pc, #36]	; (800bba4 <hci_user_evt_proc+0x54>)
 800bb80:	f000 f8b8 	bl	800bcf4 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800bb84:	4805      	ldr	r0, [pc, #20]	; (800bb9c <hci_user_evt_proc+0x4c>)
 800bb86:	f000 f86d 	bl	800bc64 <list_is_empty>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d0e5      	beq.n	800bb5c <hci_user_evt_proc+0xc>
  }
}
 800bb90:	bf00      	nop
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20000e00 	.word	0x20000e00
 800bba0:	20000528 	.word	0x20000528
 800bba4:	20000df8 	.word	0x20000df8

0800bba8 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b086      	sub	sp, #24
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800bbb8:	481f      	ldr	r0, [pc, #124]	; (800bc38 <hci_notify_asynch_evt+0x90>)
 800bbba:	f000 f853 	bl	800bc64 <list_is_empty>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d132      	bne.n	800bc2a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800bbc4:	f107 030c 	add.w	r3, r7, #12
 800bbc8:	4619      	mov	r1, r3
 800bbca:	481b      	ldr	r0, [pc, #108]	; (800bc38 <hci_notify_asynch_evt+0x90>)
 800bbcc:	f000 f8d9 	bl	800bd82 <list_remove_head>
    
    if (hciContext.io.Receive)
 800bbd0:	4b1a      	ldr	r3, [pc, #104]	; (800bc3c <hci_notify_asynch_evt+0x94>)
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d02a      	beq.n	800bc2e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800bbd8:	4b18      	ldr	r3, [pc, #96]	; (800bc3c <hci_notify_asynch_evt+0x94>)
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	3208      	adds	r2, #8
 800bbe0:	2180      	movs	r1, #128	; 0x80
 800bbe2:	4610      	mov	r0, r2
 800bbe4:	4798      	blx	r3
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800bbea:	7cfb      	ldrb	r3, [r7, #19]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d016      	beq.n	800bc1e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	7cfa      	ldrb	r2, [r7, #19]
 800bbf4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7ff fd92 	bl	800b724 <verify_packet>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d105      	bne.n	800bc12 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	4619      	mov	r1, r3
 800bc0a:	480d      	ldr	r0, [pc, #52]	; (800bc40 <hci_notify_asynch_evt+0x98>)
 800bc0c:	f000 f872 	bl	800bcf4 <list_insert_tail>
 800bc10:	e00d      	b.n	800bc2e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	4619      	mov	r1, r3
 800bc16:	4808      	ldr	r0, [pc, #32]	; (800bc38 <hci_notify_asynch_evt+0x90>)
 800bc18:	f000 f846 	bl	800bca8 <list_insert_head>
 800bc1c:	e007      	b.n	800bc2e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	4619      	mov	r1, r3
 800bc22:	4805      	ldr	r0, [pc, #20]	; (800bc38 <hci_notify_asynch_evt+0x90>)
 800bc24:	f000 f840 	bl	800bca8 <list_insert_head>
 800bc28:	e001      	b.n	800bc2e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800bc2e:	697b      	ldr	r3, [r7, #20]

}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3718      	adds	r7, #24
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	20000df8 	.word	0x20000df8
 800bc3c:	20000528 	.word	0x20000528
 800bc40:	20000e00 	.word	0x20000e00

0800bc44 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	605a      	str	r2, [r3, #4]
}
 800bc58:	bf00      	nop
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b087      	sub	sp, #28
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc6c:	f3ef 8310 	mrs	r3, PRIMASK
 800bc70:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc72:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bc74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc76:	b672      	cpsid	i
}
 800bc78:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d102      	bne.n	800bc8a <list_is_empty+0x26>
  {
    return_value = 1;
 800bc84:	2301      	movs	r3, #1
 800bc86:	75fb      	strb	r3, [r7, #23]
 800bc88:	e001      	b.n	800bc8e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	75fb      	strb	r3, [r7, #23]
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	f383 8810 	msr	PRIMASK, r3
}
 800bc98:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	371c      	adds	r7, #28
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b087      	sub	sp, #28
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcb2:	f3ef 8310 	mrs	r3, PRIMASK
 800bcb6:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bcba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcbc:	b672      	cpsid	i
}
 800bcbe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	605a      	str	r2, [r3, #4]
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	f383 8810 	msr	PRIMASK, r3
}
 800bce6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800bce8:	bf00      	nop
 800bcea:	371c      	adds	r7, #28
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b087      	sub	sp, #28
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcfe:	f3ef 8310 	mrs	r3, PRIMASK
 800bd02:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd04:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bd06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd08:	b672      	cpsid	i
}
 800bd0a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685a      	ldr	r2, [r3, #4]
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	683a      	ldr	r2, [r7, #0]
 800bd1e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	f383 8810 	msr	PRIMASK, r3
}
 800bd32:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800bd34:	bf00      	nop
 800bd36:	371c      	adds	r7, #28
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b087      	sub	sp, #28
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd48:	f3ef 8310 	mrs	r3, PRIMASK
 800bd4c:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bd50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd52:	b672      	cpsid	i
}
 800bd54:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	6812      	ldr	r2, [r2, #0]
 800bd5e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	6852      	ldr	r2, [r2, #4]
 800bd68:	605a      	str	r2, [r3, #4]
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f383 8810 	msr	PRIMASK, r3
}
 800bd74:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800bd76:	bf00      	nop
 800bd78:	371c      	adds	r7, #28
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	b086      	sub	sp, #24
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
 800bd8a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd8c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd90:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd92:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bd94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd96:	b672      	cpsid	i
}
 800bd98:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7ff ffca 	bl	800bd40 <list_remove_node>
  (*node)->next = NULL;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	605a      	str	r2, [r3, #4]
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	f383 8810 	msr	PRIMASK, r3
}
 800bdc6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800bdc8:	bf00      	nop
 800bdca:	3718      	adds	r7, #24
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdda:	f3ef 8310 	mrs	r3, PRIMASK
 800bdde:	60fb      	str	r3, [r7, #12]
  return(result);
 800bde0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bde2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bde4:	b672      	cpsid	i
}
 800bde6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685a      	ldr	r2, [r3, #4]
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7ff ffa3 	bl	800bd40 <list_remove_node>
  (*node)->next = NULL;
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2200      	movs	r2, #0
 800be00:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2200      	movs	r2, #0
 800be08:	605a      	str	r2, [r3, #4]
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	f383 8810 	msr	PRIMASK, r3
}
 800be14:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800be16:	bf00      	nop
 800be18:	3718      	adds	r7, #24
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800be1e:	b480      	push	{r7}
 800be20:	b089      	sub	sp, #36	; 0x24
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
  int size = 0;
 800be26:	2300      	movs	r3, #0
 800be28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be2a:	f3ef 8310 	mrs	r3, PRIMASK
 800be2e:	613b      	str	r3, [r7, #16]
  return(result);
 800be30:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800be32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800be34:	b672      	cpsid	i
}
 800be36:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800be3e:	e005      	b.n	800be4c <list_get_size+0x2e>
  {
    size++;
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	3301      	adds	r3, #1
 800be44:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800be4c:	69ba      	ldr	r2, [r7, #24]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	429a      	cmp	r2, r3
 800be52:	d1f5      	bne.n	800be40 <list_get_size+0x22>
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f383 8810 	msr	PRIMASK, r3
}
 800be5e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800be60:	69fb      	ldr	r3, [r7, #28]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3724      	adds	r7, #36	; 0x24
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
	...

0800be70 <__assert_func>:
 800be70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be72:	4614      	mov	r4, r2
 800be74:	461a      	mov	r2, r3
 800be76:	4b09      	ldr	r3, [pc, #36]	; (800be9c <__assert_func+0x2c>)
 800be78:	4605      	mov	r5, r0
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68d8      	ldr	r0, [r3, #12]
 800be7e:	b14c      	cbz	r4, 800be94 <__assert_func+0x24>
 800be80:	4b07      	ldr	r3, [pc, #28]	; (800bea0 <__assert_func+0x30>)
 800be82:	9100      	str	r1, [sp, #0]
 800be84:	4907      	ldr	r1, [pc, #28]	; (800bea4 <__assert_func+0x34>)
 800be86:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be8a:	462b      	mov	r3, r5
 800be8c:	f000 f814 	bl	800beb8 <fiprintf>
 800be90:	f000 fd70 	bl	800c974 <abort>
 800be94:	4b04      	ldr	r3, [pc, #16]	; (800bea8 <__assert_func+0x38>)
 800be96:	461c      	mov	r4, r3
 800be98:	e7f3      	b.n	800be82 <__assert_func+0x12>
 800be9a:	bf00      	nop
 800be9c:	2000000c 	.word	0x2000000c
 800bea0:	0800d550 	.word	0x0800d550
 800bea4:	0800d55d 	.word	0x0800d55d
 800bea8:	0800d58b 	.word	0x0800d58b

0800beac <__errno>:
 800beac:	4b01      	ldr	r3, [pc, #4]	; (800beb4 <__errno+0x8>)
 800beae:	6818      	ldr	r0, [r3, #0]
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	2000000c 	.word	0x2000000c

0800beb8 <fiprintf>:
 800beb8:	b40e      	push	{r1, r2, r3}
 800beba:	b503      	push	{r0, r1, lr}
 800bebc:	ab03      	add	r3, sp, #12
 800bebe:	4601      	mov	r1, r0
 800bec0:	4805      	ldr	r0, [pc, #20]	; (800bed8 <fiprintf+0x20>)
 800bec2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bec6:	6800      	ldr	r0, [r0, #0]
 800bec8:	9301      	str	r3, [sp, #4]
 800beca:	f000 f92f 	bl	800c12c <_vfiprintf_r>
 800bece:	b002      	add	sp, #8
 800bed0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bed4:	b003      	add	sp, #12
 800bed6:	4770      	bx	lr
 800bed8:	2000000c 	.word	0x2000000c

0800bedc <__libc_init_array>:
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	4d0d      	ldr	r5, [pc, #52]	; (800bf14 <__libc_init_array+0x38>)
 800bee0:	2600      	movs	r6, #0
 800bee2:	4c0d      	ldr	r4, [pc, #52]	; (800bf18 <__libc_init_array+0x3c>)
 800bee4:	1b64      	subs	r4, r4, r5
 800bee6:	10a4      	asrs	r4, r4, #2
 800bee8:	42a6      	cmp	r6, r4
 800beea:	d109      	bne.n	800bf00 <__libc_init_array+0x24>
 800beec:	4d0b      	ldr	r5, [pc, #44]	; (800bf1c <__libc_init_array+0x40>)
 800beee:	2600      	movs	r6, #0
 800bef0:	4c0b      	ldr	r4, [pc, #44]	; (800bf20 <__libc_init_array+0x44>)
 800bef2:	f001 f86d 	bl	800cfd0 <_init>
 800bef6:	1b64      	subs	r4, r4, r5
 800bef8:	10a4      	asrs	r4, r4, #2
 800befa:	42a6      	cmp	r6, r4
 800befc:	d105      	bne.n	800bf0a <__libc_init_array+0x2e>
 800befe:	bd70      	pop	{r4, r5, r6, pc}
 800bf00:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf04:	3601      	adds	r6, #1
 800bf06:	4798      	blx	r3
 800bf08:	e7ee      	b.n	800bee8 <__libc_init_array+0xc>
 800bf0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf0e:	3601      	adds	r6, #1
 800bf10:	4798      	blx	r3
 800bf12:	e7f2      	b.n	800befa <__libc_init_array+0x1e>
 800bf14:	0800d62c 	.word	0x0800d62c
 800bf18:	0800d62c 	.word	0x0800d62c
 800bf1c:	0800d62c 	.word	0x0800d62c
 800bf20:	0800d634 	.word	0x0800d634

0800bf24 <memcpy>:
 800bf24:	440a      	add	r2, r1
 800bf26:	1e43      	subs	r3, r0, #1
 800bf28:	4291      	cmp	r1, r2
 800bf2a:	d100      	bne.n	800bf2e <memcpy+0xa>
 800bf2c:	4770      	bx	lr
 800bf2e:	b510      	push	{r4, lr}
 800bf30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf34:	4291      	cmp	r1, r2
 800bf36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf3a:	d1f9      	bne.n	800bf30 <memcpy+0xc>
 800bf3c:	bd10      	pop	{r4, pc}

0800bf3e <memmove>:
 800bf3e:	4288      	cmp	r0, r1
 800bf40:	b510      	push	{r4, lr}
 800bf42:	eb01 0402 	add.w	r4, r1, r2
 800bf46:	d902      	bls.n	800bf4e <memmove+0x10>
 800bf48:	4284      	cmp	r4, r0
 800bf4a:	4623      	mov	r3, r4
 800bf4c:	d807      	bhi.n	800bf5e <memmove+0x20>
 800bf4e:	1e43      	subs	r3, r0, #1
 800bf50:	42a1      	cmp	r1, r4
 800bf52:	d008      	beq.n	800bf66 <memmove+0x28>
 800bf54:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf58:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf5c:	e7f8      	b.n	800bf50 <memmove+0x12>
 800bf5e:	4402      	add	r2, r0
 800bf60:	4601      	mov	r1, r0
 800bf62:	428a      	cmp	r2, r1
 800bf64:	d100      	bne.n	800bf68 <memmove+0x2a>
 800bf66:	bd10      	pop	{r4, pc}
 800bf68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf6c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf70:	e7f7      	b.n	800bf62 <memmove+0x24>

0800bf72 <memset>:
 800bf72:	4402      	add	r2, r0
 800bf74:	4603      	mov	r3, r0
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d100      	bne.n	800bf7c <memset+0xa>
 800bf7a:	4770      	bx	lr
 800bf7c:	f803 1b01 	strb.w	r1, [r3], #1
 800bf80:	e7f9      	b.n	800bf76 <memset+0x4>
	...

0800bf84 <_free_r>:
 800bf84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf86:	2900      	cmp	r1, #0
 800bf88:	d047      	beq.n	800c01a <_free_r+0x96>
 800bf8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf8e:	1f0c      	subs	r4, r1, #4
 800bf90:	9001      	str	r0, [sp, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	bfb8      	it	lt
 800bf96:	18e4      	addlt	r4, r4, r3
 800bf98:	f000 ff1e 	bl	800cdd8 <__malloc_lock>
 800bf9c:	4a20      	ldr	r2, [pc, #128]	; (800c020 <_free_r+0x9c>)
 800bf9e:	9801      	ldr	r0, [sp, #4]
 800bfa0:	6813      	ldr	r3, [r2, #0]
 800bfa2:	4615      	mov	r5, r2
 800bfa4:	b933      	cbnz	r3, 800bfb4 <_free_r+0x30>
 800bfa6:	6063      	str	r3, [r4, #4]
 800bfa8:	6014      	str	r4, [r2, #0]
 800bfaa:	b003      	add	sp, #12
 800bfac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfb0:	f000 bf18 	b.w	800cde4 <__malloc_unlock>
 800bfb4:	42a3      	cmp	r3, r4
 800bfb6:	d90b      	bls.n	800bfd0 <_free_r+0x4c>
 800bfb8:	6821      	ldr	r1, [r4, #0]
 800bfba:	1862      	adds	r2, r4, r1
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	bf02      	ittt	eq
 800bfc0:	681a      	ldreq	r2, [r3, #0]
 800bfc2:	685b      	ldreq	r3, [r3, #4]
 800bfc4:	1852      	addeq	r2, r2, r1
 800bfc6:	6063      	str	r3, [r4, #4]
 800bfc8:	bf08      	it	eq
 800bfca:	6022      	streq	r2, [r4, #0]
 800bfcc:	602c      	str	r4, [r5, #0]
 800bfce:	e7ec      	b.n	800bfaa <_free_r+0x26>
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	b10b      	cbz	r3, 800bfda <_free_r+0x56>
 800bfd6:	42a3      	cmp	r3, r4
 800bfd8:	d9fa      	bls.n	800bfd0 <_free_r+0x4c>
 800bfda:	6811      	ldr	r1, [r2, #0]
 800bfdc:	1855      	adds	r5, r2, r1
 800bfde:	42a5      	cmp	r5, r4
 800bfe0:	d10b      	bne.n	800bffa <_free_r+0x76>
 800bfe2:	6824      	ldr	r4, [r4, #0]
 800bfe4:	4421      	add	r1, r4
 800bfe6:	1854      	adds	r4, r2, r1
 800bfe8:	6011      	str	r1, [r2, #0]
 800bfea:	42a3      	cmp	r3, r4
 800bfec:	d1dd      	bne.n	800bfaa <_free_r+0x26>
 800bfee:	681c      	ldr	r4, [r3, #0]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	4421      	add	r1, r4
 800bff4:	6053      	str	r3, [r2, #4]
 800bff6:	6011      	str	r1, [r2, #0]
 800bff8:	e7d7      	b.n	800bfaa <_free_r+0x26>
 800bffa:	d902      	bls.n	800c002 <_free_r+0x7e>
 800bffc:	230c      	movs	r3, #12
 800bffe:	6003      	str	r3, [r0, #0]
 800c000:	e7d3      	b.n	800bfaa <_free_r+0x26>
 800c002:	6825      	ldr	r5, [r4, #0]
 800c004:	1961      	adds	r1, r4, r5
 800c006:	428b      	cmp	r3, r1
 800c008:	bf02      	ittt	eq
 800c00a:	6819      	ldreq	r1, [r3, #0]
 800c00c:	685b      	ldreq	r3, [r3, #4]
 800c00e:	1949      	addeq	r1, r1, r5
 800c010:	6063      	str	r3, [r4, #4]
 800c012:	bf08      	it	eq
 800c014:	6021      	streq	r1, [r4, #0]
 800c016:	6054      	str	r4, [r2, #4]
 800c018:	e7c7      	b.n	800bfaa <_free_r+0x26>
 800c01a:	b003      	add	sp, #12
 800c01c:	bd30      	pop	{r4, r5, pc}
 800c01e:	bf00      	nop
 800c020:	20000548 	.word	0x20000548

0800c024 <_malloc_r>:
 800c024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c026:	1ccd      	adds	r5, r1, #3
 800c028:	4606      	mov	r6, r0
 800c02a:	f025 0503 	bic.w	r5, r5, #3
 800c02e:	3508      	adds	r5, #8
 800c030:	2d0c      	cmp	r5, #12
 800c032:	bf38      	it	cc
 800c034:	250c      	movcc	r5, #12
 800c036:	2d00      	cmp	r5, #0
 800c038:	db01      	blt.n	800c03e <_malloc_r+0x1a>
 800c03a:	42a9      	cmp	r1, r5
 800c03c:	d903      	bls.n	800c046 <_malloc_r+0x22>
 800c03e:	230c      	movs	r3, #12
 800c040:	6033      	str	r3, [r6, #0]
 800c042:	2000      	movs	r0, #0
 800c044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c046:	f000 fec7 	bl	800cdd8 <__malloc_lock>
 800c04a:	4921      	ldr	r1, [pc, #132]	; (800c0d0 <_malloc_r+0xac>)
 800c04c:	680a      	ldr	r2, [r1, #0]
 800c04e:	4614      	mov	r4, r2
 800c050:	b99c      	cbnz	r4, 800c07a <_malloc_r+0x56>
 800c052:	4f20      	ldr	r7, [pc, #128]	; (800c0d4 <_malloc_r+0xb0>)
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	b923      	cbnz	r3, 800c062 <_malloc_r+0x3e>
 800c058:	4621      	mov	r1, r4
 800c05a:	4630      	mov	r0, r6
 800c05c:	f000 fbba 	bl	800c7d4 <_sbrk_r>
 800c060:	6038      	str	r0, [r7, #0]
 800c062:	4629      	mov	r1, r5
 800c064:	4630      	mov	r0, r6
 800c066:	f000 fbb5 	bl	800c7d4 <_sbrk_r>
 800c06a:	1c43      	adds	r3, r0, #1
 800c06c:	d123      	bne.n	800c0b6 <_malloc_r+0x92>
 800c06e:	230c      	movs	r3, #12
 800c070:	4630      	mov	r0, r6
 800c072:	6033      	str	r3, [r6, #0]
 800c074:	f000 feb6 	bl	800cde4 <__malloc_unlock>
 800c078:	e7e3      	b.n	800c042 <_malloc_r+0x1e>
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	1b5b      	subs	r3, r3, r5
 800c07e:	d417      	bmi.n	800c0b0 <_malloc_r+0x8c>
 800c080:	2b0b      	cmp	r3, #11
 800c082:	d903      	bls.n	800c08c <_malloc_r+0x68>
 800c084:	6023      	str	r3, [r4, #0]
 800c086:	441c      	add	r4, r3
 800c088:	6025      	str	r5, [r4, #0]
 800c08a:	e004      	b.n	800c096 <_malloc_r+0x72>
 800c08c:	6863      	ldr	r3, [r4, #4]
 800c08e:	42a2      	cmp	r2, r4
 800c090:	bf0c      	ite	eq
 800c092:	600b      	streq	r3, [r1, #0]
 800c094:	6053      	strne	r3, [r2, #4]
 800c096:	4630      	mov	r0, r6
 800c098:	f000 fea4 	bl	800cde4 <__malloc_unlock>
 800c09c:	f104 000b 	add.w	r0, r4, #11
 800c0a0:	1d23      	adds	r3, r4, #4
 800c0a2:	f020 0007 	bic.w	r0, r0, #7
 800c0a6:	1ac2      	subs	r2, r0, r3
 800c0a8:	d0cc      	beq.n	800c044 <_malloc_r+0x20>
 800c0aa:	1a1b      	subs	r3, r3, r0
 800c0ac:	50a3      	str	r3, [r4, r2]
 800c0ae:	e7c9      	b.n	800c044 <_malloc_r+0x20>
 800c0b0:	4622      	mov	r2, r4
 800c0b2:	6864      	ldr	r4, [r4, #4]
 800c0b4:	e7cc      	b.n	800c050 <_malloc_r+0x2c>
 800c0b6:	1cc4      	adds	r4, r0, #3
 800c0b8:	f024 0403 	bic.w	r4, r4, #3
 800c0bc:	42a0      	cmp	r0, r4
 800c0be:	d0e3      	beq.n	800c088 <_malloc_r+0x64>
 800c0c0:	1a21      	subs	r1, r4, r0
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	f000 fb86 	bl	800c7d4 <_sbrk_r>
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	d1dd      	bne.n	800c088 <_malloc_r+0x64>
 800c0cc:	e7cf      	b.n	800c06e <_malloc_r+0x4a>
 800c0ce:	bf00      	nop
 800c0d0:	20000548 	.word	0x20000548
 800c0d4:	2000054c 	.word	0x2000054c

0800c0d8 <__sfputc_r>:
 800c0d8:	6893      	ldr	r3, [r2, #8]
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	6093      	str	r3, [r2, #8]
 800c0e0:	b410      	push	{r4}
 800c0e2:	da08      	bge.n	800c0f6 <__sfputc_r+0x1e>
 800c0e4:	6994      	ldr	r4, [r2, #24]
 800c0e6:	42a3      	cmp	r3, r4
 800c0e8:	db01      	blt.n	800c0ee <__sfputc_r+0x16>
 800c0ea:	290a      	cmp	r1, #10
 800c0ec:	d103      	bne.n	800c0f6 <__sfputc_r+0x1e>
 800c0ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0f2:	f000 bb7f 	b.w	800c7f4 <__swbuf_r>
 800c0f6:	6813      	ldr	r3, [r2, #0]
 800c0f8:	1c58      	adds	r0, r3, #1
 800c0fa:	6010      	str	r0, [r2, #0]
 800c0fc:	4608      	mov	r0, r1
 800c0fe:	7019      	strb	r1, [r3, #0]
 800c100:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <__sfputs_r>:
 800c106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c108:	4606      	mov	r6, r0
 800c10a:	460f      	mov	r7, r1
 800c10c:	4614      	mov	r4, r2
 800c10e:	18d5      	adds	r5, r2, r3
 800c110:	42ac      	cmp	r4, r5
 800c112:	d101      	bne.n	800c118 <__sfputs_r+0x12>
 800c114:	2000      	movs	r0, #0
 800c116:	e007      	b.n	800c128 <__sfputs_r+0x22>
 800c118:	463a      	mov	r2, r7
 800c11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c11e:	4630      	mov	r0, r6
 800c120:	f7ff ffda 	bl	800c0d8 <__sfputc_r>
 800c124:	1c43      	adds	r3, r0, #1
 800c126:	d1f3      	bne.n	800c110 <__sfputs_r+0xa>
 800c128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c12c <_vfiprintf_r>:
 800c12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c130:	460d      	mov	r5, r1
 800c132:	b09d      	sub	sp, #116	; 0x74
 800c134:	4614      	mov	r4, r2
 800c136:	4698      	mov	r8, r3
 800c138:	4606      	mov	r6, r0
 800c13a:	b118      	cbz	r0, 800c144 <_vfiprintf_r+0x18>
 800c13c:	6983      	ldr	r3, [r0, #24]
 800c13e:	b90b      	cbnz	r3, 800c144 <_vfiprintf_r+0x18>
 800c140:	f000 fd38 	bl	800cbb4 <__sinit>
 800c144:	4b89      	ldr	r3, [pc, #548]	; (800c36c <_vfiprintf_r+0x240>)
 800c146:	429d      	cmp	r5, r3
 800c148:	d11b      	bne.n	800c182 <_vfiprintf_r+0x56>
 800c14a:	6875      	ldr	r5, [r6, #4]
 800c14c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c14e:	07d9      	lsls	r1, r3, #31
 800c150:	d405      	bmi.n	800c15e <_vfiprintf_r+0x32>
 800c152:	89ab      	ldrh	r3, [r5, #12]
 800c154:	059a      	lsls	r2, r3, #22
 800c156:	d402      	bmi.n	800c15e <_vfiprintf_r+0x32>
 800c158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c15a:	f000 fdc9 	bl	800ccf0 <__retarget_lock_acquire_recursive>
 800c15e:	89ab      	ldrh	r3, [r5, #12]
 800c160:	071b      	lsls	r3, r3, #28
 800c162:	d501      	bpl.n	800c168 <_vfiprintf_r+0x3c>
 800c164:	692b      	ldr	r3, [r5, #16]
 800c166:	b9eb      	cbnz	r3, 800c1a4 <_vfiprintf_r+0x78>
 800c168:	4629      	mov	r1, r5
 800c16a:	4630      	mov	r0, r6
 800c16c:	f000 fb94 	bl	800c898 <__swsetup_r>
 800c170:	b1c0      	cbz	r0, 800c1a4 <_vfiprintf_r+0x78>
 800c172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c174:	07dc      	lsls	r4, r3, #31
 800c176:	d50e      	bpl.n	800c196 <_vfiprintf_r+0x6a>
 800c178:	f04f 30ff 	mov.w	r0, #4294967295
 800c17c:	b01d      	add	sp, #116	; 0x74
 800c17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c182:	4b7b      	ldr	r3, [pc, #492]	; (800c370 <_vfiprintf_r+0x244>)
 800c184:	429d      	cmp	r5, r3
 800c186:	d101      	bne.n	800c18c <_vfiprintf_r+0x60>
 800c188:	68b5      	ldr	r5, [r6, #8]
 800c18a:	e7df      	b.n	800c14c <_vfiprintf_r+0x20>
 800c18c:	4b79      	ldr	r3, [pc, #484]	; (800c374 <_vfiprintf_r+0x248>)
 800c18e:	429d      	cmp	r5, r3
 800c190:	bf08      	it	eq
 800c192:	68f5      	ldreq	r5, [r6, #12]
 800c194:	e7da      	b.n	800c14c <_vfiprintf_r+0x20>
 800c196:	89ab      	ldrh	r3, [r5, #12]
 800c198:	0598      	lsls	r0, r3, #22
 800c19a:	d4ed      	bmi.n	800c178 <_vfiprintf_r+0x4c>
 800c19c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c19e:	f000 fda8 	bl	800ccf2 <__retarget_lock_release_recursive>
 800c1a2:	e7e9      	b.n	800c178 <_vfiprintf_r+0x4c>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1aa:	f04f 0901 	mov.w	r9, #1
 800c1ae:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800c378 <_vfiprintf_r+0x24c>
 800c1b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b4:	2320      	movs	r3, #32
 800c1b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1ba:	2330      	movs	r3, #48	; 0x30
 800c1bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1c0:	4623      	mov	r3, r4
 800c1c2:	469a      	mov	sl, r3
 800c1c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1c8:	b10a      	cbz	r2, 800c1ce <_vfiprintf_r+0xa2>
 800c1ca:	2a25      	cmp	r2, #37	; 0x25
 800c1cc:	d1f9      	bne.n	800c1c2 <_vfiprintf_r+0x96>
 800c1ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c1d2:	d00b      	beq.n	800c1ec <_vfiprintf_r+0xc0>
 800c1d4:	465b      	mov	r3, fp
 800c1d6:	4622      	mov	r2, r4
 800c1d8:	4629      	mov	r1, r5
 800c1da:	4630      	mov	r0, r6
 800c1dc:	f7ff ff93 	bl	800c106 <__sfputs_r>
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	f000 80aa 	beq.w	800c33a <_vfiprintf_r+0x20e>
 800c1e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1e8:	445a      	add	r2, fp
 800c1ea:	9209      	str	r2, [sp, #36]	; 0x24
 800c1ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f000 80a2 	beq.w	800c33a <_vfiprintf_r+0x20e>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1fc:	f10a 0a01 	add.w	sl, sl, #1
 800c200:	9304      	str	r3, [sp, #16]
 800c202:	9307      	str	r3, [sp, #28]
 800c204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c208:	931a      	str	r3, [sp, #104]	; 0x68
 800c20a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c20e:	4654      	mov	r4, sl
 800c210:	2205      	movs	r2, #5
 800c212:	4859      	ldr	r0, [pc, #356]	; (800c378 <_vfiprintf_r+0x24c>)
 800c214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c218:	f000 fdd0 	bl	800cdbc <memchr>
 800c21c:	9a04      	ldr	r2, [sp, #16]
 800c21e:	b9d8      	cbnz	r0, 800c258 <_vfiprintf_r+0x12c>
 800c220:	06d1      	lsls	r1, r2, #27
 800c222:	bf44      	itt	mi
 800c224:	2320      	movmi	r3, #32
 800c226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c22a:	0713      	lsls	r3, r2, #28
 800c22c:	bf44      	itt	mi
 800c22e:	232b      	movmi	r3, #43	; 0x2b
 800c230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c234:	f89a 3000 	ldrb.w	r3, [sl]
 800c238:	2b2a      	cmp	r3, #42	; 0x2a
 800c23a:	d015      	beq.n	800c268 <_vfiprintf_r+0x13c>
 800c23c:	9a07      	ldr	r2, [sp, #28]
 800c23e:	4654      	mov	r4, sl
 800c240:	2000      	movs	r0, #0
 800c242:	f04f 0c0a 	mov.w	ip, #10
 800c246:	4621      	mov	r1, r4
 800c248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c24c:	3b30      	subs	r3, #48	; 0x30
 800c24e:	2b09      	cmp	r3, #9
 800c250:	d94e      	bls.n	800c2f0 <_vfiprintf_r+0x1c4>
 800c252:	b1b0      	cbz	r0, 800c282 <_vfiprintf_r+0x156>
 800c254:	9207      	str	r2, [sp, #28]
 800c256:	e014      	b.n	800c282 <_vfiprintf_r+0x156>
 800c258:	eba0 0308 	sub.w	r3, r0, r8
 800c25c:	46a2      	mov	sl, r4
 800c25e:	fa09 f303 	lsl.w	r3, r9, r3
 800c262:	4313      	orrs	r3, r2
 800c264:	9304      	str	r3, [sp, #16]
 800c266:	e7d2      	b.n	800c20e <_vfiprintf_r+0xe2>
 800c268:	9b03      	ldr	r3, [sp, #12]
 800c26a:	1d19      	adds	r1, r3, #4
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	9103      	str	r1, [sp, #12]
 800c272:	bfbb      	ittet	lt
 800c274:	425b      	neglt	r3, r3
 800c276:	f042 0202 	orrlt.w	r2, r2, #2
 800c27a:	9307      	strge	r3, [sp, #28]
 800c27c:	9307      	strlt	r3, [sp, #28]
 800c27e:	bfb8      	it	lt
 800c280:	9204      	strlt	r2, [sp, #16]
 800c282:	7823      	ldrb	r3, [r4, #0]
 800c284:	2b2e      	cmp	r3, #46	; 0x2e
 800c286:	d10c      	bne.n	800c2a2 <_vfiprintf_r+0x176>
 800c288:	7863      	ldrb	r3, [r4, #1]
 800c28a:	2b2a      	cmp	r3, #42	; 0x2a
 800c28c:	d135      	bne.n	800c2fa <_vfiprintf_r+0x1ce>
 800c28e:	9b03      	ldr	r3, [sp, #12]
 800c290:	3402      	adds	r4, #2
 800c292:	1d1a      	adds	r2, r3, #4
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	9203      	str	r2, [sp, #12]
 800c29a:	bfb8      	it	lt
 800c29c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2a0:	9305      	str	r3, [sp, #20]
 800c2a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c388 <_vfiprintf_r+0x25c>
 800c2a6:	2203      	movs	r2, #3
 800c2a8:	7821      	ldrb	r1, [r4, #0]
 800c2aa:	4650      	mov	r0, sl
 800c2ac:	f000 fd86 	bl	800cdbc <memchr>
 800c2b0:	b140      	cbz	r0, 800c2c4 <_vfiprintf_r+0x198>
 800c2b2:	2340      	movs	r3, #64	; 0x40
 800c2b4:	eba0 000a 	sub.w	r0, r0, sl
 800c2b8:	3401      	adds	r4, #1
 800c2ba:	fa03 f000 	lsl.w	r0, r3, r0
 800c2be:	9b04      	ldr	r3, [sp, #16]
 800c2c0:	4303      	orrs	r3, r0
 800c2c2:	9304      	str	r3, [sp, #16]
 800c2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2c8:	2206      	movs	r2, #6
 800c2ca:	482c      	ldr	r0, [pc, #176]	; (800c37c <_vfiprintf_r+0x250>)
 800c2cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2d0:	f000 fd74 	bl	800cdbc <memchr>
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	d03f      	beq.n	800c358 <_vfiprintf_r+0x22c>
 800c2d8:	4b29      	ldr	r3, [pc, #164]	; (800c380 <_vfiprintf_r+0x254>)
 800c2da:	bb1b      	cbnz	r3, 800c324 <_vfiprintf_r+0x1f8>
 800c2dc:	9b03      	ldr	r3, [sp, #12]
 800c2de:	3307      	adds	r3, #7
 800c2e0:	f023 0307 	bic.w	r3, r3, #7
 800c2e4:	3308      	adds	r3, #8
 800c2e6:	9303      	str	r3, [sp, #12]
 800c2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2ea:	443b      	add	r3, r7
 800c2ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c2ee:	e767      	b.n	800c1c0 <_vfiprintf_r+0x94>
 800c2f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2f4:	460c      	mov	r4, r1
 800c2f6:	2001      	movs	r0, #1
 800c2f8:	e7a5      	b.n	800c246 <_vfiprintf_r+0x11a>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	3401      	adds	r4, #1
 800c2fe:	f04f 0c0a 	mov.w	ip, #10
 800c302:	4619      	mov	r1, r3
 800c304:	9305      	str	r3, [sp, #20]
 800c306:	4620      	mov	r0, r4
 800c308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c30c:	3a30      	subs	r2, #48	; 0x30
 800c30e:	2a09      	cmp	r2, #9
 800c310:	d903      	bls.n	800c31a <_vfiprintf_r+0x1ee>
 800c312:	2b00      	cmp	r3, #0
 800c314:	d0c5      	beq.n	800c2a2 <_vfiprintf_r+0x176>
 800c316:	9105      	str	r1, [sp, #20]
 800c318:	e7c3      	b.n	800c2a2 <_vfiprintf_r+0x176>
 800c31a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c31e:	4604      	mov	r4, r0
 800c320:	2301      	movs	r3, #1
 800c322:	e7f0      	b.n	800c306 <_vfiprintf_r+0x1da>
 800c324:	ab03      	add	r3, sp, #12
 800c326:	462a      	mov	r2, r5
 800c328:	a904      	add	r1, sp, #16
 800c32a:	4630      	mov	r0, r6
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	4b15      	ldr	r3, [pc, #84]	; (800c384 <_vfiprintf_r+0x258>)
 800c330:	e000      	b.n	800c334 <_vfiprintf_r+0x208>
 800c332:	bf00      	nop
 800c334:	4607      	mov	r7, r0
 800c336:	1c78      	adds	r0, r7, #1
 800c338:	d1d6      	bne.n	800c2e8 <_vfiprintf_r+0x1bc>
 800c33a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c33c:	07d9      	lsls	r1, r3, #31
 800c33e:	d405      	bmi.n	800c34c <_vfiprintf_r+0x220>
 800c340:	89ab      	ldrh	r3, [r5, #12]
 800c342:	059a      	lsls	r2, r3, #22
 800c344:	d402      	bmi.n	800c34c <_vfiprintf_r+0x220>
 800c346:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c348:	f000 fcd3 	bl	800ccf2 <__retarget_lock_release_recursive>
 800c34c:	89ab      	ldrh	r3, [r5, #12]
 800c34e:	065b      	lsls	r3, r3, #25
 800c350:	f53f af12 	bmi.w	800c178 <_vfiprintf_r+0x4c>
 800c354:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c356:	e711      	b.n	800c17c <_vfiprintf_r+0x50>
 800c358:	ab03      	add	r3, sp, #12
 800c35a:	462a      	mov	r2, r5
 800c35c:	a904      	add	r1, sp, #16
 800c35e:	4630      	mov	r0, r6
 800c360:	9300      	str	r3, [sp, #0]
 800c362:	4b08      	ldr	r3, [pc, #32]	; (800c384 <_vfiprintf_r+0x258>)
 800c364:	f000 f882 	bl	800c46c <_printf_i>
 800c368:	e7e4      	b.n	800c334 <_vfiprintf_r+0x208>
 800c36a:	bf00      	nop
 800c36c:	0800d5e4 	.word	0x0800d5e4
 800c370:	0800d604 	.word	0x0800d604
 800c374:	0800d5c4 	.word	0x0800d5c4
 800c378:	0800d590 	.word	0x0800d590
 800c37c:	0800d59a 	.word	0x0800d59a
 800c380:	00000000 	.word	0x00000000
 800c384:	0800c107 	.word	0x0800c107
 800c388:	0800d596 	.word	0x0800d596

0800c38c <_printf_common>:
 800c38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c390:	4616      	mov	r6, r2
 800c392:	4699      	mov	r9, r3
 800c394:	688a      	ldr	r2, [r1, #8]
 800c396:	4607      	mov	r7, r0
 800c398:	690b      	ldr	r3, [r1, #16]
 800c39a:	460c      	mov	r4, r1
 800c39c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	bfb8      	it	lt
 800c3a4:	4613      	movlt	r3, r2
 800c3a6:	6033      	str	r3, [r6, #0]
 800c3a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c3ac:	b10a      	cbz	r2, 800c3b2 <_printf_common+0x26>
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	6033      	str	r3, [r6, #0]
 800c3b2:	6823      	ldr	r3, [r4, #0]
 800c3b4:	0699      	lsls	r1, r3, #26
 800c3b6:	bf42      	ittt	mi
 800c3b8:	6833      	ldrmi	r3, [r6, #0]
 800c3ba:	3302      	addmi	r3, #2
 800c3bc:	6033      	strmi	r3, [r6, #0]
 800c3be:	6825      	ldr	r5, [r4, #0]
 800c3c0:	f015 0506 	ands.w	r5, r5, #6
 800c3c4:	d106      	bne.n	800c3d4 <_printf_common+0x48>
 800c3c6:	f104 0a19 	add.w	sl, r4, #25
 800c3ca:	68e3      	ldr	r3, [r4, #12]
 800c3cc:	6832      	ldr	r2, [r6, #0]
 800c3ce:	1a9b      	subs	r3, r3, r2
 800c3d0:	42ab      	cmp	r3, r5
 800c3d2:	dc29      	bgt.n	800c428 <_printf_common+0x9c>
 800c3d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3d8:	1e13      	subs	r3, r2, #0
 800c3da:	6822      	ldr	r2, [r4, #0]
 800c3dc:	bf18      	it	ne
 800c3de:	2301      	movne	r3, #1
 800c3e0:	0692      	lsls	r2, r2, #26
 800c3e2:	d42e      	bmi.n	800c442 <_printf_common+0xb6>
 800c3e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3e8:	4649      	mov	r1, r9
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	47c0      	blx	r8
 800c3ee:	3001      	adds	r0, #1
 800c3f0:	d021      	beq.n	800c436 <_printf_common+0xaa>
 800c3f2:	6823      	ldr	r3, [r4, #0]
 800c3f4:	341a      	adds	r4, #26
 800c3f6:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800c3fa:	f003 0306 	and.w	r3, r3, #6
 800c3fe:	6832      	ldr	r2, [r6, #0]
 800c400:	2600      	movs	r6, #0
 800c402:	2b04      	cmp	r3, #4
 800c404:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c408:	bf08      	it	eq
 800c40a:	1aad      	subeq	r5, r5, r2
 800c40c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c410:	bf14      	ite	ne
 800c412:	2500      	movne	r5, #0
 800c414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c418:	4293      	cmp	r3, r2
 800c41a:	bfc4      	itt	gt
 800c41c:	1a9b      	subgt	r3, r3, r2
 800c41e:	18ed      	addgt	r5, r5, r3
 800c420:	42b5      	cmp	r5, r6
 800c422:	d11a      	bne.n	800c45a <_printf_common+0xce>
 800c424:	2000      	movs	r0, #0
 800c426:	e008      	b.n	800c43a <_printf_common+0xae>
 800c428:	2301      	movs	r3, #1
 800c42a:	4652      	mov	r2, sl
 800c42c:	4649      	mov	r1, r9
 800c42e:	4638      	mov	r0, r7
 800c430:	47c0      	blx	r8
 800c432:	3001      	adds	r0, #1
 800c434:	d103      	bne.n	800c43e <_printf_common+0xb2>
 800c436:	f04f 30ff 	mov.w	r0, #4294967295
 800c43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c43e:	3501      	adds	r5, #1
 800c440:	e7c3      	b.n	800c3ca <_printf_common+0x3e>
 800c442:	18e1      	adds	r1, r4, r3
 800c444:	1c5a      	adds	r2, r3, #1
 800c446:	2030      	movs	r0, #48	; 0x30
 800c448:	3302      	adds	r3, #2
 800c44a:	4422      	add	r2, r4
 800c44c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c458:	e7c4      	b.n	800c3e4 <_printf_common+0x58>
 800c45a:	2301      	movs	r3, #1
 800c45c:	4622      	mov	r2, r4
 800c45e:	4649      	mov	r1, r9
 800c460:	4638      	mov	r0, r7
 800c462:	47c0      	blx	r8
 800c464:	3001      	adds	r0, #1
 800c466:	d0e6      	beq.n	800c436 <_printf_common+0xaa>
 800c468:	3601      	adds	r6, #1
 800c46a:	e7d9      	b.n	800c420 <_printf_common+0x94>

0800c46c <_printf_i>:
 800c46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c470:	460c      	mov	r4, r1
 800c472:	4691      	mov	r9, r2
 800c474:	4680      	mov	r8, r0
 800c476:	469a      	mov	sl, r3
 800c478:	7e27      	ldrb	r7, [r4, #24]
 800c47a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c47e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c480:	2f78      	cmp	r7, #120	; 0x78
 800c482:	d807      	bhi.n	800c494 <_printf_i+0x28>
 800c484:	2f62      	cmp	r7, #98	; 0x62
 800c486:	d80a      	bhi.n	800c49e <_printf_i+0x32>
 800c488:	2f00      	cmp	r7, #0
 800c48a:	f000 80d8 	beq.w	800c63e <_printf_i+0x1d2>
 800c48e:	2f58      	cmp	r7, #88	; 0x58
 800c490:	f000 80a3 	beq.w	800c5da <_printf_i+0x16e>
 800c494:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c49c:	e03a      	b.n	800c514 <_printf_i+0xa8>
 800c49e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c4a2:	2b15      	cmp	r3, #21
 800c4a4:	d8f6      	bhi.n	800c494 <_printf_i+0x28>
 800c4a6:	a001      	add	r0, pc, #4	; (adr r0, 800c4ac <_printf_i+0x40>)
 800c4a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c4ac:	0800c505 	.word	0x0800c505
 800c4b0:	0800c519 	.word	0x0800c519
 800c4b4:	0800c495 	.word	0x0800c495
 800c4b8:	0800c495 	.word	0x0800c495
 800c4bc:	0800c495 	.word	0x0800c495
 800c4c0:	0800c495 	.word	0x0800c495
 800c4c4:	0800c519 	.word	0x0800c519
 800c4c8:	0800c495 	.word	0x0800c495
 800c4cc:	0800c495 	.word	0x0800c495
 800c4d0:	0800c495 	.word	0x0800c495
 800c4d4:	0800c495 	.word	0x0800c495
 800c4d8:	0800c625 	.word	0x0800c625
 800c4dc:	0800c549 	.word	0x0800c549
 800c4e0:	0800c607 	.word	0x0800c607
 800c4e4:	0800c495 	.word	0x0800c495
 800c4e8:	0800c495 	.word	0x0800c495
 800c4ec:	0800c647 	.word	0x0800c647
 800c4f0:	0800c495 	.word	0x0800c495
 800c4f4:	0800c549 	.word	0x0800c549
 800c4f8:	0800c495 	.word	0x0800c495
 800c4fc:	0800c495 	.word	0x0800c495
 800c500:	0800c60f 	.word	0x0800c60f
 800c504:	680b      	ldr	r3, [r1, #0]
 800c506:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c50a:	1d1a      	adds	r2, r3, #4
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	600a      	str	r2, [r1, #0]
 800c510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c514:	2301      	movs	r3, #1
 800c516:	e0a3      	b.n	800c660 <_printf_i+0x1f4>
 800c518:	6825      	ldr	r5, [r4, #0]
 800c51a:	6808      	ldr	r0, [r1, #0]
 800c51c:	062e      	lsls	r6, r5, #24
 800c51e:	f100 0304 	add.w	r3, r0, #4
 800c522:	d50a      	bpl.n	800c53a <_printf_i+0xce>
 800c524:	6805      	ldr	r5, [r0, #0]
 800c526:	600b      	str	r3, [r1, #0]
 800c528:	2d00      	cmp	r5, #0
 800c52a:	da03      	bge.n	800c534 <_printf_i+0xc8>
 800c52c:	232d      	movs	r3, #45	; 0x2d
 800c52e:	426d      	negs	r5, r5
 800c530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c534:	485e      	ldr	r0, [pc, #376]	; (800c6b0 <_printf_i+0x244>)
 800c536:	230a      	movs	r3, #10
 800c538:	e019      	b.n	800c56e <_printf_i+0x102>
 800c53a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c53e:	6805      	ldr	r5, [r0, #0]
 800c540:	600b      	str	r3, [r1, #0]
 800c542:	bf18      	it	ne
 800c544:	b22d      	sxthne	r5, r5
 800c546:	e7ef      	b.n	800c528 <_printf_i+0xbc>
 800c548:	680b      	ldr	r3, [r1, #0]
 800c54a:	6825      	ldr	r5, [r4, #0]
 800c54c:	1d18      	adds	r0, r3, #4
 800c54e:	6008      	str	r0, [r1, #0]
 800c550:	0628      	lsls	r0, r5, #24
 800c552:	d501      	bpl.n	800c558 <_printf_i+0xec>
 800c554:	681d      	ldr	r5, [r3, #0]
 800c556:	e002      	b.n	800c55e <_printf_i+0xf2>
 800c558:	0669      	lsls	r1, r5, #25
 800c55a:	d5fb      	bpl.n	800c554 <_printf_i+0xe8>
 800c55c:	881d      	ldrh	r5, [r3, #0]
 800c55e:	2f6f      	cmp	r7, #111	; 0x6f
 800c560:	4853      	ldr	r0, [pc, #332]	; (800c6b0 <_printf_i+0x244>)
 800c562:	bf0c      	ite	eq
 800c564:	2308      	moveq	r3, #8
 800c566:	230a      	movne	r3, #10
 800c568:	2100      	movs	r1, #0
 800c56a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c56e:	6866      	ldr	r6, [r4, #4]
 800c570:	2e00      	cmp	r6, #0
 800c572:	60a6      	str	r6, [r4, #8]
 800c574:	bfa2      	ittt	ge
 800c576:	6821      	ldrge	r1, [r4, #0]
 800c578:	f021 0104 	bicge.w	r1, r1, #4
 800c57c:	6021      	strge	r1, [r4, #0]
 800c57e:	b90d      	cbnz	r5, 800c584 <_printf_i+0x118>
 800c580:	2e00      	cmp	r6, #0
 800c582:	d04d      	beq.n	800c620 <_printf_i+0x1b4>
 800c584:	4616      	mov	r6, r2
 800c586:	fbb5 f1f3 	udiv	r1, r5, r3
 800c58a:	fb03 5711 	mls	r7, r3, r1, r5
 800c58e:	5dc7      	ldrb	r7, [r0, r7]
 800c590:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c594:	462f      	mov	r7, r5
 800c596:	460d      	mov	r5, r1
 800c598:	42bb      	cmp	r3, r7
 800c59a:	d9f4      	bls.n	800c586 <_printf_i+0x11a>
 800c59c:	2b08      	cmp	r3, #8
 800c59e:	d10b      	bne.n	800c5b8 <_printf_i+0x14c>
 800c5a0:	6823      	ldr	r3, [r4, #0]
 800c5a2:	07df      	lsls	r7, r3, #31
 800c5a4:	d508      	bpl.n	800c5b8 <_printf_i+0x14c>
 800c5a6:	6923      	ldr	r3, [r4, #16]
 800c5a8:	6861      	ldr	r1, [r4, #4]
 800c5aa:	4299      	cmp	r1, r3
 800c5ac:	bfde      	ittt	le
 800c5ae:	2330      	movle	r3, #48	; 0x30
 800c5b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c5b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c5b8:	1b92      	subs	r2, r2, r6
 800c5ba:	6122      	str	r2, [r4, #16]
 800c5bc:	464b      	mov	r3, r9
 800c5be:	aa03      	add	r2, sp, #12
 800c5c0:	4621      	mov	r1, r4
 800c5c2:	4640      	mov	r0, r8
 800c5c4:	f8cd a000 	str.w	sl, [sp]
 800c5c8:	f7ff fee0 	bl	800c38c <_printf_common>
 800c5cc:	3001      	adds	r0, #1
 800c5ce:	d14c      	bne.n	800c66a <_printf_i+0x1fe>
 800c5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d4:	b004      	add	sp, #16
 800c5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5da:	4835      	ldr	r0, [pc, #212]	; (800c6b0 <_printf_i+0x244>)
 800c5dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c5e0:	6823      	ldr	r3, [r4, #0]
 800c5e2:	680e      	ldr	r6, [r1, #0]
 800c5e4:	061f      	lsls	r7, r3, #24
 800c5e6:	f856 5b04 	ldr.w	r5, [r6], #4
 800c5ea:	600e      	str	r6, [r1, #0]
 800c5ec:	d514      	bpl.n	800c618 <_printf_i+0x1ac>
 800c5ee:	07d9      	lsls	r1, r3, #31
 800c5f0:	bf44      	itt	mi
 800c5f2:	f043 0320 	orrmi.w	r3, r3, #32
 800c5f6:	6023      	strmi	r3, [r4, #0]
 800c5f8:	b91d      	cbnz	r5, 800c602 <_printf_i+0x196>
 800c5fa:	6823      	ldr	r3, [r4, #0]
 800c5fc:	f023 0320 	bic.w	r3, r3, #32
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	2310      	movs	r3, #16
 800c604:	e7b0      	b.n	800c568 <_printf_i+0xfc>
 800c606:	6823      	ldr	r3, [r4, #0]
 800c608:	f043 0320 	orr.w	r3, r3, #32
 800c60c:	6023      	str	r3, [r4, #0]
 800c60e:	2378      	movs	r3, #120	; 0x78
 800c610:	4828      	ldr	r0, [pc, #160]	; (800c6b4 <_printf_i+0x248>)
 800c612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c616:	e7e3      	b.n	800c5e0 <_printf_i+0x174>
 800c618:	065e      	lsls	r6, r3, #25
 800c61a:	bf48      	it	mi
 800c61c:	b2ad      	uxthmi	r5, r5
 800c61e:	e7e6      	b.n	800c5ee <_printf_i+0x182>
 800c620:	4616      	mov	r6, r2
 800c622:	e7bb      	b.n	800c59c <_printf_i+0x130>
 800c624:	680b      	ldr	r3, [r1, #0]
 800c626:	6826      	ldr	r6, [r4, #0]
 800c628:	1d1d      	adds	r5, r3, #4
 800c62a:	6960      	ldr	r0, [r4, #20]
 800c62c:	600d      	str	r5, [r1, #0]
 800c62e:	0635      	lsls	r5, r6, #24
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	d501      	bpl.n	800c638 <_printf_i+0x1cc>
 800c634:	6018      	str	r0, [r3, #0]
 800c636:	e002      	b.n	800c63e <_printf_i+0x1d2>
 800c638:	0671      	lsls	r1, r6, #25
 800c63a:	d5fb      	bpl.n	800c634 <_printf_i+0x1c8>
 800c63c:	8018      	strh	r0, [r3, #0]
 800c63e:	2300      	movs	r3, #0
 800c640:	4616      	mov	r6, r2
 800c642:	6123      	str	r3, [r4, #16]
 800c644:	e7ba      	b.n	800c5bc <_printf_i+0x150>
 800c646:	680b      	ldr	r3, [r1, #0]
 800c648:	1d1a      	adds	r2, r3, #4
 800c64a:	600a      	str	r2, [r1, #0]
 800c64c:	2100      	movs	r1, #0
 800c64e:	681e      	ldr	r6, [r3, #0]
 800c650:	6862      	ldr	r2, [r4, #4]
 800c652:	4630      	mov	r0, r6
 800c654:	f000 fbb2 	bl	800cdbc <memchr>
 800c658:	b108      	cbz	r0, 800c65e <_printf_i+0x1f2>
 800c65a:	1b80      	subs	r0, r0, r6
 800c65c:	6060      	str	r0, [r4, #4]
 800c65e:	6863      	ldr	r3, [r4, #4]
 800c660:	6123      	str	r3, [r4, #16]
 800c662:	2300      	movs	r3, #0
 800c664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c668:	e7a8      	b.n	800c5bc <_printf_i+0x150>
 800c66a:	6923      	ldr	r3, [r4, #16]
 800c66c:	4632      	mov	r2, r6
 800c66e:	4649      	mov	r1, r9
 800c670:	4640      	mov	r0, r8
 800c672:	47d0      	blx	sl
 800c674:	3001      	adds	r0, #1
 800c676:	d0ab      	beq.n	800c5d0 <_printf_i+0x164>
 800c678:	6823      	ldr	r3, [r4, #0]
 800c67a:	079b      	lsls	r3, r3, #30
 800c67c:	d413      	bmi.n	800c6a6 <_printf_i+0x23a>
 800c67e:	68e0      	ldr	r0, [r4, #12]
 800c680:	9b03      	ldr	r3, [sp, #12]
 800c682:	4298      	cmp	r0, r3
 800c684:	bfb8      	it	lt
 800c686:	4618      	movlt	r0, r3
 800c688:	e7a4      	b.n	800c5d4 <_printf_i+0x168>
 800c68a:	2301      	movs	r3, #1
 800c68c:	4632      	mov	r2, r6
 800c68e:	4649      	mov	r1, r9
 800c690:	4640      	mov	r0, r8
 800c692:	47d0      	blx	sl
 800c694:	3001      	adds	r0, #1
 800c696:	d09b      	beq.n	800c5d0 <_printf_i+0x164>
 800c698:	3501      	adds	r5, #1
 800c69a:	68e3      	ldr	r3, [r4, #12]
 800c69c:	9903      	ldr	r1, [sp, #12]
 800c69e:	1a5b      	subs	r3, r3, r1
 800c6a0:	42ab      	cmp	r3, r5
 800c6a2:	dcf2      	bgt.n	800c68a <_printf_i+0x21e>
 800c6a4:	e7eb      	b.n	800c67e <_printf_i+0x212>
 800c6a6:	2500      	movs	r5, #0
 800c6a8:	f104 0619 	add.w	r6, r4, #25
 800c6ac:	e7f5      	b.n	800c69a <_printf_i+0x22e>
 800c6ae:	bf00      	nop
 800c6b0:	0800d5a1 	.word	0x0800d5a1
 800c6b4:	0800d5b2 	.word	0x0800d5b2

0800c6b8 <iprintf>:
 800c6b8:	b40f      	push	{r0, r1, r2, r3}
 800c6ba:	4b0a      	ldr	r3, [pc, #40]	; (800c6e4 <iprintf+0x2c>)
 800c6bc:	b513      	push	{r0, r1, r4, lr}
 800c6be:	681c      	ldr	r4, [r3, #0]
 800c6c0:	b124      	cbz	r4, 800c6cc <iprintf+0x14>
 800c6c2:	69a3      	ldr	r3, [r4, #24]
 800c6c4:	b913      	cbnz	r3, 800c6cc <iprintf+0x14>
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f000 fa74 	bl	800cbb4 <__sinit>
 800c6cc:	ab05      	add	r3, sp, #20
 800c6ce:	9a04      	ldr	r2, [sp, #16]
 800c6d0:	68a1      	ldr	r1, [r4, #8]
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	9301      	str	r3, [sp, #4]
 800c6d6:	f7ff fd29 	bl	800c12c <_vfiprintf_r>
 800c6da:	b002      	add	sp, #8
 800c6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6e0:	b004      	add	sp, #16
 800c6e2:	4770      	bx	lr
 800c6e4:	2000000c 	.word	0x2000000c

0800c6e8 <_puts_r>:
 800c6e8:	b570      	push	{r4, r5, r6, lr}
 800c6ea:	460e      	mov	r6, r1
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	b118      	cbz	r0, 800c6f8 <_puts_r+0x10>
 800c6f0:	6983      	ldr	r3, [r0, #24]
 800c6f2:	b90b      	cbnz	r3, 800c6f8 <_puts_r+0x10>
 800c6f4:	f000 fa5e 	bl	800cbb4 <__sinit>
 800c6f8:	69ab      	ldr	r3, [r5, #24]
 800c6fa:	68ac      	ldr	r4, [r5, #8]
 800c6fc:	b913      	cbnz	r3, 800c704 <_puts_r+0x1c>
 800c6fe:	4628      	mov	r0, r5
 800c700:	f000 fa58 	bl	800cbb4 <__sinit>
 800c704:	4b2c      	ldr	r3, [pc, #176]	; (800c7b8 <_puts_r+0xd0>)
 800c706:	429c      	cmp	r4, r3
 800c708:	d120      	bne.n	800c74c <_puts_r+0x64>
 800c70a:	686c      	ldr	r4, [r5, #4]
 800c70c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c70e:	07db      	lsls	r3, r3, #31
 800c710:	d405      	bmi.n	800c71e <_puts_r+0x36>
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	0598      	lsls	r0, r3, #22
 800c716:	d402      	bmi.n	800c71e <_puts_r+0x36>
 800c718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c71a:	f000 fae9 	bl	800ccf0 <__retarget_lock_acquire_recursive>
 800c71e:	89a3      	ldrh	r3, [r4, #12]
 800c720:	0719      	lsls	r1, r3, #28
 800c722:	d51d      	bpl.n	800c760 <_puts_r+0x78>
 800c724:	6923      	ldr	r3, [r4, #16]
 800c726:	b1db      	cbz	r3, 800c760 <_puts_r+0x78>
 800c728:	3e01      	subs	r6, #1
 800c72a:	68a3      	ldr	r3, [r4, #8]
 800c72c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c730:	3b01      	subs	r3, #1
 800c732:	60a3      	str	r3, [r4, #8]
 800c734:	bb39      	cbnz	r1, 800c786 <_puts_r+0x9e>
 800c736:	2b00      	cmp	r3, #0
 800c738:	da38      	bge.n	800c7ac <_puts_r+0xc4>
 800c73a:	4622      	mov	r2, r4
 800c73c:	210a      	movs	r1, #10
 800c73e:	4628      	mov	r0, r5
 800c740:	f000 f858 	bl	800c7f4 <__swbuf_r>
 800c744:	3001      	adds	r0, #1
 800c746:	d011      	beq.n	800c76c <_puts_r+0x84>
 800c748:	250a      	movs	r5, #10
 800c74a:	e011      	b.n	800c770 <_puts_r+0x88>
 800c74c:	4b1b      	ldr	r3, [pc, #108]	; (800c7bc <_puts_r+0xd4>)
 800c74e:	429c      	cmp	r4, r3
 800c750:	d101      	bne.n	800c756 <_puts_r+0x6e>
 800c752:	68ac      	ldr	r4, [r5, #8]
 800c754:	e7da      	b.n	800c70c <_puts_r+0x24>
 800c756:	4b1a      	ldr	r3, [pc, #104]	; (800c7c0 <_puts_r+0xd8>)
 800c758:	429c      	cmp	r4, r3
 800c75a:	bf08      	it	eq
 800c75c:	68ec      	ldreq	r4, [r5, #12]
 800c75e:	e7d5      	b.n	800c70c <_puts_r+0x24>
 800c760:	4621      	mov	r1, r4
 800c762:	4628      	mov	r0, r5
 800c764:	f000 f898 	bl	800c898 <__swsetup_r>
 800c768:	2800      	cmp	r0, #0
 800c76a:	d0dd      	beq.n	800c728 <_puts_r+0x40>
 800c76c:	f04f 35ff 	mov.w	r5, #4294967295
 800c770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c772:	07da      	lsls	r2, r3, #31
 800c774:	d405      	bmi.n	800c782 <_puts_r+0x9a>
 800c776:	89a3      	ldrh	r3, [r4, #12]
 800c778:	059b      	lsls	r3, r3, #22
 800c77a:	d402      	bmi.n	800c782 <_puts_r+0x9a>
 800c77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c77e:	f000 fab8 	bl	800ccf2 <__retarget_lock_release_recursive>
 800c782:	4628      	mov	r0, r5
 800c784:	bd70      	pop	{r4, r5, r6, pc}
 800c786:	2b00      	cmp	r3, #0
 800c788:	da04      	bge.n	800c794 <_puts_r+0xac>
 800c78a:	69a2      	ldr	r2, [r4, #24]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	dc06      	bgt.n	800c79e <_puts_r+0xb6>
 800c790:	290a      	cmp	r1, #10
 800c792:	d004      	beq.n	800c79e <_puts_r+0xb6>
 800c794:	6823      	ldr	r3, [r4, #0]
 800c796:	1c5a      	adds	r2, r3, #1
 800c798:	6022      	str	r2, [r4, #0]
 800c79a:	7019      	strb	r1, [r3, #0]
 800c79c:	e7c5      	b.n	800c72a <_puts_r+0x42>
 800c79e:	4622      	mov	r2, r4
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	f000 f827 	bl	800c7f4 <__swbuf_r>
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	d1bf      	bne.n	800c72a <_puts_r+0x42>
 800c7aa:	e7df      	b.n	800c76c <_puts_r+0x84>
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	250a      	movs	r5, #10
 800c7b0:	1c5a      	adds	r2, r3, #1
 800c7b2:	6022      	str	r2, [r4, #0]
 800c7b4:	701d      	strb	r5, [r3, #0]
 800c7b6:	e7db      	b.n	800c770 <_puts_r+0x88>
 800c7b8:	0800d5e4 	.word	0x0800d5e4
 800c7bc:	0800d604 	.word	0x0800d604
 800c7c0:	0800d5c4 	.word	0x0800d5c4

0800c7c4 <puts>:
 800c7c4:	4b02      	ldr	r3, [pc, #8]	; (800c7d0 <puts+0xc>)
 800c7c6:	4601      	mov	r1, r0
 800c7c8:	6818      	ldr	r0, [r3, #0]
 800c7ca:	f7ff bf8d 	b.w	800c6e8 <_puts_r>
 800c7ce:	bf00      	nop
 800c7d0:	2000000c 	.word	0x2000000c

0800c7d4 <_sbrk_r>:
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	4d05      	ldr	r5, [pc, #20]	; (800c7f0 <_sbrk_r+0x1c>)
 800c7da:	4604      	mov	r4, r0
 800c7dc:	4608      	mov	r0, r1
 800c7de:	602b      	str	r3, [r5, #0]
 800c7e0:	f7f6 fbec 	bl	8002fbc <_sbrk>
 800c7e4:	1c43      	adds	r3, r0, #1
 800c7e6:	d102      	bne.n	800c7ee <_sbrk_r+0x1a>
 800c7e8:	682b      	ldr	r3, [r5, #0]
 800c7ea:	b103      	cbz	r3, 800c7ee <_sbrk_r+0x1a>
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	bd38      	pop	{r3, r4, r5, pc}
 800c7f0:	20000e14 	.word	0x20000e14

0800c7f4 <__swbuf_r>:
 800c7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f6:	460e      	mov	r6, r1
 800c7f8:	4614      	mov	r4, r2
 800c7fa:	4605      	mov	r5, r0
 800c7fc:	b118      	cbz	r0, 800c806 <__swbuf_r+0x12>
 800c7fe:	6983      	ldr	r3, [r0, #24]
 800c800:	b90b      	cbnz	r3, 800c806 <__swbuf_r+0x12>
 800c802:	f000 f9d7 	bl	800cbb4 <__sinit>
 800c806:	4b21      	ldr	r3, [pc, #132]	; (800c88c <__swbuf_r+0x98>)
 800c808:	429c      	cmp	r4, r3
 800c80a:	d12b      	bne.n	800c864 <__swbuf_r+0x70>
 800c80c:	686c      	ldr	r4, [r5, #4]
 800c80e:	69a3      	ldr	r3, [r4, #24]
 800c810:	60a3      	str	r3, [r4, #8]
 800c812:	89a3      	ldrh	r3, [r4, #12]
 800c814:	071a      	lsls	r2, r3, #28
 800c816:	d52f      	bpl.n	800c878 <__swbuf_r+0x84>
 800c818:	6923      	ldr	r3, [r4, #16]
 800c81a:	b36b      	cbz	r3, 800c878 <__swbuf_r+0x84>
 800c81c:	6923      	ldr	r3, [r4, #16]
 800c81e:	b2f6      	uxtb	r6, r6
 800c820:	6820      	ldr	r0, [r4, #0]
 800c822:	4637      	mov	r7, r6
 800c824:	1ac0      	subs	r0, r0, r3
 800c826:	6963      	ldr	r3, [r4, #20]
 800c828:	4283      	cmp	r3, r0
 800c82a:	dc04      	bgt.n	800c836 <__swbuf_r+0x42>
 800c82c:	4621      	mov	r1, r4
 800c82e:	4628      	mov	r0, r5
 800c830:	f000 f92c 	bl	800ca8c <_fflush_r>
 800c834:	bb30      	cbnz	r0, 800c884 <__swbuf_r+0x90>
 800c836:	68a3      	ldr	r3, [r4, #8]
 800c838:	3001      	adds	r0, #1
 800c83a:	3b01      	subs	r3, #1
 800c83c:	60a3      	str	r3, [r4, #8]
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	1c5a      	adds	r2, r3, #1
 800c842:	6022      	str	r2, [r4, #0]
 800c844:	701e      	strb	r6, [r3, #0]
 800c846:	6963      	ldr	r3, [r4, #20]
 800c848:	4283      	cmp	r3, r0
 800c84a:	d004      	beq.n	800c856 <__swbuf_r+0x62>
 800c84c:	89a3      	ldrh	r3, [r4, #12]
 800c84e:	07db      	lsls	r3, r3, #31
 800c850:	d506      	bpl.n	800c860 <__swbuf_r+0x6c>
 800c852:	2e0a      	cmp	r6, #10
 800c854:	d104      	bne.n	800c860 <__swbuf_r+0x6c>
 800c856:	4621      	mov	r1, r4
 800c858:	4628      	mov	r0, r5
 800c85a:	f000 f917 	bl	800ca8c <_fflush_r>
 800c85e:	b988      	cbnz	r0, 800c884 <__swbuf_r+0x90>
 800c860:	4638      	mov	r0, r7
 800c862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c864:	4b0a      	ldr	r3, [pc, #40]	; (800c890 <__swbuf_r+0x9c>)
 800c866:	429c      	cmp	r4, r3
 800c868:	d101      	bne.n	800c86e <__swbuf_r+0x7a>
 800c86a:	68ac      	ldr	r4, [r5, #8]
 800c86c:	e7cf      	b.n	800c80e <__swbuf_r+0x1a>
 800c86e:	4b09      	ldr	r3, [pc, #36]	; (800c894 <__swbuf_r+0xa0>)
 800c870:	429c      	cmp	r4, r3
 800c872:	bf08      	it	eq
 800c874:	68ec      	ldreq	r4, [r5, #12]
 800c876:	e7ca      	b.n	800c80e <__swbuf_r+0x1a>
 800c878:	4621      	mov	r1, r4
 800c87a:	4628      	mov	r0, r5
 800c87c:	f000 f80c 	bl	800c898 <__swsetup_r>
 800c880:	2800      	cmp	r0, #0
 800c882:	d0cb      	beq.n	800c81c <__swbuf_r+0x28>
 800c884:	f04f 37ff 	mov.w	r7, #4294967295
 800c888:	e7ea      	b.n	800c860 <__swbuf_r+0x6c>
 800c88a:	bf00      	nop
 800c88c:	0800d5e4 	.word	0x0800d5e4
 800c890:	0800d604 	.word	0x0800d604
 800c894:	0800d5c4 	.word	0x0800d5c4

0800c898 <__swsetup_r>:
 800c898:	4b32      	ldr	r3, [pc, #200]	; (800c964 <__swsetup_r+0xcc>)
 800c89a:	b570      	push	{r4, r5, r6, lr}
 800c89c:	681d      	ldr	r5, [r3, #0]
 800c89e:	4606      	mov	r6, r0
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	b125      	cbz	r5, 800c8ae <__swsetup_r+0x16>
 800c8a4:	69ab      	ldr	r3, [r5, #24]
 800c8a6:	b913      	cbnz	r3, 800c8ae <__swsetup_r+0x16>
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	f000 f983 	bl	800cbb4 <__sinit>
 800c8ae:	4b2e      	ldr	r3, [pc, #184]	; (800c968 <__swsetup_r+0xd0>)
 800c8b0:	429c      	cmp	r4, r3
 800c8b2:	d10f      	bne.n	800c8d4 <__swsetup_r+0x3c>
 800c8b4:	686c      	ldr	r4, [r5, #4]
 800c8b6:	89a3      	ldrh	r3, [r4, #12]
 800c8b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8bc:	0719      	lsls	r1, r3, #28
 800c8be:	d42c      	bmi.n	800c91a <__swsetup_r+0x82>
 800c8c0:	06dd      	lsls	r5, r3, #27
 800c8c2:	d411      	bmi.n	800c8e8 <__swsetup_r+0x50>
 800c8c4:	2309      	movs	r3, #9
 800c8c6:	6033      	str	r3, [r6, #0]
 800c8c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d0:	81a3      	strh	r3, [r4, #12]
 800c8d2:	e03e      	b.n	800c952 <__swsetup_r+0xba>
 800c8d4:	4b25      	ldr	r3, [pc, #148]	; (800c96c <__swsetup_r+0xd4>)
 800c8d6:	429c      	cmp	r4, r3
 800c8d8:	d101      	bne.n	800c8de <__swsetup_r+0x46>
 800c8da:	68ac      	ldr	r4, [r5, #8]
 800c8dc:	e7eb      	b.n	800c8b6 <__swsetup_r+0x1e>
 800c8de:	4b24      	ldr	r3, [pc, #144]	; (800c970 <__swsetup_r+0xd8>)
 800c8e0:	429c      	cmp	r4, r3
 800c8e2:	bf08      	it	eq
 800c8e4:	68ec      	ldreq	r4, [r5, #12]
 800c8e6:	e7e6      	b.n	800c8b6 <__swsetup_r+0x1e>
 800c8e8:	0758      	lsls	r0, r3, #29
 800c8ea:	d512      	bpl.n	800c912 <__swsetup_r+0x7a>
 800c8ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8ee:	b141      	cbz	r1, 800c902 <__swsetup_r+0x6a>
 800c8f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8f4:	4299      	cmp	r1, r3
 800c8f6:	d002      	beq.n	800c8fe <__swsetup_r+0x66>
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	f7ff fb43 	bl	800bf84 <_free_r>
 800c8fe:	2300      	movs	r3, #0
 800c900:	6363      	str	r3, [r4, #52]	; 0x34
 800c902:	89a3      	ldrh	r3, [r4, #12]
 800c904:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c908:	81a3      	strh	r3, [r4, #12]
 800c90a:	2300      	movs	r3, #0
 800c90c:	6063      	str	r3, [r4, #4]
 800c90e:	6923      	ldr	r3, [r4, #16]
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	89a3      	ldrh	r3, [r4, #12]
 800c914:	f043 0308 	orr.w	r3, r3, #8
 800c918:	81a3      	strh	r3, [r4, #12]
 800c91a:	6923      	ldr	r3, [r4, #16]
 800c91c:	b94b      	cbnz	r3, 800c932 <__swsetup_r+0x9a>
 800c91e:	89a3      	ldrh	r3, [r4, #12]
 800c920:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c928:	d003      	beq.n	800c932 <__swsetup_r+0x9a>
 800c92a:	4621      	mov	r1, r4
 800c92c:	4630      	mov	r0, r6
 800c92e:	f000 fa05 	bl	800cd3c <__smakebuf_r>
 800c932:	89a0      	ldrh	r0, [r4, #12]
 800c934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c938:	f010 0301 	ands.w	r3, r0, #1
 800c93c:	d00a      	beq.n	800c954 <__swsetup_r+0xbc>
 800c93e:	2300      	movs	r3, #0
 800c940:	60a3      	str	r3, [r4, #8]
 800c942:	6963      	ldr	r3, [r4, #20]
 800c944:	425b      	negs	r3, r3
 800c946:	61a3      	str	r3, [r4, #24]
 800c948:	6923      	ldr	r3, [r4, #16]
 800c94a:	b943      	cbnz	r3, 800c95e <__swsetup_r+0xc6>
 800c94c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c950:	d1ba      	bne.n	800c8c8 <__swsetup_r+0x30>
 800c952:	bd70      	pop	{r4, r5, r6, pc}
 800c954:	0781      	lsls	r1, r0, #30
 800c956:	bf58      	it	pl
 800c958:	6963      	ldrpl	r3, [r4, #20]
 800c95a:	60a3      	str	r3, [r4, #8]
 800c95c:	e7f4      	b.n	800c948 <__swsetup_r+0xb0>
 800c95e:	2000      	movs	r0, #0
 800c960:	e7f7      	b.n	800c952 <__swsetup_r+0xba>
 800c962:	bf00      	nop
 800c964:	2000000c 	.word	0x2000000c
 800c968:	0800d5e4 	.word	0x0800d5e4
 800c96c:	0800d604 	.word	0x0800d604
 800c970:	0800d5c4 	.word	0x0800d5c4

0800c974 <abort>:
 800c974:	2006      	movs	r0, #6
 800c976:	b508      	push	{r3, lr}
 800c978:	f000 fa62 	bl	800ce40 <raise>
 800c97c:	2001      	movs	r0, #1
 800c97e:	f7f6 faa5 	bl	8002ecc <_exit>
	...

0800c984 <__sflush_r>:
 800c984:	898a      	ldrh	r2, [r1, #12]
 800c986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c98a:	4605      	mov	r5, r0
 800c98c:	0710      	lsls	r0, r2, #28
 800c98e:	460c      	mov	r4, r1
 800c990:	d458      	bmi.n	800ca44 <__sflush_r+0xc0>
 800c992:	684b      	ldr	r3, [r1, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	dc05      	bgt.n	800c9a4 <__sflush_r+0x20>
 800c998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	dc02      	bgt.n	800c9a4 <__sflush_r+0x20>
 800c99e:	2000      	movs	r0, #0
 800c9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9a6:	2e00      	cmp	r6, #0
 800c9a8:	d0f9      	beq.n	800c99e <__sflush_r+0x1a>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9b0:	682f      	ldr	r7, [r5, #0]
 800c9b2:	602b      	str	r3, [r5, #0]
 800c9b4:	d032      	beq.n	800ca1c <__sflush_r+0x98>
 800c9b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9b8:	89a3      	ldrh	r3, [r4, #12]
 800c9ba:	075a      	lsls	r2, r3, #29
 800c9bc:	d505      	bpl.n	800c9ca <__sflush_r+0x46>
 800c9be:	6863      	ldr	r3, [r4, #4]
 800c9c0:	1ac0      	subs	r0, r0, r3
 800c9c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9c4:	b10b      	cbz	r3, 800c9ca <__sflush_r+0x46>
 800c9c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9c8:	1ac0      	subs	r0, r0, r3
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	6a21      	ldr	r1, [r4, #32]
 800c9d4:	47b0      	blx	r6
 800c9d6:	1c43      	adds	r3, r0, #1
 800c9d8:	89a3      	ldrh	r3, [r4, #12]
 800c9da:	d106      	bne.n	800c9ea <__sflush_r+0x66>
 800c9dc:	6829      	ldr	r1, [r5, #0]
 800c9de:	291d      	cmp	r1, #29
 800c9e0:	d82c      	bhi.n	800ca3c <__sflush_r+0xb8>
 800c9e2:	4a29      	ldr	r2, [pc, #164]	; (800ca88 <__sflush_r+0x104>)
 800c9e4:	40ca      	lsrs	r2, r1
 800c9e6:	07d6      	lsls	r6, r2, #31
 800c9e8:	d528      	bpl.n	800ca3c <__sflush_r+0xb8>
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	04d9      	lsls	r1, r3, #19
 800c9ee:	6062      	str	r2, [r4, #4]
 800c9f0:	6922      	ldr	r2, [r4, #16]
 800c9f2:	6022      	str	r2, [r4, #0]
 800c9f4:	d504      	bpl.n	800ca00 <__sflush_r+0x7c>
 800c9f6:	1c42      	adds	r2, r0, #1
 800c9f8:	d101      	bne.n	800c9fe <__sflush_r+0x7a>
 800c9fa:	682b      	ldr	r3, [r5, #0]
 800c9fc:	b903      	cbnz	r3, 800ca00 <__sflush_r+0x7c>
 800c9fe:	6560      	str	r0, [r4, #84]	; 0x54
 800ca00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca02:	602f      	str	r7, [r5, #0]
 800ca04:	2900      	cmp	r1, #0
 800ca06:	d0ca      	beq.n	800c99e <__sflush_r+0x1a>
 800ca08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca0c:	4299      	cmp	r1, r3
 800ca0e:	d002      	beq.n	800ca16 <__sflush_r+0x92>
 800ca10:	4628      	mov	r0, r5
 800ca12:	f7ff fab7 	bl	800bf84 <_free_r>
 800ca16:	2000      	movs	r0, #0
 800ca18:	6360      	str	r0, [r4, #52]	; 0x34
 800ca1a:	e7c1      	b.n	800c9a0 <__sflush_r+0x1c>
 800ca1c:	6a21      	ldr	r1, [r4, #32]
 800ca1e:	2301      	movs	r3, #1
 800ca20:	4628      	mov	r0, r5
 800ca22:	47b0      	blx	r6
 800ca24:	1c41      	adds	r1, r0, #1
 800ca26:	d1c7      	bne.n	800c9b8 <__sflush_r+0x34>
 800ca28:	682b      	ldr	r3, [r5, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d0c4      	beq.n	800c9b8 <__sflush_r+0x34>
 800ca2e:	2b1d      	cmp	r3, #29
 800ca30:	d001      	beq.n	800ca36 <__sflush_r+0xb2>
 800ca32:	2b16      	cmp	r3, #22
 800ca34:	d101      	bne.n	800ca3a <__sflush_r+0xb6>
 800ca36:	602f      	str	r7, [r5, #0]
 800ca38:	e7b1      	b.n	800c99e <__sflush_r+0x1a>
 800ca3a:	89a3      	ldrh	r3, [r4, #12]
 800ca3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca40:	81a3      	strh	r3, [r4, #12]
 800ca42:	e7ad      	b.n	800c9a0 <__sflush_r+0x1c>
 800ca44:	690f      	ldr	r7, [r1, #16]
 800ca46:	2f00      	cmp	r7, #0
 800ca48:	d0a9      	beq.n	800c99e <__sflush_r+0x1a>
 800ca4a:	0793      	lsls	r3, r2, #30
 800ca4c:	680e      	ldr	r6, [r1, #0]
 800ca4e:	600f      	str	r7, [r1, #0]
 800ca50:	bf0c      	ite	eq
 800ca52:	694b      	ldreq	r3, [r1, #20]
 800ca54:	2300      	movne	r3, #0
 800ca56:	eba6 0807 	sub.w	r8, r6, r7
 800ca5a:	608b      	str	r3, [r1, #8]
 800ca5c:	f1b8 0f00 	cmp.w	r8, #0
 800ca60:	dd9d      	ble.n	800c99e <__sflush_r+0x1a>
 800ca62:	4643      	mov	r3, r8
 800ca64:	463a      	mov	r2, r7
 800ca66:	6a21      	ldr	r1, [r4, #32]
 800ca68:	4628      	mov	r0, r5
 800ca6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca6c:	47b0      	blx	r6
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	dc06      	bgt.n	800ca80 <__sflush_r+0xfc>
 800ca72:	89a3      	ldrh	r3, [r4, #12]
 800ca74:	f04f 30ff 	mov.w	r0, #4294967295
 800ca78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca7c:	81a3      	strh	r3, [r4, #12]
 800ca7e:	e78f      	b.n	800c9a0 <__sflush_r+0x1c>
 800ca80:	4407      	add	r7, r0
 800ca82:	eba8 0800 	sub.w	r8, r8, r0
 800ca86:	e7e9      	b.n	800ca5c <__sflush_r+0xd8>
 800ca88:	20400001 	.word	0x20400001

0800ca8c <_fflush_r>:
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	690b      	ldr	r3, [r1, #16]
 800ca90:	4605      	mov	r5, r0
 800ca92:	460c      	mov	r4, r1
 800ca94:	b913      	cbnz	r3, 800ca9c <_fflush_r+0x10>
 800ca96:	2500      	movs	r5, #0
 800ca98:	4628      	mov	r0, r5
 800ca9a:	bd38      	pop	{r3, r4, r5, pc}
 800ca9c:	b118      	cbz	r0, 800caa6 <_fflush_r+0x1a>
 800ca9e:	6983      	ldr	r3, [r0, #24]
 800caa0:	b90b      	cbnz	r3, 800caa6 <_fflush_r+0x1a>
 800caa2:	f000 f887 	bl	800cbb4 <__sinit>
 800caa6:	4b14      	ldr	r3, [pc, #80]	; (800caf8 <_fflush_r+0x6c>)
 800caa8:	429c      	cmp	r4, r3
 800caaa:	d11b      	bne.n	800cae4 <_fflush_r+0x58>
 800caac:	686c      	ldr	r4, [r5, #4]
 800caae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d0ef      	beq.n	800ca96 <_fflush_r+0xa>
 800cab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cab8:	07d0      	lsls	r0, r2, #31
 800caba:	d404      	bmi.n	800cac6 <_fflush_r+0x3a>
 800cabc:	0599      	lsls	r1, r3, #22
 800cabe:	d402      	bmi.n	800cac6 <_fflush_r+0x3a>
 800cac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cac2:	f000 f915 	bl	800ccf0 <__retarget_lock_acquire_recursive>
 800cac6:	4628      	mov	r0, r5
 800cac8:	4621      	mov	r1, r4
 800caca:	f7ff ff5b 	bl	800c984 <__sflush_r>
 800cace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cad0:	4605      	mov	r5, r0
 800cad2:	07da      	lsls	r2, r3, #31
 800cad4:	d4e0      	bmi.n	800ca98 <_fflush_r+0xc>
 800cad6:	89a3      	ldrh	r3, [r4, #12]
 800cad8:	059b      	lsls	r3, r3, #22
 800cada:	d4dd      	bmi.n	800ca98 <_fflush_r+0xc>
 800cadc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cade:	f000 f908 	bl	800ccf2 <__retarget_lock_release_recursive>
 800cae2:	e7d9      	b.n	800ca98 <_fflush_r+0xc>
 800cae4:	4b05      	ldr	r3, [pc, #20]	; (800cafc <_fflush_r+0x70>)
 800cae6:	429c      	cmp	r4, r3
 800cae8:	d101      	bne.n	800caee <_fflush_r+0x62>
 800caea:	68ac      	ldr	r4, [r5, #8]
 800caec:	e7df      	b.n	800caae <_fflush_r+0x22>
 800caee:	4b04      	ldr	r3, [pc, #16]	; (800cb00 <_fflush_r+0x74>)
 800caf0:	429c      	cmp	r4, r3
 800caf2:	bf08      	it	eq
 800caf4:	68ec      	ldreq	r4, [r5, #12]
 800caf6:	e7da      	b.n	800caae <_fflush_r+0x22>
 800caf8:	0800d5e4 	.word	0x0800d5e4
 800cafc:	0800d604 	.word	0x0800d604
 800cb00:	0800d5c4 	.word	0x0800d5c4

0800cb04 <std>:
 800cb04:	2300      	movs	r3, #0
 800cb06:	b510      	push	{r4, lr}
 800cb08:	4604      	mov	r4, r0
 800cb0a:	6083      	str	r3, [r0, #8]
 800cb0c:	8181      	strh	r1, [r0, #12]
 800cb0e:	4619      	mov	r1, r3
 800cb10:	6643      	str	r3, [r0, #100]	; 0x64
 800cb12:	81c2      	strh	r2, [r0, #14]
 800cb14:	2208      	movs	r2, #8
 800cb16:	6183      	str	r3, [r0, #24]
 800cb18:	e9c0 3300 	strd	r3, r3, [r0]
 800cb1c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb20:	305c      	adds	r0, #92	; 0x5c
 800cb22:	f7ff fa26 	bl	800bf72 <memset>
 800cb26:	4b05      	ldr	r3, [pc, #20]	; (800cb3c <std+0x38>)
 800cb28:	6224      	str	r4, [r4, #32]
 800cb2a:	6263      	str	r3, [r4, #36]	; 0x24
 800cb2c:	4b04      	ldr	r3, [pc, #16]	; (800cb40 <std+0x3c>)
 800cb2e:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb30:	4b04      	ldr	r3, [pc, #16]	; (800cb44 <std+0x40>)
 800cb32:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb34:	4b04      	ldr	r3, [pc, #16]	; (800cb48 <std+0x44>)
 800cb36:	6323      	str	r3, [r4, #48]	; 0x30
 800cb38:	bd10      	pop	{r4, pc}
 800cb3a:	bf00      	nop
 800cb3c:	0800ce79 	.word	0x0800ce79
 800cb40:	0800ce9b 	.word	0x0800ce9b
 800cb44:	0800ced3 	.word	0x0800ced3
 800cb48:	0800cef7 	.word	0x0800cef7

0800cb4c <_cleanup_r>:
 800cb4c:	4901      	ldr	r1, [pc, #4]	; (800cb54 <_cleanup_r+0x8>)
 800cb4e:	f000 b8af 	b.w	800ccb0 <_fwalk_reent>
 800cb52:	bf00      	nop
 800cb54:	0800ca8d 	.word	0x0800ca8d

0800cb58 <__sfmoreglue>:
 800cb58:	b570      	push	{r4, r5, r6, lr}
 800cb5a:	1e4a      	subs	r2, r1, #1
 800cb5c:	2568      	movs	r5, #104	; 0x68
 800cb5e:	460e      	mov	r6, r1
 800cb60:	4355      	muls	r5, r2
 800cb62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb66:	f7ff fa5d 	bl	800c024 <_malloc_r>
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	b140      	cbz	r0, 800cb80 <__sfmoreglue+0x28>
 800cb6e:	2100      	movs	r1, #0
 800cb70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb74:	e9c0 1600 	strd	r1, r6, [r0]
 800cb78:	300c      	adds	r0, #12
 800cb7a:	60a0      	str	r0, [r4, #8]
 800cb7c:	f7ff f9f9 	bl	800bf72 <memset>
 800cb80:	4620      	mov	r0, r4
 800cb82:	bd70      	pop	{r4, r5, r6, pc}

0800cb84 <__sfp_lock_acquire>:
 800cb84:	4801      	ldr	r0, [pc, #4]	; (800cb8c <__sfp_lock_acquire+0x8>)
 800cb86:	f000 b8b3 	b.w	800ccf0 <__retarget_lock_acquire_recursive>
 800cb8a:	bf00      	nop
 800cb8c:	20000e10 	.word	0x20000e10

0800cb90 <__sfp_lock_release>:
 800cb90:	4801      	ldr	r0, [pc, #4]	; (800cb98 <__sfp_lock_release+0x8>)
 800cb92:	f000 b8ae 	b.w	800ccf2 <__retarget_lock_release_recursive>
 800cb96:	bf00      	nop
 800cb98:	20000e10 	.word	0x20000e10

0800cb9c <__sinit_lock_acquire>:
 800cb9c:	4801      	ldr	r0, [pc, #4]	; (800cba4 <__sinit_lock_acquire+0x8>)
 800cb9e:	f000 b8a7 	b.w	800ccf0 <__retarget_lock_acquire_recursive>
 800cba2:	bf00      	nop
 800cba4:	20000e0b 	.word	0x20000e0b

0800cba8 <__sinit_lock_release>:
 800cba8:	4801      	ldr	r0, [pc, #4]	; (800cbb0 <__sinit_lock_release+0x8>)
 800cbaa:	f000 b8a2 	b.w	800ccf2 <__retarget_lock_release_recursive>
 800cbae:	bf00      	nop
 800cbb0:	20000e0b 	.word	0x20000e0b

0800cbb4 <__sinit>:
 800cbb4:	b510      	push	{r4, lr}
 800cbb6:	4604      	mov	r4, r0
 800cbb8:	f7ff fff0 	bl	800cb9c <__sinit_lock_acquire>
 800cbbc:	69a3      	ldr	r3, [r4, #24]
 800cbbe:	b11b      	cbz	r3, 800cbc8 <__sinit+0x14>
 800cbc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbc4:	f7ff bff0 	b.w	800cba8 <__sinit_lock_release>
 800cbc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cbcc:	6523      	str	r3, [r4, #80]	; 0x50
 800cbce:	4620      	mov	r0, r4
 800cbd0:	4b12      	ldr	r3, [pc, #72]	; (800cc1c <__sinit+0x68>)
 800cbd2:	4a13      	ldr	r2, [pc, #76]	; (800cc20 <__sinit+0x6c>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	62a2      	str	r2, [r4, #40]	; 0x28
 800cbd8:	42a3      	cmp	r3, r4
 800cbda:	bf04      	itt	eq
 800cbdc:	2301      	moveq	r3, #1
 800cbde:	61a3      	streq	r3, [r4, #24]
 800cbe0:	f000 f820 	bl	800cc24 <__sfp>
 800cbe4:	6060      	str	r0, [r4, #4]
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f000 f81c 	bl	800cc24 <__sfp>
 800cbec:	60a0      	str	r0, [r4, #8]
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f000 f818 	bl	800cc24 <__sfp>
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	2104      	movs	r1, #4
 800cbf8:	60e0      	str	r0, [r4, #12]
 800cbfa:	6860      	ldr	r0, [r4, #4]
 800cbfc:	f7ff ff82 	bl	800cb04 <std>
 800cc00:	2201      	movs	r2, #1
 800cc02:	2109      	movs	r1, #9
 800cc04:	68a0      	ldr	r0, [r4, #8]
 800cc06:	f7ff ff7d 	bl	800cb04 <std>
 800cc0a:	2202      	movs	r2, #2
 800cc0c:	2112      	movs	r1, #18
 800cc0e:	68e0      	ldr	r0, [r4, #12]
 800cc10:	f7ff ff78 	bl	800cb04 <std>
 800cc14:	2301      	movs	r3, #1
 800cc16:	61a3      	str	r3, [r4, #24]
 800cc18:	e7d2      	b.n	800cbc0 <__sinit+0xc>
 800cc1a:	bf00      	nop
 800cc1c:	0800d58c 	.word	0x0800d58c
 800cc20:	0800cb4d 	.word	0x0800cb4d

0800cc24 <__sfp>:
 800cc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc26:	4607      	mov	r7, r0
 800cc28:	f7ff ffac 	bl	800cb84 <__sfp_lock_acquire>
 800cc2c:	4b1e      	ldr	r3, [pc, #120]	; (800cca8 <__sfp+0x84>)
 800cc2e:	681e      	ldr	r6, [r3, #0]
 800cc30:	69b3      	ldr	r3, [r6, #24]
 800cc32:	b913      	cbnz	r3, 800cc3a <__sfp+0x16>
 800cc34:	4630      	mov	r0, r6
 800cc36:	f7ff ffbd 	bl	800cbb4 <__sinit>
 800cc3a:	3648      	adds	r6, #72	; 0x48
 800cc3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc40:	3b01      	subs	r3, #1
 800cc42:	d503      	bpl.n	800cc4c <__sfp+0x28>
 800cc44:	6833      	ldr	r3, [r6, #0]
 800cc46:	b30b      	cbz	r3, 800cc8c <__sfp+0x68>
 800cc48:	6836      	ldr	r6, [r6, #0]
 800cc4a:	e7f7      	b.n	800cc3c <__sfp+0x18>
 800cc4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc50:	b9d5      	cbnz	r5, 800cc88 <__sfp+0x64>
 800cc52:	4b16      	ldr	r3, [pc, #88]	; (800ccac <__sfp+0x88>)
 800cc54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc58:	6665      	str	r5, [r4, #100]	; 0x64
 800cc5a:	60e3      	str	r3, [r4, #12]
 800cc5c:	f000 f847 	bl	800ccee <__retarget_lock_init_recursive>
 800cc60:	f7ff ff96 	bl	800cb90 <__sfp_lock_release>
 800cc64:	2208      	movs	r2, #8
 800cc66:	4629      	mov	r1, r5
 800cc68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc6c:	6025      	str	r5, [r4, #0]
 800cc6e:	61a5      	str	r5, [r4, #24]
 800cc70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc78:	f7ff f97b 	bl	800bf72 <memset>
 800cc7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc84:	4620      	mov	r0, r4
 800cc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc88:	3468      	adds	r4, #104	; 0x68
 800cc8a:	e7d9      	b.n	800cc40 <__sfp+0x1c>
 800cc8c:	2104      	movs	r1, #4
 800cc8e:	4638      	mov	r0, r7
 800cc90:	f7ff ff62 	bl	800cb58 <__sfmoreglue>
 800cc94:	4604      	mov	r4, r0
 800cc96:	6030      	str	r0, [r6, #0]
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d1d5      	bne.n	800cc48 <__sfp+0x24>
 800cc9c:	f7ff ff78 	bl	800cb90 <__sfp_lock_release>
 800cca0:	230c      	movs	r3, #12
 800cca2:	603b      	str	r3, [r7, #0]
 800cca4:	e7ee      	b.n	800cc84 <__sfp+0x60>
 800cca6:	bf00      	nop
 800cca8:	0800d58c 	.word	0x0800d58c
 800ccac:	ffff0001 	.word	0xffff0001

0800ccb0 <_fwalk_reent>:
 800ccb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccb4:	4606      	mov	r6, r0
 800ccb6:	4688      	mov	r8, r1
 800ccb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ccbc:	2700      	movs	r7, #0
 800ccbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ccc2:	f1b9 0901 	subs.w	r9, r9, #1
 800ccc6:	d505      	bpl.n	800ccd4 <_fwalk_reent+0x24>
 800ccc8:	6824      	ldr	r4, [r4, #0]
 800ccca:	2c00      	cmp	r4, #0
 800cccc:	d1f7      	bne.n	800ccbe <_fwalk_reent+0xe>
 800ccce:	4638      	mov	r0, r7
 800ccd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccd4:	89ab      	ldrh	r3, [r5, #12]
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d907      	bls.n	800ccea <_fwalk_reent+0x3a>
 800ccda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ccde:	3301      	adds	r3, #1
 800cce0:	d003      	beq.n	800ccea <_fwalk_reent+0x3a>
 800cce2:	4629      	mov	r1, r5
 800cce4:	4630      	mov	r0, r6
 800cce6:	47c0      	blx	r8
 800cce8:	4307      	orrs	r7, r0
 800ccea:	3568      	adds	r5, #104	; 0x68
 800ccec:	e7e9      	b.n	800ccc2 <_fwalk_reent+0x12>

0800ccee <__retarget_lock_init_recursive>:
 800ccee:	4770      	bx	lr

0800ccf0 <__retarget_lock_acquire_recursive>:
 800ccf0:	4770      	bx	lr

0800ccf2 <__retarget_lock_release_recursive>:
 800ccf2:	4770      	bx	lr

0800ccf4 <__swhatbuf_r>:
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	460e      	mov	r6, r1
 800ccf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccfc:	b096      	sub	sp, #88	; 0x58
 800ccfe:	4614      	mov	r4, r2
 800cd00:	2900      	cmp	r1, #0
 800cd02:	461d      	mov	r5, r3
 800cd04:	da07      	bge.n	800cd16 <__swhatbuf_r+0x22>
 800cd06:	2300      	movs	r3, #0
 800cd08:	602b      	str	r3, [r5, #0]
 800cd0a:	89b3      	ldrh	r3, [r6, #12]
 800cd0c:	061a      	lsls	r2, r3, #24
 800cd0e:	d410      	bmi.n	800cd32 <__swhatbuf_r+0x3e>
 800cd10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd14:	e00e      	b.n	800cd34 <__swhatbuf_r+0x40>
 800cd16:	466a      	mov	r2, sp
 800cd18:	f000 f914 	bl	800cf44 <_fstat_r>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	dbf2      	blt.n	800cd06 <__swhatbuf_r+0x12>
 800cd20:	9a01      	ldr	r2, [sp, #4]
 800cd22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd2a:	425a      	negs	r2, r3
 800cd2c:	415a      	adcs	r2, r3
 800cd2e:	602a      	str	r2, [r5, #0]
 800cd30:	e7ee      	b.n	800cd10 <__swhatbuf_r+0x1c>
 800cd32:	2340      	movs	r3, #64	; 0x40
 800cd34:	2000      	movs	r0, #0
 800cd36:	6023      	str	r3, [r4, #0]
 800cd38:	b016      	add	sp, #88	; 0x58
 800cd3a:	bd70      	pop	{r4, r5, r6, pc}

0800cd3c <__smakebuf_r>:
 800cd3c:	898b      	ldrh	r3, [r1, #12]
 800cd3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd40:	079d      	lsls	r5, r3, #30
 800cd42:	4606      	mov	r6, r0
 800cd44:	460c      	mov	r4, r1
 800cd46:	d507      	bpl.n	800cd58 <__smakebuf_r+0x1c>
 800cd48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd4c:	6023      	str	r3, [r4, #0]
 800cd4e:	6123      	str	r3, [r4, #16]
 800cd50:	2301      	movs	r3, #1
 800cd52:	6163      	str	r3, [r4, #20]
 800cd54:	b002      	add	sp, #8
 800cd56:	bd70      	pop	{r4, r5, r6, pc}
 800cd58:	ab01      	add	r3, sp, #4
 800cd5a:	466a      	mov	r2, sp
 800cd5c:	f7ff ffca 	bl	800ccf4 <__swhatbuf_r>
 800cd60:	9900      	ldr	r1, [sp, #0]
 800cd62:	4605      	mov	r5, r0
 800cd64:	4630      	mov	r0, r6
 800cd66:	f7ff f95d 	bl	800c024 <_malloc_r>
 800cd6a:	b948      	cbnz	r0, 800cd80 <__smakebuf_r+0x44>
 800cd6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd70:	059a      	lsls	r2, r3, #22
 800cd72:	d4ef      	bmi.n	800cd54 <__smakebuf_r+0x18>
 800cd74:	f023 0303 	bic.w	r3, r3, #3
 800cd78:	f043 0302 	orr.w	r3, r3, #2
 800cd7c:	81a3      	strh	r3, [r4, #12]
 800cd7e:	e7e3      	b.n	800cd48 <__smakebuf_r+0xc>
 800cd80:	4b0d      	ldr	r3, [pc, #52]	; (800cdb8 <__smakebuf_r+0x7c>)
 800cd82:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd84:	89a3      	ldrh	r3, [r4, #12]
 800cd86:	6020      	str	r0, [r4, #0]
 800cd88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd8c:	6120      	str	r0, [r4, #16]
 800cd8e:	81a3      	strh	r3, [r4, #12]
 800cd90:	9b00      	ldr	r3, [sp, #0]
 800cd92:	6163      	str	r3, [r4, #20]
 800cd94:	9b01      	ldr	r3, [sp, #4]
 800cd96:	b15b      	cbz	r3, 800cdb0 <__smakebuf_r+0x74>
 800cd98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	f000 f8e3 	bl	800cf68 <_isatty_r>
 800cda2:	b128      	cbz	r0, 800cdb0 <__smakebuf_r+0x74>
 800cda4:	89a3      	ldrh	r3, [r4, #12]
 800cda6:	f023 0303 	bic.w	r3, r3, #3
 800cdaa:	f043 0301 	orr.w	r3, r3, #1
 800cdae:	81a3      	strh	r3, [r4, #12]
 800cdb0:	89a0      	ldrh	r0, [r4, #12]
 800cdb2:	4305      	orrs	r5, r0
 800cdb4:	81a5      	strh	r5, [r4, #12]
 800cdb6:	e7cd      	b.n	800cd54 <__smakebuf_r+0x18>
 800cdb8:	0800cb4d 	.word	0x0800cb4d

0800cdbc <memchr>:
 800cdbc:	b2c9      	uxtb	r1, r1
 800cdbe:	4402      	add	r2, r0
 800cdc0:	b510      	push	{r4, lr}
 800cdc2:	4290      	cmp	r0, r2
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	d101      	bne.n	800cdcc <memchr+0x10>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	e003      	b.n	800cdd4 <memchr+0x18>
 800cdcc:	781c      	ldrb	r4, [r3, #0]
 800cdce:	3001      	adds	r0, #1
 800cdd0:	428c      	cmp	r4, r1
 800cdd2:	d1f6      	bne.n	800cdc2 <memchr+0x6>
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	bd10      	pop	{r4, pc}

0800cdd8 <__malloc_lock>:
 800cdd8:	4801      	ldr	r0, [pc, #4]	; (800cde0 <__malloc_lock+0x8>)
 800cdda:	f7ff bf89 	b.w	800ccf0 <__retarget_lock_acquire_recursive>
 800cdde:	bf00      	nop
 800cde0:	20000e0c 	.word	0x20000e0c

0800cde4 <__malloc_unlock>:
 800cde4:	4801      	ldr	r0, [pc, #4]	; (800cdec <__malloc_unlock+0x8>)
 800cde6:	f7ff bf84 	b.w	800ccf2 <__retarget_lock_release_recursive>
 800cdea:	bf00      	nop
 800cdec:	20000e0c 	.word	0x20000e0c

0800cdf0 <_raise_r>:
 800cdf0:	291f      	cmp	r1, #31
 800cdf2:	b538      	push	{r3, r4, r5, lr}
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	460d      	mov	r5, r1
 800cdf8:	d904      	bls.n	800ce04 <_raise_r+0x14>
 800cdfa:	2316      	movs	r3, #22
 800cdfc:	6003      	str	r3, [r0, #0]
 800cdfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ce02:	bd38      	pop	{r3, r4, r5, pc}
 800ce04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce06:	b112      	cbz	r2, 800ce0e <_raise_r+0x1e>
 800ce08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce0c:	b94b      	cbnz	r3, 800ce22 <_raise_r+0x32>
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f000 f830 	bl	800ce74 <_getpid_r>
 800ce14:	462a      	mov	r2, r5
 800ce16:	4601      	mov	r1, r0
 800ce18:	4620      	mov	r0, r4
 800ce1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce1e:	f000 b817 	b.w	800ce50 <_kill_r>
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d00a      	beq.n	800ce3c <_raise_r+0x4c>
 800ce26:	1c59      	adds	r1, r3, #1
 800ce28:	d103      	bne.n	800ce32 <_raise_r+0x42>
 800ce2a:	2316      	movs	r3, #22
 800ce2c:	6003      	str	r3, [r0, #0]
 800ce2e:	2001      	movs	r0, #1
 800ce30:	e7e7      	b.n	800ce02 <_raise_r+0x12>
 800ce32:	2400      	movs	r4, #0
 800ce34:	4628      	mov	r0, r5
 800ce36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce3a:	4798      	blx	r3
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	e7e0      	b.n	800ce02 <_raise_r+0x12>

0800ce40 <raise>:
 800ce40:	4b02      	ldr	r3, [pc, #8]	; (800ce4c <raise+0xc>)
 800ce42:	4601      	mov	r1, r0
 800ce44:	6818      	ldr	r0, [r3, #0]
 800ce46:	f7ff bfd3 	b.w	800cdf0 <_raise_r>
 800ce4a:	bf00      	nop
 800ce4c:	2000000c 	.word	0x2000000c

0800ce50 <_kill_r>:
 800ce50:	b538      	push	{r3, r4, r5, lr}
 800ce52:	2300      	movs	r3, #0
 800ce54:	4d06      	ldr	r5, [pc, #24]	; (800ce70 <_kill_r+0x20>)
 800ce56:	4604      	mov	r4, r0
 800ce58:	4608      	mov	r0, r1
 800ce5a:	4611      	mov	r1, r2
 800ce5c:	602b      	str	r3, [r5, #0]
 800ce5e:	f7f6 f825 	bl	8002eac <_kill>
 800ce62:	1c43      	adds	r3, r0, #1
 800ce64:	d102      	bne.n	800ce6c <_kill_r+0x1c>
 800ce66:	682b      	ldr	r3, [r5, #0]
 800ce68:	b103      	cbz	r3, 800ce6c <_kill_r+0x1c>
 800ce6a:	6023      	str	r3, [r4, #0]
 800ce6c:	bd38      	pop	{r3, r4, r5, pc}
 800ce6e:	bf00      	nop
 800ce70:	20000e14 	.word	0x20000e14

0800ce74 <_getpid_r>:
 800ce74:	f7f6 b812 	b.w	8002e9c <_getpid>

0800ce78 <__sread>:
 800ce78:	b510      	push	{r4, lr}
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce80:	f000 f894 	bl	800cfac <_read_r>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	bfab      	itete	ge
 800ce88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce8a:	89a3      	ldrhlt	r3, [r4, #12]
 800ce8c:	181b      	addge	r3, r3, r0
 800ce8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce92:	bfac      	ite	ge
 800ce94:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce96:	81a3      	strhlt	r3, [r4, #12]
 800ce98:	bd10      	pop	{r4, pc}

0800ce9a <__swrite>:
 800ce9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9e:	461f      	mov	r7, r3
 800cea0:	898b      	ldrh	r3, [r1, #12]
 800cea2:	4605      	mov	r5, r0
 800cea4:	460c      	mov	r4, r1
 800cea6:	05db      	lsls	r3, r3, #23
 800cea8:	4616      	mov	r6, r2
 800ceaa:	d505      	bpl.n	800ceb8 <__swrite+0x1e>
 800ceac:	2302      	movs	r3, #2
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb4:	f000 f868 	bl	800cf88 <_lseek_r>
 800ceb8:	89a3      	ldrh	r3, [r4, #12]
 800ceba:	4632      	mov	r2, r6
 800cebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cec0:	4628      	mov	r0, r5
 800cec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cec6:	81a3      	strh	r3, [r4, #12]
 800cec8:	463b      	mov	r3, r7
 800ceca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cece:	f000 b817 	b.w	800cf00 <_write_r>

0800ced2 <__sseek>:
 800ced2:	b510      	push	{r4, lr}
 800ced4:	460c      	mov	r4, r1
 800ced6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceda:	f000 f855 	bl	800cf88 <_lseek_r>
 800cede:	1c43      	adds	r3, r0, #1
 800cee0:	89a3      	ldrh	r3, [r4, #12]
 800cee2:	bf15      	itete	ne
 800cee4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ceea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ceee:	81a3      	strheq	r3, [r4, #12]
 800cef0:	bf18      	it	ne
 800cef2:	81a3      	strhne	r3, [r4, #12]
 800cef4:	bd10      	pop	{r4, pc}

0800cef6 <__sclose>:
 800cef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cefa:	f000 b813 	b.w	800cf24 <_close_r>
	...

0800cf00 <_write_r>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4604      	mov	r4, r0
 800cf04:	4d06      	ldr	r5, [pc, #24]	; (800cf20 <_write_r+0x20>)
 800cf06:	4608      	mov	r0, r1
 800cf08:	4611      	mov	r1, r2
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	602a      	str	r2, [r5, #0]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	f7f6 f803 	bl	8002f1a <_write>
 800cf14:	1c43      	adds	r3, r0, #1
 800cf16:	d102      	bne.n	800cf1e <_write_r+0x1e>
 800cf18:	682b      	ldr	r3, [r5, #0]
 800cf1a:	b103      	cbz	r3, 800cf1e <_write_r+0x1e>
 800cf1c:	6023      	str	r3, [r4, #0]
 800cf1e:	bd38      	pop	{r3, r4, r5, pc}
 800cf20:	20000e14 	.word	0x20000e14

0800cf24 <_close_r>:
 800cf24:	b538      	push	{r3, r4, r5, lr}
 800cf26:	2300      	movs	r3, #0
 800cf28:	4d05      	ldr	r5, [pc, #20]	; (800cf40 <_close_r+0x1c>)
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	4608      	mov	r0, r1
 800cf2e:	602b      	str	r3, [r5, #0]
 800cf30:	f7f6 f80f 	bl	8002f52 <_close>
 800cf34:	1c43      	adds	r3, r0, #1
 800cf36:	d102      	bne.n	800cf3e <_close_r+0x1a>
 800cf38:	682b      	ldr	r3, [r5, #0]
 800cf3a:	b103      	cbz	r3, 800cf3e <_close_r+0x1a>
 800cf3c:	6023      	str	r3, [r4, #0]
 800cf3e:	bd38      	pop	{r3, r4, r5, pc}
 800cf40:	20000e14 	.word	0x20000e14

0800cf44 <_fstat_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	2300      	movs	r3, #0
 800cf48:	4d06      	ldr	r5, [pc, #24]	; (800cf64 <_fstat_r+0x20>)
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	4611      	mov	r1, r2
 800cf50:	602b      	str	r3, [r5, #0]
 800cf52:	f7f6 f80a 	bl	8002f6a <_fstat>
 800cf56:	1c43      	adds	r3, r0, #1
 800cf58:	d102      	bne.n	800cf60 <_fstat_r+0x1c>
 800cf5a:	682b      	ldr	r3, [r5, #0]
 800cf5c:	b103      	cbz	r3, 800cf60 <_fstat_r+0x1c>
 800cf5e:	6023      	str	r3, [r4, #0]
 800cf60:	bd38      	pop	{r3, r4, r5, pc}
 800cf62:	bf00      	nop
 800cf64:	20000e14 	.word	0x20000e14

0800cf68 <_isatty_r>:
 800cf68:	b538      	push	{r3, r4, r5, lr}
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	4d05      	ldr	r5, [pc, #20]	; (800cf84 <_isatty_r+0x1c>)
 800cf6e:	4604      	mov	r4, r0
 800cf70:	4608      	mov	r0, r1
 800cf72:	602b      	str	r3, [r5, #0]
 800cf74:	f7f6 f809 	bl	8002f8a <_isatty>
 800cf78:	1c43      	adds	r3, r0, #1
 800cf7a:	d102      	bne.n	800cf82 <_isatty_r+0x1a>
 800cf7c:	682b      	ldr	r3, [r5, #0]
 800cf7e:	b103      	cbz	r3, 800cf82 <_isatty_r+0x1a>
 800cf80:	6023      	str	r3, [r4, #0]
 800cf82:	bd38      	pop	{r3, r4, r5, pc}
 800cf84:	20000e14 	.word	0x20000e14

0800cf88 <_lseek_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	4d06      	ldr	r5, [pc, #24]	; (800cfa8 <_lseek_r+0x20>)
 800cf8e:	4608      	mov	r0, r1
 800cf90:	4611      	mov	r1, r2
 800cf92:	2200      	movs	r2, #0
 800cf94:	602a      	str	r2, [r5, #0]
 800cf96:	461a      	mov	r2, r3
 800cf98:	f7f6 f802 	bl	8002fa0 <_lseek>
 800cf9c:	1c43      	adds	r3, r0, #1
 800cf9e:	d102      	bne.n	800cfa6 <_lseek_r+0x1e>
 800cfa0:	682b      	ldr	r3, [r5, #0]
 800cfa2:	b103      	cbz	r3, 800cfa6 <_lseek_r+0x1e>
 800cfa4:	6023      	str	r3, [r4, #0]
 800cfa6:	bd38      	pop	{r3, r4, r5, pc}
 800cfa8:	20000e14 	.word	0x20000e14

0800cfac <_read_r>:
 800cfac:	b538      	push	{r3, r4, r5, lr}
 800cfae:	4604      	mov	r4, r0
 800cfb0:	4d06      	ldr	r5, [pc, #24]	; (800cfcc <_read_r+0x20>)
 800cfb2:	4608      	mov	r0, r1
 800cfb4:	4611      	mov	r1, r2
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	602a      	str	r2, [r5, #0]
 800cfba:	461a      	mov	r2, r3
 800cfbc:	f7f5 ff90 	bl	8002ee0 <_read>
 800cfc0:	1c43      	adds	r3, r0, #1
 800cfc2:	d102      	bne.n	800cfca <_read_r+0x1e>
 800cfc4:	682b      	ldr	r3, [r5, #0]
 800cfc6:	b103      	cbz	r3, 800cfca <_read_r+0x1e>
 800cfc8:	6023      	str	r3, [r4, #0]
 800cfca:	bd38      	pop	{r3, r4, r5, pc}
 800cfcc:	20000e14 	.word	0x20000e14

0800cfd0 <_init>:
 800cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd2:	bf00      	nop
 800cfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfd6:	bc08      	pop	{r3}
 800cfd8:	469e      	mov	lr, r3
 800cfda:	4770      	bx	lr

0800cfdc <_fini>:
 800cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfde:	bf00      	nop
 800cfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfe2:	bc08      	pop	{r3}
 800cfe4:	469e      	mov	lr, r3
 800cfe6:	4770      	bx	lr
